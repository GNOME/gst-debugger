// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gstdebugger.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gstdebugger.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GstDebugger {
class ValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Value> {
} _Value_default_instance_;
class PropertyInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PropertyInfo> {
} _PropertyInfo_default_instance_;
class PropertyValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PropertyValue> {
} _PropertyValue_default_instance_;
class PropertyRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PropertyRequest> {
} _PropertyRequest_default_instance_;
class MessageInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MessageInfo> {
} _MessageInfo_default_instance_;
class EventInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EventInfo> {
} _EventInfo_default_instance_;
class QueryInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryInfo> {
} _QueryInfo_default_instance_;
class BufferInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BufferInfo> {
} _BufferInfo_default_instance_;
class TypeDescriptionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TypeDescriptionRequest> {
} _TypeDescriptionRequest_default_instance_;
class QueryHookRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryHookRequest> {
} _QueryHookRequest_default_instance_;
class BufferHookRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BufferHookRequest> {
} _BufferHookRequest_default_instance_;
class EventHookRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EventHookRequest> {
} _EventHookRequest_default_instance_;
class PadHookRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PadHookRequest> {
  public:
  const ::GstDebugger::QueryHookRequest* query_;
  const ::GstDebugger::BufferHookRequest* buffer_;
  const ::GstDebugger::EventHookRequest* event_;
} _PadHookRequest_default_instance_;
class LogRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogRequest> {
} _LogRequest_default_instance_;
class MessageRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MessageRequest> {
} _MessageRequest_default_instance_;
class HookRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HookRequest> {
  public:
  const ::GstDebugger::MessageRequest* message_;
  const ::GstDebugger::LogRequest* log_;
  const ::GstDebugger::PadHookRequest* pad_hook_;
} _HookRequest_default_instance_;
class CommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Command> {
  public:
  const ::GstDebugger::TypeDescriptionRequest* type_description_;
  bool debug_categories_list_;
  const ::GstDebugger::HookRequest* hook_request_;
  ::google::protobuf::internal::ArenaStringPtr log_threshold_;
  bool entire_topology_;
  const ::GstDebugger::PropertyRequest* property_;
  const ::GstDebugger::PropertyValue* property_set_;
  ::google::protobuf::internal::ArenaStringPtr pad_dynamic_info_;
} _Command_default_instance_;
class DebugCategoriesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DebugCategories> {
} _DebugCategories_default_instance_;
class LogInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogInfo> {
} _LogInfo_default_instance_;
class EnumFlagsValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnumFlagsValue> {
} _EnumFlagsValue_default_instance_;
class EnumFlagsTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnumFlagsType> {
} _EnumFlagsType_default_instance_;
class FactoryMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FactoryMeta> {
} _FactoryMeta_default_instance_;
class PadTemplateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PadTemplate> {
} _PadTemplate_default_instance_;
class FactoryTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FactoryType> {
} _FactoryType_default_instance_;
class ElementKlassDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ElementKlass> {
} _ElementKlass_default_instance_;
class TopologyLinkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TopologyLink> {
} _TopologyLink_default_instance_;
class TopologyElementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TopologyElement> {
} _TopologyElement_default_instance_;
class TopologyPadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TopologyPad> {
} _TopologyPad_default_instance_;
class TopologyInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TopologyInfo> {
  public:
  const ::GstDebugger::TopologyLink* link_;
  const ::GstDebugger::TopologyElement* element_;
  const ::GstDebugger::TopologyPad* pad_;
} _TopologyInfo_default_instance_;
class PadDynamicInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PadDynamicInfo> {
} _PadDynamicInfo_default_instance_;
class GStreamerDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GStreamerData> {
  public:
  const ::GstDebugger::DebugCategories* debug_categories_;
  const ::GstDebugger::LogInfo* log_info_;
  const ::GstDebugger::EnumFlagsType* enum_flags_type_;
  const ::GstDebugger::FactoryType* factory_;
  const ::GstDebugger::MessageInfo* message_info_;
  const ::GstDebugger::Command* confirmation_;
  const ::GstDebugger::EventInfo* event_info_;
  const ::GstDebugger::TopologyInfo* topology_info_;
  const ::GstDebugger::QueryInfo* query_info_;
  const ::GstDebugger::PropertyValue* property_value_;
  const ::GstDebugger::ElementKlass* element_klass_;
  const ::GstDebugger::BufferInfo* buffer_info_;
  const ::GstDebugger::PadDynamicInfo* pad_dynamic_info_;
} _GStreamerData_default_instance_;

namespace protobuf_gstdebugger_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[31];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, gtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, internal_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, type_name_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInfo, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInfo, blurb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInfo, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInfo, default_value_),
  0,
  1,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValue, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValue, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValue, value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRequest, object_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, seqnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, structure_data_),
  3,
  2,
  0,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, seqnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, structure_data_),
  3,
  2,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, structure_data_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, pts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, dts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, offset_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, data_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeDescriptionRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeDescriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeDescriptionRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeDescriptionRequest, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHookRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryHookRequest, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferHookRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferHookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferHookRequest, send_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHookRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHookRequest, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadHookRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadHookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadHookRequest, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadHookRequest, pad_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_PadHookRequest_default_instance_), query_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_PadHookRequest_default_instance_), buffer_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_PadHookRequest_default_instance_), event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadHookRequest, pad_hook_type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRequest, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRequest, category_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRequest, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRequest, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRequest, action_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HookRequest_default_instance_), message_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HookRequest_default_instance_), log_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HookRequest_default_instance_), pad_hook_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRequest, hook_type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), type_description_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), debug_categories_list_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), hook_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), log_threshold_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), entire_topology_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), property_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), property_set_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), pad_dynamic_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, command_type_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCategories, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCategories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCategories, category_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, function_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogInfo, message_),
  5,
  0,
  1,
  2,
  6,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumFlagsValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumFlagsValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumFlagsValue, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumFlagsValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumFlagsValue, nick_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumFlagsType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumFlagsType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumFlagsType, type_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumFlagsType, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumFlagsType, values_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryMeta, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryMeta, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadTemplate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadTemplate, name_template_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadTemplate, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadTemplate, presence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadTemplate, caps_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryType, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryType, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryType, templates_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementKlass, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementKlass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementKlass, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementKlass, property_info_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyLink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyLink, src_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyLink, sink_pad_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyElement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyElement, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyElement, type_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyElement, is_bin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyElement, factory_name_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyPad, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyPad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyPad, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyPad, is_ghostpad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyPad, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyPad, presence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyPad, template__),
  0,
  2,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyInfo, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyInfo, action_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TopologyInfo_default_instance_), link_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TopologyInfo_default_instance_), element_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TopologyInfo_default_instance_), pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopologyInfo, topology_type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadDynamicInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadDynamicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadDynamicInfo, allowed_caps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadDynamicInfo, current_caps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadDynamicInfo, pad_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GStreamerData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GStreamerData, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GStreamerData, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), debug_categories_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), log_info_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), enum_flags_type_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), factory_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), message_info_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), confirmation_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), event_info_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), topology_info_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), query_info_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), property_value_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), element_klass_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), buffer_info_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_GStreamerData_default_instance_), pad_dynamic_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GStreamerData, info_type_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(Value)},
  { 12, 21, sizeof(PropertyInfo)},
  { 26, 33, sizeof(PropertyValue)},
  { 36, 42, sizeof(PropertyRequest)},
  { 44, 53, sizeof(MessageInfo)},
  { 58, 67, sizeof(EventInfo)},
  { 72, 79, sizeof(QueryInfo)},
  { 82, 94, sizeof(BufferInfo)},
  { 102, 108, sizeof(TypeDescriptionRequest)},
  { 110, 115, sizeof(QueryHookRequest)},
  { 116, 121, sizeof(BufferHookRequest)},
  { 122, 127, sizeof(EventHookRequest)},
  { 128, 137, sizeof(PadHookRequest)},
  { 141, 147, sizeof(LogRequest)},
  { 149, 154, sizeof(MessageRequest)},
  { 155, 164, sizeof(HookRequest)},
  { 168, 181, sizeof(Command)},
  { 189, 194, sizeof(DebugCategories)},
  { 195, 206, sizeof(LogInfo)},
  { 213, 220, sizeof(EnumFlagsValue)},
  { 223, 230, sizeof(EnumFlagsType)},
  { 233, 239, sizeof(FactoryMeta)},
  { 241, 249, sizeof(PadTemplate)},
  { 253, 260, sizeof(FactoryType)},
  { 263, 269, sizeof(ElementKlass)},
  { 271, 277, sizeof(TopologyLink)},
  { 279, 287, sizeof(TopologyElement)},
  { 291, 300, sizeof(TopologyPad)},
  { 305, 314, sizeof(TopologyInfo)},
  { 318, 325, sizeof(PadDynamicInfo)},
  { 328, 346, sizeof(GStreamerData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Value_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropertyInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropertyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropertyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MessageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BufferInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TypeDescriptionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryHookRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BufferHookRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventHookRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PadHookRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MessageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HookRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DebugCategories_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnumFlagsValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnumFlagsType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FactoryMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PadTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FactoryType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ElementKlass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TopologyLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TopologyElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TopologyPad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TopologyInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PadDynamicInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GStreamerData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gstdebugger.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 31);
}

}  // namespace

void TableStruct::Shutdown() {
  _Value_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PropertyInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PropertyValue_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PropertyRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _MessageInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _EventInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _QueryInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _BufferInfo_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _TypeDescriptionRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _QueryHookRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _BufferHookRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _EventHookRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _PadHookRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _LogRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _MessageRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _HookRequest_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Command_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _DebugCategories_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _LogInfo_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _EnumFlagsValue_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _EnumFlagsType_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _FactoryMeta_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _PadTemplate_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _FactoryType_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _ElementKlass_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _TopologyLink_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _TopologyElement_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _TopologyPad_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _TopologyInfo_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _PadDynamicInfo_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _GStreamerData_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Value_default_instance_.DefaultConstruct();
  _PropertyInfo_default_instance_.DefaultConstruct();
  _PropertyValue_default_instance_.DefaultConstruct();
  _PropertyRequest_default_instance_.DefaultConstruct();
  _MessageInfo_default_instance_.DefaultConstruct();
  _EventInfo_default_instance_.DefaultConstruct();
  _QueryInfo_default_instance_.DefaultConstruct();
  _BufferInfo_default_instance_.DefaultConstruct();
  _TypeDescriptionRequest_default_instance_.DefaultConstruct();
  _QueryHookRequest_default_instance_.DefaultConstruct();
  _BufferHookRequest_default_instance_.DefaultConstruct();
  _EventHookRequest_default_instance_.DefaultConstruct();
  _PadHookRequest_default_instance_.DefaultConstruct();
  _LogRequest_default_instance_.DefaultConstruct();
  _MessageRequest_default_instance_.DefaultConstruct();
  _HookRequest_default_instance_.DefaultConstruct();
  _Command_default_instance_.DefaultConstruct();
  _DebugCategories_default_instance_.DefaultConstruct();
  _LogInfo_default_instance_.DefaultConstruct();
  _EnumFlagsValue_default_instance_.DefaultConstruct();
  _EnumFlagsType_default_instance_.DefaultConstruct();
  _FactoryMeta_default_instance_.DefaultConstruct();
  _PadTemplate_default_instance_.DefaultConstruct();
  _FactoryType_default_instance_.DefaultConstruct();
  _ElementKlass_default_instance_.DefaultConstruct();
  _TopologyLink_default_instance_.DefaultConstruct();
  _TopologyElement_default_instance_.DefaultConstruct();
  _TopologyPad_default_instance_.DefaultConstruct();
  _TopologyInfo_default_instance_.DefaultConstruct();
  _PadDynamicInfo_default_instance_.DefaultConstruct();
  _GStreamerData_default_instance_.DefaultConstruct();
  _PropertyInfo_default_instance_.get_mutable()->default_value_ = const_cast< ::GstDebugger::Value*>(
      ::GstDebugger::Value::internal_default_instance());
  _PropertyValue_default_instance_.get_mutable()->value_ = const_cast< ::GstDebugger::Value*>(
      ::GstDebugger::Value::internal_default_instance());
  _PadHookRequest_default_instance_.query_ = const_cast< ::GstDebugger::QueryHookRequest*>(
      ::GstDebugger::QueryHookRequest::internal_default_instance());
  _PadHookRequest_default_instance_.buffer_ = const_cast< ::GstDebugger::BufferHookRequest*>(
      ::GstDebugger::BufferHookRequest::internal_default_instance());
  _PadHookRequest_default_instance_.event_ = const_cast< ::GstDebugger::EventHookRequest*>(
      ::GstDebugger::EventHookRequest::internal_default_instance());
  _HookRequest_default_instance_.message_ = const_cast< ::GstDebugger::MessageRequest*>(
      ::GstDebugger::MessageRequest::internal_default_instance());
  _HookRequest_default_instance_.log_ = const_cast< ::GstDebugger::LogRequest*>(
      ::GstDebugger::LogRequest::internal_default_instance());
  _HookRequest_default_instance_.pad_hook_ = const_cast< ::GstDebugger::PadHookRequest*>(
      ::GstDebugger::PadHookRequest::internal_default_instance());
  _Command_default_instance_.type_description_ = const_cast< ::GstDebugger::TypeDescriptionRequest*>(
      ::GstDebugger::TypeDescriptionRequest::internal_default_instance());
  _Command_default_instance_.debug_categories_list_ = false;
  _Command_default_instance_.hook_request_ = const_cast< ::GstDebugger::HookRequest*>(
      ::GstDebugger::HookRequest::internal_default_instance());
  _Command_default_instance_.log_threshold_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Command_default_instance_.entire_topology_ = false;
  _Command_default_instance_.property_ = const_cast< ::GstDebugger::PropertyRequest*>(
      ::GstDebugger::PropertyRequest::internal_default_instance());
  _Command_default_instance_.property_set_ = const_cast< ::GstDebugger::PropertyValue*>(
      ::GstDebugger::PropertyValue::internal_default_instance());
  _Command_default_instance_.pad_dynamic_info_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _TopologyPad_default_instance_.get_mutable()->template__ = const_cast< ::GstDebugger::PadTemplate*>(
      ::GstDebugger::PadTemplate::internal_default_instance());
  _TopologyInfo_default_instance_.link_ = const_cast< ::GstDebugger::TopologyLink*>(
      ::GstDebugger::TopologyLink::internal_default_instance());
  _TopologyInfo_default_instance_.element_ = const_cast< ::GstDebugger::TopologyElement*>(
      ::GstDebugger::TopologyElement::internal_default_instance());
  _TopologyInfo_default_instance_.pad_ = const_cast< ::GstDebugger::TopologyPad*>(
      ::GstDebugger::TopologyPad::internal_default_instance());
  _GStreamerData_default_instance_.debug_categories_ = const_cast< ::GstDebugger::DebugCategories*>(
      ::GstDebugger::DebugCategories::internal_default_instance());
  _GStreamerData_default_instance_.log_info_ = const_cast< ::GstDebugger::LogInfo*>(
      ::GstDebugger::LogInfo::internal_default_instance());
  _GStreamerData_default_instance_.enum_flags_type_ = const_cast< ::GstDebugger::EnumFlagsType*>(
      ::GstDebugger::EnumFlagsType::internal_default_instance());
  _GStreamerData_default_instance_.factory_ = const_cast< ::GstDebugger::FactoryType*>(
      ::GstDebugger::FactoryType::internal_default_instance());
  _GStreamerData_default_instance_.message_info_ = const_cast< ::GstDebugger::MessageInfo*>(
      ::GstDebugger::MessageInfo::internal_default_instance());
  _GStreamerData_default_instance_.confirmation_ = const_cast< ::GstDebugger::Command*>(
      ::GstDebugger::Command::internal_default_instance());
  _GStreamerData_default_instance_.event_info_ = const_cast< ::GstDebugger::EventInfo*>(
      ::GstDebugger::EventInfo::internal_default_instance());
  _GStreamerData_default_instance_.topology_info_ = const_cast< ::GstDebugger::TopologyInfo*>(
      ::GstDebugger::TopologyInfo::internal_default_instance());
  _GStreamerData_default_instance_.query_info_ = const_cast< ::GstDebugger::QueryInfo*>(
      ::GstDebugger::QueryInfo::internal_default_instance());
  _GStreamerData_default_instance_.property_value_ = const_cast< ::GstDebugger::PropertyValue*>(
      ::GstDebugger::PropertyValue::internal_default_instance());
  _GStreamerData_default_instance_.element_klass_ = const_cast< ::GstDebugger::ElementKlass*>(
      ::GstDebugger::ElementKlass::internal_default_instance());
  _GStreamerData_default_instance_.buffer_info_ = const_cast< ::GstDebugger::BufferInfo*>(
      ::GstDebugger::BufferInfo::internal_default_instance());
  _GStreamerData_default_instance_.pad_dynamic_info_ = const_cast< ::GstDebugger::PadDynamicInfo*>(
      ::GstDebugger::PadDynamicInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021gstdebugger.proto\022\013GstDebugger\"N\n\005Valu"
      "e\022\r\n\005gtype\030\001 \002(\004\022\025\n\rinternal_type\030\002 \001(\005\022"
      "\014\n\004data\030\003 \002(\014\022\021\n\ttype_name\030\004 \002(\t\"s\n\014Prop"
      "ertyInfo\022\014\n\004name\030\001 \002(\t\022\014\n\004nick\030\002 \002(\t\022\r\n\005"
      "blurb\030\003 \002(\t\022\r\n\005flags\030\004 \002(\005\022)\n\rdefault_va"
      "lue\030\005 \002(\0132\022.GstDebugger.Value\"P\n\rPropert"
      "yValue\022\014\n\004name\030\001 \002(\t\022\016\n\006object\030\002 \002(\t\022!\n\005"
      "value\030\003 \002(\0132\022.GstDebugger.Value\"/\n\017Prope"
      "rtyRequest\022\014\n\004name\030\001 \001(\t\022\016\n\006object\030\002 \002(\t"
      "\"f\n\013MessageInfo\022\014\n\004type\030\001 \002(\005\022\021\n\ttimesta"
      "mp\030\002 \002(\004\022\016\n\006source\030\003 \002(\t\022\016\n\006seqnum\030\004 \002(\r"
      "\022\026\n\016structure_data\030\005 \002(\014\"a\n\tEventInfo\022\014\n"
      "\004type\030\001 \002(\005\022\021\n\ttimestamp\030\002 \002(\004\022\016\n\006seqnum"
      "\030\003 \002(\r\022\013\n\003pad\030\004 \002(\t\022\026\n\016structure_data\030\005 "
      "\002(\014\">\n\tQueryInfo\022\014\n\004type\030\001 \002(\005\022\013\n\003pad\030\002 "
      "\002(\t\022\026\n\016structure_data\030\003 \002(\014\"\205\001\n\nBufferIn"
      "fo\022\013\n\003pts\030\001 \002(\004\022\013\n\003dts\030\002 \002(\004\022\020\n\010duration"
      "\030\003 \002(\004\022\016\n\006offset\030\004 \002(\004\022\022\n\noffset_end\030\005 \002"
      "(\004\022\014\n\004size\030\006 \002(\004\022\013\n\003pad\030\007 \002(\t\022\014\n\004data\030\010 "
      "\001(\014\"\216\001\n\026TypeDescriptionRequest\022\014\n\004name\030\001"
      " \002(\t\0226\n\004type\030\002 \002(\0162(.GstDebugger.TypeDes"
      "criptionRequest.Type\".\n\004Type\022\013\n\007FACTORY\020"
      "\000\022\016\n\nENUM_FLAGS\020\001\022\t\n\005KLASS\020\002\" \n\020QueryHoo"
      "kRequest\022\014\n\004type\030\001 \002(\005\"&\n\021BufferHookRequ"
      "est\022\021\n\tsend_data\030\001 \002(\010\" \n\020EventHookReque"
      "st\022\014\n\004type\030\001 \002(\005\"\300\001\n\016PadHookRequest\022\013\n\003p"
      "ad\030\001 \001(\t\022.\n\005query\030\002 \001(\0132\035.GstDebugger.Qu"
      "eryHookRequestH\000\0220\n\006buffer\030\003 \001(\0132\036.GstDe"
      "bugger.BufferHookRequestH\000\022.\n\005event\030\004 \001("
      "\0132\035.GstDebugger.EventHookRequestH\000B\017\n\rpa"
      "d_hook_type\"-\n\nLogRequest\022\r\n\005level\030\001 \002(\005"
      "\022\020\n\010category\030\002 \001(\t\"\036\n\016MessageRequest\022\014\n\004"
      "type\030\001 \002(\005\"\310\001\n\013HookRequest\022#\n\006action\030\001 \002"
      "(\0162\023.GstDebugger.Action\022.\n\007message\030\002 \001(\013"
      "2\033.GstDebugger.MessageRequestH\000\022&\n\003log\030\003"
      " \001(\0132\027.GstDebugger.LogRequestH\000\022/\n\010pad_h"
      "ook\030\004 \001(\0132\033.GstDebugger.PadHookRequestH\000"
      "B\013\n\thook_type\"\343\002\n\007Command\022\?\n\020type_descri"
      "ption\030\001 \001(\0132#.GstDebugger.TypeDescriptio"
      "nRequestH\000\022\037\n\025debug_categories_list\030\002 \001("
      "\010H\000\0220\n\014hook_request\030\003 \001(\0132\030.GstDebugger."
      "HookRequestH\000\022\027\n\rlog_threshold\030\004 \001(\tH\000\022\031"
      "\n\017entire_topology\030\005 \001(\010H\000\0220\n\010property\030\006 "
      "\001(\0132\034.GstDebugger.PropertyRequestH\000\0222\n\014p"
      "roperty_set\030\007 \001(\0132\032.GstDebugger.Property"
      "ValueH\000\022\032\n\020pad_dynamic_info\030\010 \001(\tH\000B\016\n\014c"
      "ommand_type\"#\n\017DebugCategories\022\020\n\010catego"
      "ry\030\001 \003(\t\"y\n\007LogInfo\022\r\n\005level\030\001 \002(\005\022\020\n\010ca"
      "tegory\030\002 \002(\t\022\014\n\004file\030\003 \002(\t\022\020\n\010function\030\004"
      " \002(\t\022\014\n\004line\030\005 \002(\005\022\016\n\006object\030\006 \002(\t\022\017\n\007me"
      "ssage\030\007 \002(\t\";\n\016EnumFlagsValue\022\014\n\004name\030\001 "
      "\002(\t\022\r\n\005value\030\002 \002(\005\022\014\n\004nick\030\003 \002(\t\"\255\001\n\rEnu"
      "mFlagsType\022\021\n\ttype_name\030\001 \002(\t\0226\n\004kind\030\002 "
      "\002(\0162(.GstDebugger.EnumFlagsType.EnumFlag"
      "sKind\022+\n\006values\030\003 \003(\0132\033.GstDebugger.Enum"
      "FlagsValue\"$\n\rEnumFlagsKind\022\010\n\004ENUM\020\000\022\t\n"
      "\005FLAGS\020\001\")\n\013FactoryMeta\022\013\n\003key\030\001 \002(\t\022\r\n\005"
      "value\030\002 \002(\t\"W\n\013PadTemplate\022\025\n\rname_templ"
      "ate\030\001 \002(\t\022\021\n\tdirection\030\002 \002(\005\022\020\n\010presence"
      "\030\003 \002(\005\022\014\n\004caps\030\004 \002(\t\"t\n\013FactoryType\022\014\n\004n"
      "ame\030\001 \002(\t\022*\n\010metadata\030\002 \003(\0132\030.GstDebugge"
      "r.FactoryMeta\022+\n\ttemplates\030\003 \003(\0132\030.GstDe"
      "bugger.PadTemplate\"N\n\014ElementKlass\022\014\n\004na"
      "me\030\001 \002(\t\0220\n\rproperty_info\030\002 \003(\0132\031.GstDeb"
      "ugger.PropertyInfo\"1\n\014TopologyLink\022\017\n\007sr"
      "c_pad\030\001 \002(\t\022\020\n\010sink_pad\030\002 \002(\t\"X\n\017Topolog"
      "yElement\022\014\n\004path\030\001 \002(\t\022\021\n\ttype_name\030\002 \002("
      "\t\022\016\n\006is_bin\030\003 \002(\010\022\024\n\014factory_name\030\004 \002(\t\""
      "\201\001\n\013TopologyPad\022\014\n\004path\030\001 \002(\t\022\023\n\013is_ghos"
      "tpad\030\002 \002(\010\022\021\n\tdirection\030\003 \002(\005\022\020\n\010presenc"
      "e\030\004 \002(\005\022*\n\010template\030\005 \001(\0132\030.GstDebugger."
      "PadTemplate\"\311\001\n\014TopologyInfo\022#\n\006action\030\001"
      " \002(\0162\023.GstDebugger.Action\022)\n\004link\030\002 \001(\0132"
      "\031.GstDebugger.TopologyLinkH\000\022/\n\007element\030"
      "\003 \001(\0132\034.GstDebugger.TopologyElementH\000\022\'\n"
      "\003pad\030\004 \001(\0132\030.GstDebugger.TopologyPadH\000B\017"
      "\n\rtopology_type\"I\n\016PadDynamicInfo\022\024\n\014all"
      "owed_caps\030\001 \002(\t\022\024\n\014current_caps\030\002 \002(\t\022\013\n"
      "\003pad\030\003 \002(\t\"\247\005\n\rGStreamerData\0228\n\020debug_ca"
      "tegories\030\001 \001(\0132\034.GstDebugger.DebugCatego"
      "riesH\000\022(\n\010log_info\030\002 \001(\0132\024.GstDebugger.L"
      "ogInfoH\000\0225\n\017enum_flags_type\030\003 \001(\0132\032.GstD"
      "ebugger.EnumFlagsTypeH\000\022+\n\007factory\030\004 \001(\013"
      "2\030.GstDebugger.FactoryTypeH\000\0220\n\014message_"
      "info\030\005 \001(\0132\030.GstDebugger.MessageInfoH\000\022,"
      "\n\014confirmation\030\006 \001(\0132\024.GstDebugger.Comma"
      "ndH\000\022,\n\nevent_info\030\007 \001(\0132\026.GstDebugger.E"
      "ventInfoH\000\0222\n\rtopology_info\030\010 \001(\0132\031.GstD"
      "ebugger.TopologyInfoH\000\022,\n\nquery_info\030\t \001"
      "(\0132\026.GstDebugger.QueryInfoH\000\0224\n\016property"
      "_value\030\n \001(\0132\032.GstDebugger.PropertyValue"
      "H\000\0222\n\relement_klass\030\013 \001(\0132\031.GstDebugger."
      "ElementKlassH\000\022.\n\013buffer_info\030\014 \001(\0132\027.Gs"
      "tDebugger.BufferInfoH\000\0227\n\020pad_dynamic_in"
      "fo\030\r \001(\0132\033.GstDebugger.PadDynamicInfoH\000B"
      "\013\n\tinfo_type*\035\n\006Action\022\007\n\003ADD\020\000\022\n\n\006REMOV"
      "E\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3843);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gstdebugger.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gstdebugger_2eproto

const ::google::protobuf::EnumDescriptor* TypeDescriptionRequest_Type_descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_enum_descriptors[0];
}
bool TypeDescriptionRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TypeDescriptionRequest_Type TypeDescriptionRequest::FACTORY;
const TypeDescriptionRequest_Type TypeDescriptionRequest::ENUM_FLAGS;
const TypeDescriptionRequest_Type TypeDescriptionRequest::KLASS;
const TypeDescriptionRequest_Type TypeDescriptionRequest::Type_MIN;
const TypeDescriptionRequest_Type TypeDescriptionRequest::Type_MAX;
const int TypeDescriptionRequest::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnumFlagsType_EnumFlagsKind_descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_enum_descriptors[1];
}
bool EnumFlagsType_EnumFlagsKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnumFlagsType_EnumFlagsKind EnumFlagsType::ENUM;
const EnumFlagsType_EnumFlagsKind EnumFlagsType::FLAGS;
const EnumFlagsType_EnumFlagsKind EnumFlagsType::EnumFlagsKind_MIN;
const EnumFlagsType_EnumFlagsKind EnumFlagsType::EnumFlagsKind_MAX;
const int EnumFlagsType::EnumFlagsKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Action_descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_enum_descriptors[2];
}
bool Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kGtypeFieldNumber;
const int Value::kInternalTypeFieldNumber;
const int Value::kDataFieldNumber;
const int Value::kTypeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type_name()) {
    type_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_name_);
  }
  ::memcpy(&gtype_, &from.gtype_,
    reinterpret_cast<char*>(&internal_type_) -
    reinterpret_cast<char*>(&gtype_) + sizeof(internal_type_));
  // @@protoc_insertion_point(copy_constructor:GstDebugger.Value)
}

void Value::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gtype_, 0, reinterpret_cast<char*>(&internal_type_) -
    reinterpret_cast<char*>(&gtype_) + sizeof(internal_type_));
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:GstDebugger.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[0].descriptor;
}

const Value& Value::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.Value)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (has_type_name()) {
      GOOGLE_DCHECK(!type_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&gtype_, 0, reinterpret_cast<char*>(&internal_type_) -
      reinterpret_cast<char*>(&gtype_) + sizeof(internal_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gtype = 1;
      case 1: {
        if (tag == 8u) {
          set_has_gtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 internal_type = 2;
      case 2: {
        if (tag == 16u) {
          set_has_internal_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &internal_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.Value.type_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.Value)
  // required uint64 gtype = 1;
  if (has_gtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gtype(), output);
  }

  // optional int32 internal_type = 2;
  if (has_internal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->internal_type(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // required string type_name = 4;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.Value.type_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.Value)
  // required uint64 gtype = 1;
  if (has_gtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gtype(), target);
  }

  // optional int32 internal_type = 2;
  if (has_internal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->internal_type(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // required string type_name = 4;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.Value.type_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.Value)
  return target;
}

size_t Value::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.Value)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_type_name()) {
    // required string type_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_name());
  }

  if (has_gtype()) {
    // required uint64 gtype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gtype());
  }

  return total_size;
}
size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.Value)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required string type_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_name());

    // required uint64 gtype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 internal_type = 2;
  if (has_internal_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->internal_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_type_name()) {
      set_has_type_name();
      type_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_name_);
    }
    if (from.has_gtype()) {
      set_gtype(from.gtype());
    }
    if (from.has_internal_type()) {
      set_internal_type(from.internal_type());
    }
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  data_.Swap(&other->data_);
  type_name_.Swap(&other->type_name_);
  std::swap(gtype_, other->gtype_);
  std::swap(internal_type_, other->internal_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// required uint64 gtype = 1;
bool Value::has_gtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Value::set_has_gtype() {
  _has_bits_[0] |= 0x00000004u;
}
void Value::clear_has_gtype() {
  _has_bits_[0] &= ~0x00000004u;
}
void Value::clear_gtype() {
  gtype_ = GOOGLE_ULONGLONG(0);
  clear_has_gtype();
}
::google::protobuf::uint64 Value::gtype() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Value.gtype)
  return gtype_;
}
void Value::set_gtype(::google::protobuf::uint64 value) {
  set_has_gtype();
  gtype_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.Value.gtype)
}

// optional int32 internal_type = 2;
bool Value::has_internal_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Value::set_has_internal_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Value::clear_has_internal_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Value::clear_internal_type() {
  internal_type_ = 0;
  clear_has_internal_type();
}
::google::protobuf::int32 Value::internal_type() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Value.internal_type)
  return internal_type_;
}
void Value::set_internal_type(::google::protobuf::int32 value) {
  set_has_internal_type();
  internal_type_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.Value.internal_type)
}

// required bytes data = 3;
bool Value::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Value::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Value::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Value::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Value::data() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Value.data)
  return data_.GetNoArena();
}
void Value::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.Value.data)
}
#if LANG_CXX11
void Value::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.Value.data)
}
#endif
void Value::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.Value.data)
}
void Value::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.Value.data)
}
::std::string* Value::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:GstDebugger.Value.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Value::release_data() {
  // @@protoc_insertion_point(field_release:GstDebugger.Value.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Value::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.Value.data)
}

// required string type_name = 4;
bool Value::has_type_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Value::set_has_type_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Value::clear_has_type_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Value::clear_type_name() {
  type_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type_name();
}
const ::std::string& Value::type_name() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Value.type_name)
  return type_name_.GetNoArena();
}
void Value::set_type_name(const ::std::string& value) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.Value.type_name)
}
#if LANG_CXX11
void Value::set_type_name(::std::string&& value) {
  set_has_type_name();
  type_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.Value.type_name)
}
#endif
void Value::set_type_name(const char* value) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.Value.type_name)
}
void Value::set_type_name(const char* value, size_t size) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.Value.type_name)
}
::std::string* Value::mutable_type_name() {
  set_has_type_name();
  // @@protoc_insertion_point(field_mutable:GstDebugger.Value.type_name)
  return type_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Value::release_type_name() {
  // @@protoc_insertion_point(field_release:GstDebugger.Value.type_name)
  clear_has_type_name();
  return type_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Value::set_allocated_type_name(::std::string* type_name) {
  if (type_name != NULL) {
    set_has_type_name();
  } else {
    clear_has_type_name();
  }
  type_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_name);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.Value.type_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyInfo::kNameFieldNumber;
const int PropertyInfo::kNickFieldNumber;
const int PropertyInfo::kBlurbFieldNumber;
const int PropertyInfo::kFlagsFieldNumber;
const int PropertyInfo::kDefaultValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyInfo::PropertyInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.PropertyInfo)
}
PropertyInfo::PropertyInfo(const PropertyInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  blurb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_blurb()) {
    blurb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blurb_);
  }
  if (from.has_default_value()) {
    default_value_ = new ::GstDebugger::Value(*from.default_value_);
  } else {
    default_value_ = NULL;
  }
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:GstDebugger.PropertyInfo)
}

void PropertyInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blurb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&default_value_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&default_value_) + sizeof(flags_));
}

PropertyInfo::~PropertyInfo() {
  // @@protoc_insertion_point(destructor:GstDebugger.PropertyInfo)
  SharedDtor();
}

void PropertyInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blurb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete default_value_;
  }
}

void PropertyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyInfo::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[1].descriptor;
}

const PropertyInfo& PropertyInfo::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropertyInfo* PropertyInfo::New(::google::protobuf::Arena* arena) const {
  PropertyInfo* n = new PropertyInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.PropertyInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_nick()) {
      GOOGLE_DCHECK(!nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_blurb()) {
      GOOGLE_DCHECK(!blurb_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*blurb_.UnsafeRawStringPointer())->clear();
    }
    if (has_default_value()) {
      GOOGLE_DCHECK(default_value_ != NULL);
      default_value_->::GstDebugger::Value::Clear();
    }
  }
  flags_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PropertyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.PropertyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PropertyInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string nick = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PropertyInfo.nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string blurb = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blurb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blurb().data(), this->blurb().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PropertyInfo.blurb");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 flags = 4;
      case 4: {
        if (tag == 32u) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GstDebugger.Value default_value = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.PropertyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.PropertyInfo)
  return false;
#undef DO_
}

void PropertyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.PropertyInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyInfo.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick(), output);
  }

  // required string blurb = 3;
  if (has_blurb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blurb().data(), this->blurb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyInfo.blurb");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->blurb(), output);
  }

  // required int32 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flags(), output);
  }

  // required .GstDebugger.Value default_value = 5;
  if (has_default_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->default_value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.PropertyInfo)
}

::google::protobuf::uint8* PropertyInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.PropertyInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyInfo.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }

  // required string blurb = 3;
  if (has_blurb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blurb().data(), this->blurb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyInfo.blurb");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->blurb(), target);
  }

  // required int32 flags = 4;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flags(), target);
  }

  // required .GstDebugger.Value default_value = 5;
  if (has_default_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->default_value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.PropertyInfo)
  return target;
}

size_t PropertyInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.PropertyInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_nick()) {
    // required string nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  if (has_blurb()) {
    // required string blurb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blurb());
  }

  if (has_default_value()) {
    // required .GstDebugger.Value default_value = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->default_value_);
  }

  if (has_flags()) {
    // required int32 flags = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flags());
  }

  return total_size;
}
size_t PropertyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.PropertyInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string nick = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());

    // required string blurb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blurb());

    // required .GstDebugger.Value default_value = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->default_value_);

    // required int32 flags = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flags());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.PropertyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.PropertyInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.PropertyInfo)
    MergeFrom(*source);
  }
}

void PropertyInfo::MergeFrom(const PropertyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.PropertyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_nick()) {
      set_has_nick();
      nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
    }
    if (from.has_blurb()) {
      set_has_blurb();
      blurb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blurb_);
    }
    if (from.has_default_value()) {
      mutable_default_value()->::GstDebugger::Value::MergeFrom(from.default_value());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
}

void PropertyInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.PropertyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyInfo::CopyFrom(const PropertyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.PropertyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_default_value()) {
    if (!this->default_value_->IsInitialized()) return false;
  }
  return true;
}

void PropertyInfo::Swap(PropertyInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyInfo::InternalSwap(PropertyInfo* other) {
  name_.Swap(&other->name_);
  nick_.Swap(&other->nick_);
  blurb_.Swap(&other->blurb_);
  std::swap(default_value_, other->default_value_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyInfo::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyInfo

// required string name = 1;
bool PropertyInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PropertyInfo::name() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PropertyInfo.name)
  return name_.GetNoArena();
}
void PropertyInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PropertyInfo.name)
}
#if LANG_CXX11
void PropertyInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PropertyInfo.name)
}
#endif
void PropertyInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PropertyInfo.name)
}
void PropertyInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PropertyInfo.name)
}
::std::string* PropertyInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PropertyInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyInfo::release_name() {
  // @@protoc_insertion_point(field_release:GstDebugger.PropertyInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PropertyInfo.name)
}

// required string nick = 2;
bool PropertyInfo::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyInfo::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyInfo::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyInfo::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick();
}
const ::std::string& PropertyInfo::nick() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PropertyInfo.nick)
  return nick_.GetNoArena();
}
void PropertyInfo::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PropertyInfo.nick)
}
#if LANG_CXX11
void PropertyInfo::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PropertyInfo.nick)
}
#endif
void PropertyInfo::set_nick(const char* value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PropertyInfo.nick)
}
void PropertyInfo::set_nick(const char* value, size_t size) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PropertyInfo.nick)
}
::std::string* PropertyInfo::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PropertyInfo.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyInfo::release_nick() {
  // @@protoc_insertion_point(field_release:GstDebugger.PropertyInfo.nick)
  clear_has_nick();
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyInfo::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PropertyInfo.nick)
}

// required string blurb = 3;
bool PropertyInfo::has_blurb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PropertyInfo::set_has_blurb() {
  _has_bits_[0] |= 0x00000004u;
}
void PropertyInfo::clear_has_blurb() {
  _has_bits_[0] &= ~0x00000004u;
}
void PropertyInfo::clear_blurb() {
  blurb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_blurb();
}
const ::std::string& PropertyInfo::blurb() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PropertyInfo.blurb)
  return blurb_.GetNoArena();
}
void PropertyInfo::set_blurb(const ::std::string& value) {
  set_has_blurb();
  blurb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PropertyInfo.blurb)
}
#if LANG_CXX11
void PropertyInfo::set_blurb(::std::string&& value) {
  set_has_blurb();
  blurb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PropertyInfo.blurb)
}
#endif
void PropertyInfo::set_blurb(const char* value) {
  set_has_blurb();
  blurb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PropertyInfo.blurb)
}
void PropertyInfo::set_blurb(const char* value, size_t size) {
  set_has_blurb();
  blurb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PropertyInfo.blurb)
}
::std::string* PropertyInfo::mutable_blurb() {
  set_has_blurb();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PropertyInfo.blurb)
  return blurb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyInfo::release_blurb() {
  // @@protoc_insertion_point(field_release:GstDebugger.PropertyInfo.blurb)
  clear_has_blurb();
  return blurb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyInfo::set_allocated_blurb(::std::string* blurb) {
  if (blurb != NULL) {
    set_has_blurb();
  } else {
    clear_has_blurb();
  }
  blurb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blurb);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PropertyInfo.blurb)
}

// required int32 flags = 4;
bool PropertyInfo::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PropertyInfo::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void PropertyInfo::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void PropertyInfo::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
::google::protobuf::int32 PropertyInfo::flags() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PropertyInfo.flags)
  return flags_;
}
void PropertyInfo::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.PropertyInfo.flags)
}

// required .GstDebugger.Value default_value = 5;
bool PropertyInfo::has_default_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PropertyInfo::set_has_default_value() {
  _has_bits_[0] |= 0x00000008u;
}
void PropertyInfo::clear_has_default_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void PropertyInfo::clear_default_value() {
  if (default_value_ != NULL) default_value_->::GstDebugger::Value::Clear();
  clear_has_default_value();
}
const ::GstDebugger::Value& PropertyInfo::default_value() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PropertyInfo.default_value)
  return default_value_ != NULL ? *default_value_
                         : *::GstDebugger::Value::internal_default_instance();
}
::GstDebugger::Value* PropertyInfo::mutable_default_value() {
  set_has_default_value();
  if (default_value_ == NULL) {
    default_value_ = new ::GstDebugger::Value;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.PropertyInfo.default_value)
  return default_value_;
}
::GstDebugger::Value* PropertyInfo::release_default_value() {
  // @@protoc_insertion_point(field_release:GstDebugger.PropertyInfo.default_value)
  clear_has_default_value();
  ::GstDebugger::Value* temp = default_value_;
  default_value_ = NULL;
  return temp;
}
void PropertyInfo::set_allocated_default_value(::GstDebugger::Value* default_value) {
  delete default_value_;
  default_value_ = default_value;
  if (default_value) {
    set_has_default_value();
  } else {
    clear_has_default_value();
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PropertyInfo.default_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyValue::kNameFieldNumber;
const int PropertyValue::kObjectFieldNumber;
const int PropertyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyValue::PropertyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.PropertyValue)
}
PropertyValue::PropertyValue(const PropertyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object()) {
    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
  if (from.has_value()) {
    value_ = new ::GstDebugger::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.PropertyValue)
}

void PropertyValue::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

PropertyValue::~PropertyValue() {
  // @@protoc_insertion_point(destructor:GstDebugger.PropertyValue)
  SharedDtor();
}

void PropertyValue::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void PropertyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyValue::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[2].descriptor;
}

const PropertyValue& PropertyValue::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropertyValue* PropertyValue::New(::google::protobuf::Arena* arena) const {
  PropertyValue* n = new PropertyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.PropertyValue)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_object()) {
      GOOGLE_DCHECK(!object_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*object_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->::GstDebugger::Value::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PropertyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.PropertyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PropertyValue.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string object = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->object().data(), this->object().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PropertyValue.object");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GstDebugger.Value value = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.PropertyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.PropertyValue)
  return false;
#undef DO_
}

void PropertyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.PropertyValue)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyValue.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyValue.object");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object(), output);
  }

  // required .GstDebugger.Value value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.PropertyValue)
}

::google::protobuf::uint8* PropertyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.PropertyValue)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyValue.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyValue.object");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object(), target);
  }

  // required .GstDebugger.Value value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->value_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.PropertyValue)
  return target;
}

size_t PropertyValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.PropertyValue)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_object()) {
    // required string object = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object());
  }

  if (has_value()) {
    // required .GstDebugger.Value value = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  return total_size;
}
size_t PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.PropertyValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string object = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object());

    // required .GstDebugger.Value value = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.PropertyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.PropertyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.PropertyValue)
    MergeFrom(*source);
  }
}

void PropertyValue::MergeFrom(const PropertyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.PropertyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_object()) {
      set_has_object();
      object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
    }
    if (from.has_value()) {
      mutable_value()->::GstDebugger::Value::MergeFrom(from.value());
    }
  }
}

void PropertyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyValue::CopyFrom(const PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void PropertyValue::Swap(PropertyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyValue::InternalSwap(PropertyValue* other) {
  name_.Swap(&other->name_);
  object_.Swap(&other->object_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyValue::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyValue

// required string name = 1;
bool PropertyValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyValue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PropertyValue::name() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PropertyValue.name)
  return name_.GetNoArena();
}
void PropertyValue::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PropertyValue.name)
}
#if LANG_CXX11
void PropertyValue::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PropertyValue.name)
}
#endif
void PropertyValue::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PropertyValue.name)
}
void PropertyValue::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PropertyValue.name)
}
::std::string* PropertyValue::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PropertyValue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyValue::release_name() {
  // @@protoc_insertion_point(field_release:GstDebugger.PropertyValue.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PropertyValue.name)
}

// required string object = 2;
bool PropertyValue::has_object() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyValue::set_has_object() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyValue::clear_has_object() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyValue::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object();
}
const ::std::string& PropertyValue::object() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PropertyValue.object)
  return object_.GetNoArena();
}
void PropertyValue::set_object(const ::std::string& value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PropertyValue.object)
}
#if LANG_CXX11
void PropertyValue::set_object(::std::string&& value) {
  set_has_object();
  object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PropertyValue.object)
}
#endif
void PropertyValue::set_object(const char* value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PropertyValue.object)
}
void PropertyValue::set_object(const char* value, size_t size) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PropertyValue.object)
}
::std::string* PropertyValue::mutable_object() {
  set_has_object();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PropertyValue.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyValue::release_object() {
  // @@protoc_insertion_point(field_release:GstDebugger.PropertyValue.object)
  clear_has_object();
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyValue::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    set_has_object();
  } else {
    clear_has_object();
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PropertyValue.object)
}

// required .GstDebugger.Value value = 3;
bool PropertyValue::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PropertyValue::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void PropertyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void PropertyValue::clear_value() {
  if (value_ != NULL) value_->::GstDebugger::Value::Clear();
  clear_has_value();
}
const ::GstDebugger::Value& PropertyValue::value() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PropertyValue.value)
  return value_ != NULL ? *value_
                         : *::GstDebugger::Value::internal_default_instance();
}
::GstDebugger::Value* PropertyValue::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::GstDebugger::Value;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.PropertyValue.value)
  return value_;
}
::GstDebugger::Value* PropertyValue::release_value() {
  // @@protoc_insertion_point(field_release:GstDebugger.PropertyValue.value)
  clear_has_value();
  ::GstDebugger::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void PropertyValue::set_allocated_value(::GstDebugger::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PropertyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyRequest::kNameFieldNumber;
const int PropertyRequest::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyRequest::PropertyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.PropertyRequest)
}
PropertyRequest::PropertyRequest(const PropertyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object()) {
    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.PropertyRequest)
}

void PropertyRequest::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PropertyRequest::~PropertyRequest() {
  // @@protoc_insertion_point(destructor:GstDebugger.PropertyRequest)
  SharedDtor();
}

void PropertyRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PropertyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyRequest::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[3].descriptor;
}

const PropertyRequest& PropertyRequest::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropertyRequest* PropertyRequest::New(::google::protobuf::Arena* arena) const {
  PropertyRequest* n = new PropertyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.PropertyRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_object()) {
      GOOGLE_DCHECK(!object_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*object_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PropertyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.PropertyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PropertyRequest.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string object = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->object().data(), this->object().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PropertyRequest.object");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.PropertyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.PropertyRequest)
  return false;
#undef DO_
}

void PropertyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.PropertyRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyRequest.object");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.PropertyRequest)
}

::google::protobuf::uint8* PropertyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.PropertyRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PropertyRequest.object");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.PropertyRequest)
  return target;
}

size_t PropertyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.PropertyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string object = 2;
  if (has_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.PropertyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.PropertyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.PropertyRequest)
    MergeFrom(*source);
  }
}

void PropertyRequest::MergeFrom(const PropertyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.PropertyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_object()) {
      set_has_object();
      object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
    }
  }
}

void PropertyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.PropertyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyRequest::CopyFrom(const PropertyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.PropertyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void PropertyRequest::Swap(PropertyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyRequest::InternalSwap(PropertyRequest* other) {
  name_.Swap(&other->name_);
  object_.Swap(&other->object_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyRequest::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyRequest

// optional string name = 1;
bool PropertyRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PropertyRequest::name() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PropertyRequest.name)
  return name_.GetNoArena();
}
void PropertyRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PropertyRequest.name)
}
#if LANG_CXX11
void PropertyRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PropertyRequest.name)
}
#endif
void PropertyRequest::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PropertyRequest.name)
}
void PropertyRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PropertyRequest.name)
}
::std::string* PropertyRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PropertyRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyRequest::release_name() {
  // @@protoc_insertion_point(field_release:GstDebugger.PropertyRequest.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PropertyRequest.name)
}

// required string object = 2;
bool PropertyRequest::has_object() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyRequest::set_has_object() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyRequest::clear_has_object() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyRequest::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object();
}
const ::std::string& PropertyRequest::object() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PropertyRequest.object)
  return object_.GetNoArena();
}
void PropertyRequest::set_object(const ::std::string& value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PropertyRequest.object)
}
#if LANG_CXX11
void PropertyRequest::set_object(::std::string&& value) {
  set_has_object();
  object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PropertyRequest.object)
}
#endif
void PropertyRequest::set_object(const char* value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PropertyRequest.object)
}
void PropertyRequest::set_object(const char* value, size_t size) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PropertyRequest.object)
}
::std::string* PropertyRequest::mutable_object() {
  set_has_object();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PropertyRequest.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyRequest::release_object() {
  // @@protoc_insertion_point(field_release:GstDebugger.PropertyRequest.object)
  clear_has_object();
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyRequest::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    set_has_object();
  } else {
    clear_has_object();
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PropertyRequest.object)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageInfo::kTypeFieldNumber;
const int MessageInfo::kTimestampFieldNumber;
const int MessageInfo::kSourceFieldNumber;
const int MessageInfo::kSeqnumFieldNumber;
const int MessageInfo::kStructureDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageInfo::MessageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.MessageInfo)
}
MessageInfo::MessageInfo(const MessageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  structure_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_structure_data()) {
    structure_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.structure_data_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:GstDebugger.MessageInfo)
}

void MessageInfo::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  structure_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(seqnum_));
}

MessageInfo::~MessageInfo() {
  // @@protoc_insertion_point(destructor:GstDebugger.MessageInfo)
  SharedDtor();
}

void MessageInfo::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  structure_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageInfo::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[4].descriptor;
}

const MessageInfo& MessageInfo::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

MessageInfo* MessageInfo::New(::google::protobuf::Arena* arena) const {
  MessageInfo* n = new MessageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.MessageInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_structure_data()) {
      GOOGLE_DCHECK(!structure_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*structure_data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.MessageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timestamp = 2;
      case 2: {
        if (tag == 16u) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string source = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.MessageInfo.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 seqnum = 4;
      case 4: {
        if (tag == 32u) {
          set_has_seqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes structure_data = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_structure_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.MessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.MessageInfo)
  return false;
#undef DO_
}

void MessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.MessageInfo)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // required string source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.MessageInfo.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source(), output);
  }

  // required uint32 seqnum = 4;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seqnum(), output);
  }

  // required bytes structure_data = 5;
  if (has_structure_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->structure_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.MessageInfo)
}

::google::protobuf::uint8* MessageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.MessageInfo)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // required string source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.MessageInfo.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source(), target);
  }

  // required uint32 seqnum = 4;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seqnum(), target);
  }

  // required bytes structure_data = 5;
  if (has_structure_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->structure_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.MessageInfo)
  return target;
}

size_t MessageInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.MessageInfo)
  size_t total_size = 0;

  if (has_source()) {
    // required string source = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  if (has_structure_data()) {
    // required bytes structure_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->structure_data());
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_seqnum()) {
    // required uint32 seqnum = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seqnum());
  }

  return total_size;
}
size_t MessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.MessageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string source = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());

    // required bytes structure_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->structure_data());

    // required uint64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required uint32 seqnum = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.MessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.MessageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.MessageInfo)
    MergeFrom(*source);
  }
}

void MessageInfo::MergeFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.MessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_structure_data()) {
      set_has_structure_data();
      structure_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.structure_data_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
  }
}

void MessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageInfo::CopyFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void MessageInfo::Swap(MessageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageInfo::InternalSwap(MessageInfo* other) {
  source_.Swap(&other->source_);
  structure_data_.Swap(&other->structure_data_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(type_, other->type_);
  std::swap(seqnum_, other->seqnum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageInfo::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageInfo

// required int32 type = 1;
bool MessageInfo::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MessageInfo::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void MessageInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void MessageInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 MessageInfo::type() const {
  // @@protoc_insertion_point(field_get:GstDebugger.MessageInfo.type)
  return type_;
}
void MessageInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.MessageInfo.type)
}

// required uint64 timestamp = 2;
bool MessageInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MessageInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void MessageInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void MessageInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 MessageInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:GstDebugger.MessageInfo.timestamp)
  return timestamp_;
}
void MessageInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.MessageInfo.timestamp)
}

// required string source = 3;
bool MessageInfo::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageInfo::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageInfo::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageInfo::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& MessageInfo::source() const {
  // @@protoc_insertion_point(field_get:GstDebugger.MessageInfo.source)
  return source_.GetNoArena();
}
void MessageInfo::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.MessageInfo.source)
}
#if LANG_CXX11
void MessageInfo::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.MessageInfo.source)
}
#endif
void MessageInfo::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.MessageInfo.source)
}
void MessageInfo::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.MessageInfo.source)
}
::std::string* MessageInfo::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:GstDebugger.MessageInfo.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageInfo::release_source() {
  // @@protoc_insertion_point(field_release:GstDebugger.MessageInfo.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageInfo::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.MessageInfo.source)
}

// required uint32 seqnum = 4;
bool MessageInfo::has_seqnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MessageInfo::set_has_seqnum() {
  _has_bits_[0] |= 0x00000010u;
}
void MessageInfo::clear_has_seqnum() {
  _has_bits_[0] &= ~0x00000010u;
}
void MessageInfo::clear_seqnum() {
  seqnum_ = 0u;
  clear_has_seqnum();
}
::google::protobuf::uint32 MessageInfo::seqnum() const {
  // @@protoc_insertion_point(field_get:GstDebugger.MessageInfo.seqnum)
  return seqnum_;
}
void MessageInfo::set_seqnum(::google::protobuf::uint32 value) {
  set_has_seqnum();
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.MessageInfo.seqnum)
}

// required bytes structure_data = 5;
bool MessageInfo::has_structure_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageInfo::set_has_structure_data() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageInfo::clear_has_structure_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageInfo::clear_structure_data() {
  structure_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_structure_data();
}
const ::std::string& MessageInfo::structure_data() const {
  // @@protoc_insertion_point(field_get:GstDebugger.MessageInfo.structure_data)
  return structure_data_.GetNoArena();
}
void MessageInfo::set_structure_data(const ::std::string& value) {
  set_has_structure_data();
  structure_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.MessageInfo.structure_data)
}
#if LANG_CXX11
void MessageInfo::set_structure_data(::std::string&& value) {
  set_has_structure_data();
  structure_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.MessageInfo.structure_data)
}
#endif
void MessageInfo::set_structure_data(const char* value) {
  set_has_structure_data();
  structure_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.MessageInfo.structure_data)
}
void MessageInfo::set_structure_data(const void* value, size_t size) {
  set_has_structure_data();
  structure_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.MessageInfo.structure_data)
}
::std::string* MessageInfo::mutable_structure_data() {
  set_has_structure_data();
  // @@protoc_insertion_point(field_mutable:GstDebugger.MessageInfo.structure_data)
  return structure_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageInfo::release_structure_data() {
  // @@protoc_insertion_point(field_release:GstDebugger.MessageInfo.structure_data)
  clear_has_structure_data();
  return structure_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageInfo::set_allocated_structure_data(::std::string* structure_data) {
  if (structure_data != NULL) {
    set_has_structure_data();
  } else {
    clear_has_structure_data();
  }
  structure_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), structure_data);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.MessageInfo.structure_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventInfo::kTypeFieldNumber;
const int EventInfo::kTimestampFieldNumber;
const int EventInfo::kSeqnumFieldNumber;
const int EventInfo::kPadFieldNumber;
const int EventInfo::kStructureDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventInfo::EventInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.EventInfo)
}
EventInfo::EventInfo(const EventInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pad()) {
    pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
  }
  structure_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_structure_data()) {
    structure_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.structure_data_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:GstDebugger.EventInfo)
}

void EventInfo::SharedCtor() {
  _cached_size_ = 0;
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  structure_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(seqnum_));
}

EventInfo::~EventInfo() {
  // @@protoc_insertion_point(destructor:GstDebugger.EventInfo)
  SharedDtor();
}

void EventInfo::SharedDtor() {
  pad_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  structure_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventInfo::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[5].descriptor;
}

const EventInfo& EventInfo::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventInfo* EventInfo::New(::google::protobuf::Arena* arena) const {
  EventInfo* n = new EventInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.EventInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pad()) {
      GOOGLE_DCHECK(!pad_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pad_.UnsafeRawStringPointer())->clear();
    }
    if (has_structure_data()) {
      GOOGLE_DCHECK(!structure_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*structure_data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&seqnum_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.EventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timestamp = 2;
      case 2: {
        if (tag == 16u) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 seqnum = 3;
      case 3: {
        if (tag == 24u) {
          set_has_seqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pad = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pad()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pad().data(), this->pad().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.EventInfo.pad");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes structure_data = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_structure_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.EventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.EventInfo)
  return false;
#undef DO_
}

void EventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.EventInfo)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required uint64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // required uint32 seqnum = 3;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seqnum(), output);
  }

  // required string pad = 4;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pad().data(), this->pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.EventInfo.pad");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pad(), output);
  }

  // required bytes structure_data = 5;
  if (has_structure_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->structure_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.EventInfo)
}

::google::protobuf::uint8* EventInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.EventInfo)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required uint64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // required uint32 seqnum = 3;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seqnum(), target);
  }

  // required string pad = 4;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pad().data(), this->pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.EventInfo.pad");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pad(), target);
  }

  // required bytes structure_data = 5;
  if (has_structure_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->structure_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.EventInfo)
  return target;
}

size_t EventInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.EventInfo)
  size_t total_size = 0;

  if (has_pad()) {
    // required string pad = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pad());
  }

  if (has_structure_data()) {
    // required bytes structure_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->structure_data());
  }

  if (has_timestamp()) {
    // required uint64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_seqnum()) {
    // required uint32 seqnum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seqnum());
  }

  return total_size;
}
size_t EventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.EventInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string pad = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pad());

    // required bytes structure_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->structure_data());

    // required uint64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required uint32 seqnum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.EventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EventInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.EventInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.EventInfo)
    MergeFrom(*source);
  }
}

void EventInfo::MergeFrom(const EventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.EventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_pad()) {
      set_has_pad();
      pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
    }
    if (from.has_structure_data()) {
      set_has_structure_data();
      structure_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.structure_data_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
  }
}

void EventInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.EventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventInfo::CopyFrom(const EventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.EventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void EventInfo::Swap(EventInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventInfo::InternalSwap(EventInfo* other) {
  pad_.Swap(&other->pad_);
  structure_data_.Swap(&other->structure_data_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(type_, other->type_);
  std::swap(seqnum_, other->seqnum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventInfo::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventInfo

// required int32 type = 1;
bool EventInfo::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EventInfo::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void EventInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void EventInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 EventInfo::type() const {
  // @@protoc_insertion_point(field_get:GstDebugger.EventInfo.type)
  return type_;
}
void EventInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.EventInfo.type)
}

// required uint64 timestamp = 2;
bool EventInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EventInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void EventInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void EventInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 EventInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:GstDebugger.EventInfo.timestamp)
  return timestamp_;
}
void EventInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.EventInfo.timestamp)
}

// required uint32 seqnum = 3;
bool EventInfo::has_seqnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EventInfo::set_has_seqnum() {
  _has_bits_[0] |= 0x00000010u;
}
void EventInfo::clear_has_seqnum() {
  _has_bits_[0] &= ~0x00000010u;
}
void EventInfo::clear_seqnum() {
  seqnum_ = 0u;
  clear_has_seqnum();
}
::google::protobuf::uint32 EventInfo::seqnum() const {
  // @@protoc_insertion_point(field_get:GstDebugger.EventInfo.seqnum)
  return seqnum_;
}
void EventInfo::set_seqnum(::google::protobuf::uint32 value) {
  set_has_seqnum();
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.EventInfo.seqnum)
}

// required string pad = 4;
bool EventInfo::has_pad() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EventInfo::set_has_pad() {
  _has_bits_[0] |= 0x00000001u;
}
void EventInfo::clear_has_pad() {
  _has_bits_[0] &= ~0x00000001u;
}
void EventInfo::clear_pad() {
  pad_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pad();
}
const ::std::string& EventInfo::pad() const {
  // @@protoc_insertion_point(field_get:GstDebugger.EventInfo.pad)
  return pad_.GetNoArena();
}
void EventInfo::set_pad(const ::std::string& value) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.EventInfo.pad)
}
#if LANG_CXX11
void EventInfo::set_pad(::std::string&& value) {
  set_has_pad();
  pad_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.EventInfo.pad)
}
#endif
void EventInfo::set_pad(const char* value) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.EventInfo.pad)
}
void EventInfo::set_pad(const char* value, size_t size) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.EventInfo.pad)
}
::std::string* EventInfo::mutable_pad() {
  set_has_pad();
  // @@protoc_insertion_point(field_mutable:GstDebugger.EventInfo.pad)
  return pad_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventInfo::release_pad() {
  // @@protoc_insertion_point(field_release:GstDebugger.EventInfo.pad)
  clear_has_pad();
  return pad_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventInfo::set_allocated_pad(::std::string* pad) {
  if (pad != NULL) {
    set_has_pad();
  } else {
    clear_has_pad();
  }
  pad_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pad);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.EventInfo.pad)
}

// required bytes structure_data = 5;
bool EventInfo::has_structure_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EventInfo::set_has_structure_data() {
  _has_bits_[0] |= 0x00000002u;
}
void EventInfo::clear_has_structure_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void EventInfo::clear_structure_data() {
  structure_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_structure_data();
}
const ::std::string& EventInfo::structure_data() const {
  // @@protoc_insertion_point(field_get:GstDebugger.EventInfo.structure_data)
  return structure_data_.GetNoArena();
}
void EventInfo::set_structure_data(const ::std::string& value) {
  set_has_structure_data();
  structure_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.EventInfo.structure_data)
}
#if LANG_CXX11
void EventInfo::set_structure_data(::std::string&& value) {
  set_has_structure_data();
  structure_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.EventInfo.structure_data)
}
#endif
void EventInfo::set_structure_data(const char* value) {
  set_has_structure_data();
  structure_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.EventInfo.structure_data)
}
void EventInfo::set_structure_data(const void* value, size_t size) {
  set_has_structure_data();
  structure_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.EventInfo.structure_data)
}
::std::string* EventInfo::mutable_structure_data() {
  set_has_structure_data();
  // @@protoc_insertion_point(field_mutable:GstDebugger.EventInfo.structure_data)
  return structure_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventInfo::release_structure_data() {
  // @@protoc_insertion_point(field_release:GstDebugger.EventInfo.structure_data)
  clear_has_structure_data();
  return structure_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventInfo::set_allocated_structure_data(::std::string* structure_data) {
  if (structure_data != NULL) {
    set_has_structure_data();
  } else {
    clear_has_structure_data();
  }
  structure_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), structure_data);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.EventInfo.structure_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryInfo::kTypeFieldNumber;
const int QueryInfo::kPadFieldNumber;
const int QueryInfo::kStructureDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryInfo::QueryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.QueryInfo)
}
QueryInfo::QueryInfo(const QueryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pad()) {
    pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
  }
  structure_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_structure_data()) {
    structure_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.structure_data_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:GstDebugger.QueryInfo)
}

void QueryInfo::SharedCtor() {
  _cached_size_ = 0;
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  structure_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

QueryInfo::~QueryInfo() {
  // @@protoc_insertion_point(destructor:GstDebugger.QueryInfo)
  SharedDtor();
}

void QueryInfo::SharedDtor() {
  pad_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  structure_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryInfo::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[6].descriptor;
}

const QueryInfo& QueryInfo::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryInfo* QueryInfo::New(::google::protobuf::Arena* arena) const {
  QueryInfo* n = new QueryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.QueryInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pad()) {
      GOOGLE_DCHECK(!pad_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pad_.UnsafeRawStringPointer())->clear();
    }
    if (has_structure_data()) {
      GOOGLE_DCHECK(!structure_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*structure_data_.UnsafeRawStringPointer())->clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.QueryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pad = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pad()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pad().data(), this->pad().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.QueryInfo.pad");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes structure_data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_structure_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.QueryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.QueryInfo)
  return false;
#undef DO_
}

void QueryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.QueryInfo)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string pad = 2;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pad().data(), this->pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.QueryInfo.pad");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pad(), output);
  }

  // required bytes structure_data = 3;
  if (has_structure_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->structure_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.QueryInfo)
}

::google::protobuf::uint8* QueryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.QueryInfo)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string pad = 2;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pad().data(), this->pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.QueryInfo.pad");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pad(), target);
  }

  // required bytes structure_data = 3;
  if (has_structure_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->structure_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.QueryInfo)
  return target;
}

size_t QueryInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.QueryInfo)
  size_t total_size = 0;

  if (has_pad()) {
    // required string pad = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pad());
  }

  if (has_structure_data()) {
    // required bytes structure_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->structure_data());
  }

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t QueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.QueryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string pad = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pad());

    // required bytes structure_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->structure_data());

    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.QueryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.QueryInfo)
    MergeFrom(*source);
  }
}

void QueryInfo::MergeFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_pad()) {
      set_has_pad();
      pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
    }
    if (from.has_structure_data()) {
      set_has_structure_data();
      structure_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.structure_data_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void QueryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryInfo::CopyFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void QueryInfo::Swap(QueryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryInfo::InternalSwap(QueryInfo* other) {
  pad_.Swap(&other->pad_);
  structure_data_.Swap(&other->structure_data_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryInfo::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryInfo

// required int32 type = 1;
bool QueryInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 QueryInfo::type() const {
  // @@protoc_insertion_point(field_get:GstDebugger.QueryInfo.type)
  return type_;
}
void QueryInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.QueryInfo.type)
}

// required string pad = 2;
bool QueryInfo::has_pad() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryInfo::set_has_pad() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryInfo::clear_has_pad() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryInfo::clear_pad() {
  pad_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pad();
}
const ::std::string& QueryInfo::pad() const {
  // @@protoc_insertion_point(field_get:GstDebugger.QueryInfo.pad)
  return pad_.GetNoArena();
}
void QueryInfo::set_pad(const ::std::string& value) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.QueryInfo.pad)
}
#if LANG_CXX11
void QueryInfo::set_pad(::std::string&& value) {
  set_has_pad();
  pad_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.QueryInfo.pad)
}
#endif
void QueryInfo::set_pad(const char* value) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.QueryInfo.pad)
}
void QueryInfo::set_pad(const char* value, size_t size) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.QueryInfo.pad)
}
::std::string* QueryInfo::mutable_pad() {
  set_has_pad();
  // @@protoc_insertion_point(field_mutable:GstDebugger.QueryInfo.pad)
  return pad_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryInfo::release_pad() {
  // @@protoc_insertion_point(field_release:GstDebugger.QueryInfo.pad)
  clear_has_pad();
  return pad_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryInfo::set_allocated_pad(::std::string* pad) {
  if (pad != NULL) {
    set_has_pad();
  } else {
    clear_has_pad();
  }
  pad_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pad);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.QueryInfo.pad)
}

// required bytes structure_data = 3;
bool QueryInfo::has_structure_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryInfo::set_has_structure_data() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryInfo::clear_has_structure_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryInfo::clear_structure_data() {
  structure_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_structure_data();
}
const ::std::string& QueryInfo::structure_data() const {
  // @@protoc_insertion_point(field_get:GstDebugger.QueryInfo.structure_data)
  return structure_data_.GetNoArena();
}
void QueryInfo::set_structure_data(const ::std::string& value) {
  set_has_structure_data();
  structure_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.QueryInfo.structure_data)
}
#if LANG_CXX11
void QueryInfo::set_structure_data(::std::string&& value) {
  set_has_structure_data();
  structure_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.QueryInfo.structure_data)
}
#endif
void QueryInfo::set_structure_data(const char* value) {
  set_has_structure_data();
  structure_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.QueryInfo.structure_data)
}
void QueryInfo::set_structure_data(const void* value, size_t size) {
  set_has_structure_data();
  structure_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.QueryInfo.structure_data)
}
::std::string* QueryInfo::mutable_structure_data() {
  set_has_structure_data();
  // @@protoc_insertion_point(field_mutable:GstDebugger.QueryInfo.structure_data)
  return structure_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryInfo::release_structure_data() {
  // @@protoc_insertion_point(field_release:GstDebugger.QueryInfo.structure_data)
  clear_has_structure_data();
  return structure_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryInfo::set_allocated_structure_data(::std::string* structure_data) {
  if (structure_data != NULL) {
    set_has_structure_data();
  } else {
    clear_has_structure_data();
  }
  structure_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), structure_data);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.QueryInfo.structure_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BufferInfo::kPtsFieldNumber;
const int BufferInfo::kDtsFieldNumber;
const int BufferInfo::kDurationFieldNumber;
const int BufferInfo::kOffsetFieldNumber;
const int BufferInfo::kOffsetEndFieldNumber;
const int BufferInfo::kSizeFieldNumber;
const int BufferInfo::kPadFieldNumber;
const int BufferInfo::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BufferInfo::BufferInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.BufferInfo)
}
BufferInfo::BufferInfo(const BufferInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pad()) {
    pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&pts_, &from.pts_,
    reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&pts_) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:GstDebugger.BufferInfo)
}

void BufferInfo::SharedCtor() {
  _cached_size_ = 0;
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pts_, 0, reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&pts_) + sizeof(size_));
}

BufferInfo::~BufferInfo() {
  // @@protoc_insertion_point(destructor:GstDebugger.BufferInfo)
  SharedDtor();
}

void BufferInfo::SharedDtor() {
  pad_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BufferInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BufferInfo::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[7].descriptor;
}

const BufferInfo& BufferInfo::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

BufferInfo* BufferInfo::New(::google::protobuf::Arena* arena) const {
  BufferInfo* n = new BufferInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BufferInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.BufferInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pad()) {
      GOOGLE_DCHECK(!pad_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pad_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&pts_, 0, reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&pts_) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BufferInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.BufferInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 pts = 1;
      case 1: {
        if (tag == 8u) {
          set_has_pts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 dts = 2;
      case 2: {
        if (tag == 16u) {
          set_has_dts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 duration = 3;
      case 3: {
        if (tag == 24u) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 offset = 4;
      case 4: {
        if (tag == 32u) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 offset_end = 5;
      case 5: {
        if (tag == 40u) {
          set_has_offset_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 6;
      case 6: {
        if (tag == 48u) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pad = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pad()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pad().data(), this->pad().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.BufferInfo.pad");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.BufferInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.BufferInfo)
  return false;
#undef DO_
}

void BufferInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.BufferInfo)
  // required uint64 pts = 1;
  if (has_pts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pts(), output);
  }

  // required uint64 dts = 2;
  if (has_dts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dts(), output);
  }

  // required uint64 duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->duration(), output);
  }

  // required uint64 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->offset(), output);
  }

  // required uint64 offset_end = 5;
  if (has_offset_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->offset_end(), output);
  }

  // required uint64 size = 6;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->size(), output);
  }

  // required string pad = 7;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pad().data(), this->pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.BufferInfo.pad");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pad(), output);
  }

  // optional bytes data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.BufferInfo)
}

::google::protobuf::uint8* BufferInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.BufferInfo)
  // required uint64 pts = 1;
  if (has_pts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pts(), target);
  }

  // required uint64 dts = 2;
  if (has_dts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dts(), target);
  }

  // required uint64 duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->duration(), target);
  }

  // required uint64 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->offset(), target);
  }

  // required uint64 offset_end = 5;
  if (has_offset_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->offset_end(), target);
  }

  // required uint64 size = 6;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->size(), target);
  }

  // required string pad = 7;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pad().data(), this->pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.BufferInfo.pad");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pad(), target);
  }

  // optional bytes data = 8;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.BufferInfo)
  return target;
}

size_t BufferInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.BufferInfo)
  size_t total_size = 0;

  if (has_pad()) {
    // required string pad = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pad());
  }

  if (has_pts()) {
    // required uint64 pts = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pts());
  }

  if (has_dts()) {
    // required uint64 dts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dts());
  }

  if (has_duration()) {
    // required uint64 duration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->duration());
  }

  if (has_offset()) {
    // required uint64 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  if (has_offset_end()) {
    // required uint64 offset_end = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset_end());
  }

  if (has_size()) {
    // required uint64 size = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  return total_size;
}
size_t BufferInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.BufferInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000fd) ^ 0x000000fd) == 0) {  // All required fields are present.
    // required string pad = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pad());

    // required uint64 pts = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pts());

    // required uint64 dts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dts());

    // required uint64 duration = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->duration());

    // required uint64 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());

    // required uint64 offset_end = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset_end());

    // required uint64 size = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes data = 8;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BufferInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.BufferInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BufferInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BufferInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.BufferInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.BufferInfo)
    MergeFrom(*source);
  }
}

void BufferInfo::MergeFrom(const BufferInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.BufferInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_pad()) {
      set_has_pad();
      pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_pts()) {
      set_pts(from.pts());
    }
    if (from.has_dts()) {
      set_dts(from.dts());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_offset_end()) {
      set_offset_end(from.offset_end());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
}

void BufferInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.BufferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferInfo::CopyFrom(const BufferInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.BufferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fd) != 0x000000fd) return false;
  return true;
}

void BufferInfo::Swap(BufferInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BufferInfo::InternalSwap(BufferInfo* other) {
  pad_.Swap(&other->pad_);
  data_.Swap(&other->data_);
  std::swap(pts_, other->pts_);
  std::swap(dts_, other->dts_);
  std::swap(duration_, other->duration_);
  std::swap(offset_, other->offset_);
  std::swap(offset_end_, other->offset_end_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BufferInfo::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BufferInfo

// required uint64 pts = 1;
bool BufferInfo::has_pts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BufferInfo::set_has_pts() {
  _has_bits_[0] |= 0x00000004u;
}
void BufferInfo::clear_has_pts() {
  _has_bits_[0] &= ~0x00000004u;
}
void BufferInfo::clear_pts() {
  pts_ = GOOGLE_ULONGLONG(0);
  clear_has_pts();
}
::google::protobuf::uint64 BufferInfo::pts() const {
  // @@protoc_insertion_point(field_get:GstDebugger.BufferInfo.pts)
  return pts_;
}
void BufferInfo::set_pts(::google::protobuf::uint64 value) {
  set_has_pts();
  pts_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.BufferInfo.pts)
}

// required uint64 dts = 2;
bool BufferInfo::has_dts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BufferInfo::set_has_dts() {
  _has_bits_[0] |= 0x00000008u;
}
void BufferInfo::clear_has_dts() {
  _has_bits_[0] &= ~0x00000008u;
}
void BufferInfo::clear_dts() {
  dts_ = GOOGLE_ULONGLONG(0);
  clear_has_dts();
}
::google::protobuf::uint64 BufferInfo::dts() const {
  // @@protoc_insertion_point(field_get:GstDebugger.BufferInfo.dts)
  return dts_;
}
void BufferInfo::set_dts(::google::protobuf::uint64 value) {
  set_has_dts();
  dts_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.BufferInfo.dts)
}

// required uint64 duration = 3;
bool BufferInfo::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BufferInfo::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void BufferInfo::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void BufferInfo::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
  clear_has_duration();
}
::google::protobuf::uint64 BufferInfo::duration() const {
  // @@protoc_insertion_point(field_get:GstDebugger.BufferInfo.duration)
  return duration_;
}
void BufferInfo::set_duration(::google::protobuf::uint64 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.BufferInfo.duration)
}

// required uint64 offset = 4;
bool BufferInfo::has_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BufferInfo::set_has_offset() {
  _has_bits_[0] |= 0x00000020u;
}
void BufferInfo::clear_has_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
void BufferInfo::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
::google::protobuf::uint64 BufferInfo::offset() const {
  // @@protoc_insertion_point(field_get:GstDebugger.BufferInfo.offset)
  return offset_;
}
void BufferInfo::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.BufferInfo.offset)
}

// required uint64 offset_end = 5;
bool BufferInfo::has_offset_end() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BufferInfo::set_has_offset_end() {
  _has_bits_[0] |= 0x00000040u;
}
void BufferInfo::clear_has_offset_end() {
  _has_bits_[0] &= ~0x00000040u;
}
void BufferInfo::clear_offset_end() {
  offset_end_ = GOOGLE_ULONGLONG(0);
  clear_has_offset_end();
}
::google::protobuf::uint64 BufferInfo::offset_end() const {
  // @@protoc_insertion_point(field_get:GstDebugger.BufferInfo.offset_end)
  return offset_end_;
}
void BufferInfo::set_offset_end(::google::protobuf::uint64 value) {
  set_has_offset_end();
  offset_end_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.BufferInfo.offset_end)
}

// required uint64 size = 6;
bool BufferInfo::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BufferInfo::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
void BufferInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void BufferInfo::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 BufferInfo::size() const {
  // @@protoc_insertion_point(field_get:GstDebugger.BufferInfo.size)
  return size_;
}
void BufferInfo::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.BufferInfo.size)
}

// required string pad = 7;
bool BufferInfo::has_pad() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BufferInfo::set_has_pad() {
  _has_bits_[0] |= 0x00000001u;
}
void BufferInfo::clear_has_pad() {
  _has_bits_[0] &= ~0x00000001u;
}
void BufferInfo::clear_pad() {
  pad_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pad();
}
const ::std::string& BufferInfo::pad() const {
  // @@protoc_insertion_point(field_get:GstDebugger.BufferInfo.pad)
  return pad_.GetNoArena();
}
void BufferInfo::set_pad(const ::std::string& value) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.BufferInfo.pad)
}
#if LANG_CXX11
void BufferInfo::set_pad(::std::string&& value) {
  set_has_pad();
  pad_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.BufferInfo.pad)
}
#endif
void BufferInfo::set_pad(const char* value) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.BufferInfo.pad)
}
void BufferInfo::set_pad(const char* value, size_t size) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.BufferInfo.pad)
}
::std::string* BufferInfo::mutable_pad() {
  set_has_pad();
  // @@protoc_insertion_point(field_mutable:GstDebugger.BufferInfo.pad)
  return pad_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BufferInfo::release_pad() {
  // @@protoc_insertion_point(field_release:GstDebugger.BufferInfo.pad)
  clear_has_pad();
  return pad_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BufferInfo::set_allocated_pad(::std::string* pad) {
  if (pad != NULL) {
    set_has_pad();
  } else {
    clear_has_pad();
  }
  pad_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pad);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.BufferInfo.pad)
}

// optional bytes data = 8;
bool BufferInfo::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BufferInfo::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void BufferInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void BufferInfo::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& BufferInfo::data() const {
  // @@protoc_insertion_point(field_get:GstDebugger.BufferInfo.data)
  return data_.GetNoArena();
}
void BufferInfo::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.BufferInfo.data)
}
#if LANG_CXX11
void BufferInfo::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.BufferInfo.data)
}
#endif
void BufferInfo::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.BufferInfo.data)
}
void BufferInfo::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.BufferInfo.data)
}
::std::string* BufferInfo::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:GstDebugger.BufferInfo.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BufferInfo::release_data() {
  // @@protoc_insertion_point(field_release:GstDebugger.BufferInfo.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BufferInfo::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.BufferInfo.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeDescriptionRequest::kNameFieldNumber;
const int TypeDescriptionRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeDescriptionRequest::TypeDescriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.TypeDescriptionRequest)
}
TypeDescriptionRequest::TypeDescriptionRequest(const TypeDescriptionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:GstDebugger.TypeDescriptionRequest)
}

void TypeDescriptionRequest::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

TypeDescriptionRequest::~TypeDescriptionRequest() {
  // @@protoc_insertion_point(destructor:GstDebugger.TypeDescriptionRequest)
  SharedDtor();
}

void TypeDescriptionRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TypeDescriptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeDescriptionRequest::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[8].descriptor;
}

const TypeDescriptionRequest& TypeDescriptionRequest::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

TypeDescriptionRequest* TypeDescriptionRequest::New(::google::protobuf::Arena* arena) const {
  TypeDescriptionRequest* n = new TypeDescriptionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypeDescriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.TypeDescriptionRequest)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TypeDescriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.TypeDescriptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.TypeDescriptionRequest.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GstDebugger.TypeDescriptionRequest.Type type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GstDebugger::TypeDescriptionRequest_Type_IsValid(value)) {
            set_type(static_cast< ::GstDebugger::TypeDescriptionRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.TypeDescriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.TypeDescriptionRequest)
  return false;
#undef DO_
}

void TypeDescriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.TypeDescriptionRequest)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TypeDescriptionRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .GstDebugger.TypeDescriptionRequest.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.TypeDescriptionRequest)
}

::google::protobuf::uint8* TypeDescriptionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.TypeDescriptionRequest)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TypeDescriptionRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .GstDebugger.TypeDescriptionRequest.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.TypeDescriptionRequest)
  return target;
}

size_t TypeDescriptionRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.TypeDescriptionRequest)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required .GstDebugger.TypeDescriptionRequest.Type type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t TypeDescriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.TypeDescriptionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .GstDebugger.TypeDescriptionRequest.Type type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeDescriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.TypeDescriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TypeDescriptionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TypeDescriptionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.TypeDescriptionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.TypeDescriptionRequest)
    MergeFrom(*source);
  }
}

void TypeDescriptionRequest::MergeFrom(const TypeDescriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.TypeDescriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void TypeDescriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.TypeDescriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeDescriptionRequest::CopyFrom(const TypeDescriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.TypeDescriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeDescriptionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TypeDescriptionRequest::Swap(TypeDescriptionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeDescriptionRequest::InternalSwap(TypeDescriptionRequest* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TypeDescriptionRequest::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TypeDescriptionRequest

// required string name = 1;
bool TypeDescriptionRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TypeDescriptionRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TypeDescriptionRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TypeDescriptionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TypeDescriptionRequest::name() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TypeDescriptionRequest.name)
  return name_.GetNoArena();
}
void TypeDescriptionRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.TypeDescriptionRequest.name)
}
#if LANG_CXX11
void TypeDescriptionRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.TypeDescriptionRequest.name)
}
#endif
void TypeDescriptionRequest::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.TypeDescriptionRequest.name)
}
void TypeDescriptionRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.TypeDescriptionRequest.name)
}
::std::string* TypeDescriptionRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:GstDebugger.TypeDescriptionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TypeDescriptionRequest::release_name() {
  // @@protoc_insertion_point(field_release:GstDebugger.TypeDescriptionRequest.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TypeDescriptionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.TypeDescriptionRequest.name)
}

// required .GstDebugger.TypeDescriptionRequest.Type type = 2;
bool TypeDescriptionRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TypeDescriptionRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void TypeDescriptionRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void TypeDescriptionRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
::GstDebugger::TypeDescriptionRequest_Type TypeDescriptionRequest::type() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TypeDescriptionRequest.type)
  return static_cast< ::GstDebugger::TypeDescriptionRequest_Type >(type_);
}
void TypeDescriptionRequest::set_type(::GstDebugger::TypeDescriptionRequest_Type value) {
  assert(::GstDebugger::TypeDescriptionRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.TypeDescriptionRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryHookRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryHookRequest::QueryHookRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.QueryHookRequest)
}
QueryHookRequest::QueryHookRequest(const QueryHookRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:GstDebugger.QueryHookRequest)
}

void QueryHookRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
}

QueryHookRequest::~QueryHookRequest() {
  // @@protoc_insertion_point(destructor:GstDebugger.QueryHookRequest)
  SharedDtor();
}

void QueryHookRequest::SharedDtor() {
}

void QueryHookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryHookRequest::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[9].descriptor;
}

const QueryHookRequest& QueryHookRequest::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryHookRequest* QueryHookRequest::New(::google::protobuf::Arena* arena) const {
  QueryHookRequest* n = new QueryHookRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryHookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.QueryHookRequest)
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryHookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.QueryHookRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.QueryHookRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.QueryHookRequest)
  return false;
#undef DO_
}

void QueryHookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.QueryHookRequest)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.QueryHookRequest)
}

::google::protobuf::uint8* QueryHookRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.QueryHookRequest)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.QueryHookRequest)
  return target;
}

size_t QueryHookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.QueryHookRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryHookRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.QueryHookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryHookRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryHookRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.QueryHookRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.QueryHookRequest)
    MergeFrom(*source);
  }
}

void QueryHookRequest::MergeFrom(const QueryHookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.QueryHookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void QueryHookRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.QueryHookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryHookRequest::CopyFrom(const QueryHookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.QueryHookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryHookRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QueryHookRequest::Swap(QueryHookRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryHookRequest::InternalSwap(QueryHookRequest* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryHookRequest::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryHookRequest

// required int32 type = 1;
bool QueryHookRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryHookRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryHookRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryHookRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 QueryHookRequest::type() const {
  // @@protoc_insertion_point(field_get:GstDebugger.QueryHookRequest.type)
  return type_;
}
void QueryHookRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.QueryHookRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BufferHookRequest::kSendDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BufferHookRequest::BufferHookRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.BufferHookRequest)
}
BufferHookRequest::BufferHookRequest(const BufferHookRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  send_data_ = from.send_data_;
  // @@protoc_insertion_point(copy_constructor:GstDebugger.BufferHookRequest)
}

void BufferHookRequest::SharedCtor() {
  _cached_size_ = 0;
  send_data_ = false;
}

BufferHookRequest::~BufferHookRequest() {
  // @@protoc_insertion_point(destructor:GstDebugger.BufferHookRequest)
  SharedDtor();
}

void BufferHookRequest::SharedDtor() {
}

void BufferHookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BufferHookRequest::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[10].descriptor;
}

const BufferHookRequest& BufferHookRequest::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

BufferHookRequest* BufferHookRequest::New(::google::protobuf::Arena* arena) const {
  BufferHookRequest* n = new BufferHookRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BufferHookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.BufferHookRequest)
  send_data_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BufferHookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.BufferHookRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool send_data = 1;
      case 1: {
        if (tag == 8u) {
          set_has_send_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.BufferHookRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.BufferHookRequest)
  return false;
#undef DO_
}

void BufferHookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.BufferHookRequest)
  // required bool send_data = 1;
  if (has_send_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->send_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.BufferHookRequest)
}

::google::protobuf::uint8* BufferHookRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.BufferHookRequest)
  // required bool send_data = 1;
  if (has_send_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->send_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.BufferHookRequest)
  return target;
}

size_t BufferHookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.BufferHookRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bool send_data = 1;
  if (has_send_data()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BufferHookRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.BufferHookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BufferHookRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BufferHookRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.BufferHookRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.BufferHookRequest)
    MergeFrom(*source);
  }
}

void BufferHookRequest::MergeFrom(const BufferHookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.BufferHookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_send_data()) {
    set_send_data(from.send_data());
  }
}

void BufferHookRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.BufferHookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferHookRequest::CopyFrom(const BufferHookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.BufferHookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferHookRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BufferHookRequest::Swap(BufferHookRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BufferHookRequest::InternalSwap(BufferHookRequest* other) {
  std::swap(send_data_, other->send_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BufferHookRequest::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BufferHookRequest

// required bool send_data = 1;
bool BufferHookRequest::has_send_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BufferHookRequest::set_has_send_data() {
  _has_bits_[0] |= 0x00000001u;
}
void BufferHookRequest::clear_has_send_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void BufferHookRequest::clear_send_data() {
  send_data_ = false;
  clear_has_send_data();
}
bool BufferHookRequest::send_data() const {
  // @@protoc_insertion_point(field_get:GstDebugger.BufferHookRequest.send_data)
  return send_data_;
}
void BufferHookRequest::set_send_data(bool value) {
  set_has_send_data();
  send_data_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.BufferHookRequest.send_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventHookRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventHookRequest::EventHookRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.EventHookRequest)
}
EventHookRequest::EventHookRequest(const EventHookRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:GstDebugger.EventHookRequest)
}

void EventHookRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
}

EventHookRequest::~EventHookRequest() {
  // @@protoc_insertion_point(destructor:GstDebugger.EventHookRequest)
  SharedDtor();
}

void EventHookRequest::SharedDtor() {
}

void EventHookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventHookRequest::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[11].descriptor;
}

const EventHookRequest& EventHookRequest::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventHookRequest* EventHookRequest::New(::google::protobuf::Arena* arena) const {
  EventHookRequest* n = new EventHookRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventHookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.EventHookRequest)
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EventHookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.EventHookRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.EventHookRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.EventHookRequest)
  return false;
#undef DO_
}

void EventHookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.EventHookRequest)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.EventHookRequest)
}

::google::protobuf::uint8* EventHookRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.EventHookRequest)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.EventHookRequest)
  return target;
}

size_t EventHookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.EventHookRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventHookRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.EventHookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EventHookRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventHookRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.EventHookRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.EventHookRequest)
    MergeFrom(*source);
  }
}

void EventHookRequest::MergeFrom(const EventHookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.EventHookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void EventHookRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.EventHookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventHookRequest::CopyFrom(const EventHookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.EventHookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventHookRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EventHookRequest::Swap(EventHookRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventHookRequest::InternalSwap(EventHookRequest* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventHookRequest::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventHookRequest

// required int32 type = 1;
bool EventHookRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EventHookRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void EventHookRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void EventHookRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 EventHookRequest::type() const {
  // @@protoc_insertion_point(field_get:GstDebugger.EventHookRequest.type)
  return type_;
}
void EventHookRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.EventHookRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PadHookRequest::kPadFieldNumber;
const int PadHookRequest::kQueryFieldNumber;
const int PadHookRequest::kBufferFieldNumber;
const int PadHookRequest::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PadHookRequest::PadHookRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.PadHookRequest)
}
PadHookRequest::PadHookRequest(const PadHookRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pad()) {
    pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
  }
  clear_has_pad_hook_type();
  switch (from.pad_hook_type_case()) {
    case kQuery: {
      mutable_query()->::GstDebugger::QueryHookRequest::MergeFrom(from.query());
      break;
    }
    case kBuffer: {
      mutable_buffer()->::GstDebugger::BufferHookRequest::MergeFrom(from.buffer());
      break;
    }
    case kEvent: {
      mutable_event()->::GstDebugger::EventHookRequest::MergeFrom(from.event());
      break;
    }
    case PAD_HOOK_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.PadHookRequest)
}

void PadHookRequest::SharedCtor() {
  _cached_size_ = 0;
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pad_hook_type();
}

PadHookRequest::~PadHookRequest() {
  // @@protoc_insertion_point(destructor:GstDebugger.PadHookRequest)
  SharedDtor();
}

void PadHookRequest::SharedDtor() {
  pad_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_pad_hook_type()) {
    clear_pad_hook_type();
  }
}

void PadHookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PadHookRequest::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[12].descriptor;
}

const PadHookRequest& PadHookRequest::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

PadHookRequest* PadHookRequest::New(::google::protobuf::Arena* arena) const {
  PadHookRequest* n = new PadHookRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PadHookRequest::clear_pad_hook_type() {
// @@protoc_insertion_point(one_of_clear_start:GstDebugger.PadHookRequest)
  switch (pad_hook_type_case()) {
    case kQuery: {
      delete pad_hook_type_.query_;
      break;
    }
    case kBuffer: {
      delete pad_hook_type_.buffer_;
      break;
    }
    case kEvent: {
      delete pad_hook_type_.event_;
      break;
    }
    case PAD_HOOK_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAD_HOOK_TYPE_NOT_SET;
}


void PadHookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.PadHookRequest)
  if (has_pad()) {
    GOOGLE_DCHECK(!pad_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*pad_.UnsafeRawStringPointer())->clear();
  }
  clear_pad_hook_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PadHookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.PadHookRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pad = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pad()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pad().data(), this->pad().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PadHookRequest.pad");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.QueryHookRequest query = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.BufferHookRequest buffer = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.EventHookRequest event = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.PadHookRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.PadHookRequest)
  return false;
#undef DO_
}

void PadHookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.PadHookRequest)
  // optional string pad = 1;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pad().data(), this->pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadHookRequest.pad");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pad(), output);
  }

  switch (pad_hook_type_case()) {
    case kQuery:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *pad_hook_type_.query_, output);
      break;
    case kBuffer:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *pad_hook_type_.buffer_, output);
      break;
    case kEvent:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *pad_hook_type_.event_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.PadHookRequest)
}

::google::protobuf::uint8* PadHookRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.PadHookRequest)
  // optional string pad = 1;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pad().data(), this->pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadHookRequest.pad");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pad(), target);
  }

  switch (pad_hook_type_case()) {
    case kQuery:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *pad_hook_type_.query_, false, target);
      break;
    case kBuffer:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *pad_hook_type_.buffer_, false, target);
      break;
    case kEvent:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *pad_hook_type_.event_, false, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.PadHookRequest)
  return target;
}

size_t PadHookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.PadHookRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string pad = 1;
  if (has_pad()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pad());
  }

  switch (pad_hook_type_case()) {
    // optional .GstDebugger.QueryHookRequest query = 2;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *pad_hook_type_.query_);
      break;
    }
    // optional .GstDebugger.BufferHookRequest buffer = 3;
    case kBuffer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *pad_hook_type_.buffer_);
      break;
    }
    // optional .GstDebugger.EventHookRequest event = 4;
    case kEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *pad_hook_type_.event_);
      break;
    }
    case PAD_HOOK_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PadHookRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.PadHookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PadHookRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PadHookRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.PadHookRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.PadHookRequest)
    MergeFrom(*source);
  }
}

void PadHookRequest::MergeFrom(const PadHookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.PadHookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pad()) {
    set_has_pad();
    pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
  }
  switch (from.pad_hook_type_case()) {
    case kQuery: {
      mutable_query()->::GstDebugger::QueryHookRequest::MergeFrom(from.query());
      break;
    }
    case kBuffer: {
      mutable_buffer()->::GstDebugger::BufferHookRequest::MergeFrom(from.buffer());
      break;
    }
    case kEvent: {
      mutable_event()->::GstDebugger::EventHookRequest::MergeFrom(from.event());
      break;
    }
    case PAD_HOOK_TYPE_NOT_SET: {
      break;
    }
  }
}

void PadHookRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.PadHookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PadHookRequest::CopyFrom(const PadHookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.PadHookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PadHookRequest::IsInitialized() const {
  switch (pad_hook_type_case()) {
    case kQuery: {
      if (has_query()) {
        if (!this->query().IsInitialized()) return false;
      }
      break;
    }
    case kBuffer: {
      if (has_buffer()) {
        if (!this->buffer().IsInitialized()) return false;
      }
      break;
    }
    case kEvent: {
      if (has_event()) {
        if (!this->event().IsInitialized()) return false;
      }
      break;
    }
    case PAD_HOOK_TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void PadHookRequest::Swap(PadHookRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PadHookRequest::InternalSwap(PadHookRequest* other) {
  pad_.Swap(&other->pad_);
  std::swap(pad_hook_type_, other->pad_hook_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PadHookRequest::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PadHookRequest

// optional string pad = 1;
bool PadHookRequest::has_pad() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PadHookRequest::set_has_pad() {
  _has_bits_[0] |= 0x00000001u;
}
void PadHookRequest::clear_has_pad() {
  _has_bits_[0] &= ~0x00000001u;
}
void PadHookRequest::clear_pad() {
  pad_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pad();
}
const ::std::string& PadHookRequest::pad() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PadHookRequest.pad)
  return pad_.GetNoArena();
}
void PadHookRequest::set_pad(const ::std::string& value) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PadHookRequest.pad)
}
#if LANG_CXX11
void PadHookRequest::set_pad(::std::string&& value) {
  set_has_pad();
  pad_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PadHookRequest.pad)
}
#endif
void PadHookRequest::set_pad(const char* value) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PadHookRequest.pad)
}
void PadHookRequest::set_pad(const char* value, size_t size) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PadHookRequest.pad)
}
::std::string* PadHookRequest::mutable_pad() {
  set_has_pad();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PadHookRequest.pad)
  return pad_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PadHookRequest::release_pad() {
  // @@protoc_insertion_point(field_release:GstDebugger.PadHookRequest.pad)
  clear_has_pad();
  return pad_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PadHookRequest::set_allocated_pad(::std::string* pad) {
  if (pad != NULL) {
    set_has_pad();
  } else {
    clear_has_pad();
  }
  pad_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pad);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PadHookRequest.pad)
}

// optional .GstDebugger.QueryHookRequest query = 2;
bool PadHookRequest::has_query() const {
  return pad_hook_type_case() == kQuery;
}
void PadHookRequest::set_has_query() {
  _oneof_case_[0] = kQuery;
}
void PadHookRequest::clear_query() {
  if (has_query()) {
    delete pad_hook_type_.query_;
    clear_has_pad_hook_type();
  }
}
 const ::GstDebugger::QueryHookRequest& PadHookRequest::query() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PadHookRequest.query)
  return has_query()
      ? *pad_hook_type_.query_
      : ::GstDebugger::QueryHookRequest::default_instance();
}
::GstDebugger::QueryHookRequest* PadHookRequest::mutable_query() {
  if (!has_query()) {
    clear_pad_hook_type();
    set_has_query();
    pad_hook_type_.query_ = new ::GstDebugger::QueryHookRequest;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.PadHookRequest.query)
  return pad_hook_type_.query_;
}
::GstDebugger::QueryHookRequest* PadHookRequest::release_query() {
  // @@protoc_insertion_point(field_release:GstDebugger.PadHookRequest.query)
  if (has_query()) {
    clear_has_pad_hook_type();
    ::GstDebugger::QueryHookRequest* temp = pad_hook_type_.query_;
    pad_hook_type_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PadHookRequest::set_allocated_query(::GstDebugger::QueryHookRequest* query) {
  clear_pad_hook_type();
  if (query) {
    set_has_query();
    pad_hook_type_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PadHookRequest.query)
}

// optional .GstDebugger.BufferHookRequest buffer = 3;
bool PadHookRequest::has_buffer() const {
  return pad_hook_type_case() == kBuffer;
}
void PadHookRequest::set_has_buffer() {
  _oneof_case_[0] = kBuffer;
}
void PadHookRequest::clear_buffer() {
  if (has_buffer()) {
    delete pad_hook_type_.buffer_;
    clear_has_pad_hook_type();
  }
}
 const ::GstDebugger::BufferHookRequest& PadHookRequest::buffer() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PadHookRequest.buffer)
  return has_buffer()
      ? *pad_hook_type_.buffer_
      : ::GstDebugger::BufferHookRequest::default_instance();
}
::GstDebugger::BufferHookRequest* PadHookRequest::mutable_buffer() {
  if (!has_buffer()) {
    clear_pad_hook_type();
    set_has_buffer();
    pad_hook_type_.buffer_ = new ::GstDebugger::BufferHookRequest;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.PadHookRequest.buffer)
  return pad_hook_type_.buffer_;
}
::GstDebugger::BufferHookRequest* PadHookRequest::release_buffer() {
  // @@protoc_insertion_point(field_release:GstDebugger.PadHookRequest.buffer)
  if (has_buffer()) {
    clear_has_pad_hook_type();
    ::GstDebugger::BufferHookRequest* temp = pad_hook_type_.buffer_;
    pad_hook_type_.buffer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PadHookRequest::set_allocated_buffer(::GstDebugger::BufferHookRequest* buffer) {
  clear_pad_hook_type();
  if (buffer) {
    set_has_buffer();
    pad_hook_type_.buffer_ = buffer;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PadHookRequest.buffer)
}

// optional .GstDebugger.EventHookRequest event = 4;
bool PadHookRequest::has_event() const {
  return pad_hook_type_case() == kEvent;
}
void PadHookRequest::set_has_event() {
  _oneof_case_[0] = kEvent;
}
void PadHookRequest::clear_event() {
  if (has_event()) {
    delete pad_hook_type_.event_;
    clear_has_pad_hook_type();
  }
}
 const ::GstDebugger::EventHookRequest& PadHookRequest::event() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PadHookRequest.event)
  return has_event()
      ? *pad_hook_type_.event_
      : ::GstDebugger::EventHookRequest::default_instance();
}
::GstDebugger::EventHookRequest* PadHookRequest::mutable_event() {
  if (!has_event()) {
    clear_pad_hook_type();
    set_has_event();
    pad_hook_type_.event_ = new ::GstDebugger::EventHookRequest;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.PadHookRequest.event)
  return pad_hook_type_.event_;
}
::GstDebugger::EventHookRequest* PadHookRequest::release_event() {
  // @@protoc_insertion_point(field_release:GstDebugger.PadHookRequest.event)
  if (has_event()) {
    clear_has_pad_hook_type();
    ::GstDebugger::EventHookRequest* temp = pad_hook_type_.event_;
    pad_hook_type_.event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PadHookRequest::set_allocated_event(::GstDebugger::EventHookRequest* event) {
  clear_pad_hook_type();
  if (event) {
    set_has_event();
    pad_hook_type_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PadHookRequest.event)
}

bool PadHookRequest::has_pad_hook_type() const {
  return pad_hook_type_case() != PAD_HOOK_TYPE_NOT_SET;
}
void PadHookRequest::clear_has_pad_hook_type() {
  _oneof_case_[0] = PAD_HOOK_TYPE_NOT_SET;
}
PadHookRequest::PadHookTypeCase PadHookRequest::pad_hook_type_case() const {
  return PadHookRequest::PadHookTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRequest::kLevelFieldNumber;
const int LogRequest::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRequest::LogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.LogRequest)
}
LogRequest::LogRequest(const LogRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_category()) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:GstDebugger.LogRequest)
}

void LogRequest::SharedCtor() {
  _cached_size_ = 0;
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
}

LogRequest::~LogRequest() {
  // @@protoc_insertion_point(destructor:GstDebugger.LogRequest)
  SharedDtor();
}

void LogRequest::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRequest::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[13].descriptor;
}

const LogRequest& LogRequest::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogRequest* LogRequest::New(::google::protobuf::Arena* arena) const {
  LogRequest* n = new LogRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.LogRequest)
  if (has_category()) {
    GOOGLE_DCHECK(!category_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*category_.UnsafeRawStringPointer())->clear();
  }
  level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.LogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (tag == 8u) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string category = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.LogRequest.category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.LogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.LogRequest)
  return false;
#undef DO_
}

void LogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.LogRequest)
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional string category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogRequest.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.LogRequest)
}

::google::protobuf::uint8* LogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.LogRequest)
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional string category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogRequest.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.LogRequest)
  return target;
}

size_t LogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.LogRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 level = 1;
  if (has_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }
  // optional string category = 2;
  if (has_category()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.LogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.LogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.LogRequest)
    MergeFrom(*source);
  }
}

void LogRequest::MergeFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.LogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_category()) {
      set_has_category();
      category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void LogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.LogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRequest::CopyFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.LogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void LogRequest::Swap(LogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRequest::InternalSwap(LogRequest* other) {
  category_.Swap(&other->category_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRequest::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRequest

// required int32 level = 1;
bool LogRequest::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogRequest::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void LogRequest::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogRequest::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 LogRequest::level() const {
  // @@protoc_insertion_point(field_get:GstDebugger.LogRequest.level)
  return level_;
}
void LogRequest::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.LogRequest.level)
}

// optional string category = 2;
bool LogRequest::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogRequest::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
void LogRequest::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogRequest::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
const ::std::string& LogRequest::category() const {
  // @@protoc_insertion_point(field_get:GstDebugger.LogRequest.category)
  return category_.GetNoArena();
}
void LogRequest::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.LogRequest.category)
}
#if LANG_CXX11
void LogRequest::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.LogRequest.category)
}
#endif
void LogRequest::set_category(const char* value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.LogRequest.category)
}
void LogRequest::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.LogRequest.category)
}
::std::string* LogRequest::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:GstDebugger.LogRequest.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRequest::release_category() {
  // @@protoc_insertion_point(field_release:GstDebugger.LogRequest.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRequest::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.LogRequest.category)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageRequest::MessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.MessageRequest)
}
MessageRequest::MessageRequest(const MessageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:GstDebugger.MessageRequest)
}

void MessageRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
}

MessageRequest::~MessageRequest() {
  // @@protoc_insertion_point(destructor:GstDebugger.MessageRequest)
  SharedDtor();
}

void MessageRequest::SharedDtor() {
}

void MessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRequest::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[14].descriptor;
}

const MessageRequest& MessageRequest::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

MessageRequest* MessageRequest::New(::google::protobuf::Arena* arena) const {
  MessageRequest* n = new MessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.MessageRequest)
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.MessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.MessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.MessageRequest)
  return false;
#undef DO_
}

void MessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.MessageRequest)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.MessageRequest)
}

::google::protobuf::uint8* MessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.MessageRequest)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.MessageRequest)
  return target;
}

size_t MessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.MessageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.MessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.MessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.MessageRequest)
    MergeFrom(*source);
  }
}

void MessageRequest::MergeFrom(const MessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.MessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void MessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.MessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRequest::CopyFrom(const MessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.MessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MessageRequest::Swap(MessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageRequest::InternalSwap(MessageRequest* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageRequest::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageRequest

// required int32 type = 1;
bool MessageRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 MessageRequest::type() const {
  // @@protoc_insertion_point(field_get:GstDebugger.MessageRequest.type)
  return type_;
}
void MessageRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.MessageRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HookRequest::kActionFieldNumber;
const int HookRequest::kMessageFieldNumber;
const int HookRequest::kLogFieldNumber;
const int HookRequest::kPadHookFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HookRequest::HookRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.HookRequest)
}
HookRequest::HookRequest(const HookRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_ = from.action_;
  clear_has_hook_type();
  switch (from.hook_type_case()) {
    case kMessage: {
      mutable_message()->::GstDebugger::MessageRequest::MergeFrom(from.message());
      break;
    }
    case kLog: {
      mutable_log()->::GstDebugger::LogRequest::MergeFrom(from.log());
      break;
    }
    case kPadHook: {
      mutable_pad_hook()->::GstDebugger::PadHookRequest::MergeFrom(from.pad_hook());
      break;
    }
    case HOOK_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.HookRequest)
}

void HookRequest::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  clear_has_hook_type();
}

HookRequest::~HookRequest() {
  // @@protoc_insertion_point(destructor:GstDebugger.HookRequest)
  SharedDtor();
}

void HookRequest::SharedDtor() {
  if (has_hook_type()) {
    clear_hook_type();
  }
}

void HookRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HookRequest::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[15].descriptor;
}

const HookRequest& HookRequest::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

HookRequest* HookRequest::New(::google::protobuf::Arena* arena) const {
  HookRequest* n = new HookRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HookRequest::clear_hook_type() {
// @@protoc_insertion_point(one_of_clear_start:GstDebugger.HookRequest)
  switch (hook_type_case()) {
    case kMessage: {
      delete hook_type_.message_;
      break;
    }
    case kLog: {
      delete hook_type_.log_;
      break;
    }
    case kPadHook: {
      delete hook_type_.pad_hook_;
      break;
    }
    case HOOK_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HOOK_TYPE_NOT_SET;
}


void HookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.HookRequest)
  action_ = 0;
  clear_hook_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HookRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.HookRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GstDebugger.Action action = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GstDebugger::Action_IsValid(value)) {
            set_action(static_cast< ::GstDebugger::Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.MessageRequest message = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.LogRequest log = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.PadHookRequest pad_hook = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pad_hook()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.HookRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.HookRequest)
  return false;
#undef DO_
}

void HookRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.HookRequest)
  // required .GstDebugger.Action action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  switch (hook_type_case()) {
    case kMessage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *hook_type_.message_, output);
      break;
    case kLog:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *hook_type_.log_, output);
      break;
    case kPadHook:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *hook_type_.pad_hook_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.HookRequest)
}

::google::protobuf::uint8* HookRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.HookRequest)
  // required .GstDebugger.Action action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  switch (hook_type_case()) {
    case kMessage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *hook_type_.message_, false, target);
      break;
    case kLog:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *hook_type_.log_, false, target);
      break;
    case kPadHook:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *hook_type_.pad_hook_, false, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.HookRequest)
  return target;
}

size_t HookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.HookRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .GstDebugger.Action action = 1;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }
  switch (hook_type_case()) {
    // optional .GstDebugger.MessageRequest message = 2;
    case kMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *hook_type_.message_);
      break;
    }
    // optional .GstDebugger.LogRequest log = 3;
    case kLog: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *hook_type_.log_);
      break;
    }
    // optional .GstDebugger.PadHookRequest pad_hook = 4;
    case kPadHook: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *hook_type_.pad_hook_);
      break;
    }
    case HOOK_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HookRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.HookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HookRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HookRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.HookRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.HookRequest)
    MergeFrom(*source);
  }
}

void HookRequest::MergeFrom(const HookRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.HookRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_action()) {
    set_action(from.action());
  }
  switch (from.hook_type_case()) {
    case kMessage: {
      mutable_message()->::GstDebugger::MessageRequest::MergeFrom(from.message());
      break;
    }
    case kLog: {
      mutable_log()->::GstDebugger::LogRequest::MergeFrom(from.log());
      break;
    }
    case kPadHook: {
      mutable_pad_hook()->::GstDebugger::PadHookRequest::MergeFrom(from.pad_hook());
      break;
    }
    case HOOK_TYPE_NOT_SET: {
      break;
    }
  }
}

void HookRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.HookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HookRequest::CopyFrom(const HookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.HookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HookRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (hook_type_case()) {
    case kMessage: {
      if (has_message()) {
        if (!this->message().IsInitialized()) return false;
      }
      break;
    }
    case kLog: {
      if (has_log()) {
        if (!this->log().IsInitialized()) return false;
      }
      break;
    }
    case kPadHook: {
      if (has_pad_hook()) {
        if (!this->pad_hook().IsInitialized()) return false;
      }
      break;
    }
    case HOOK_TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void HookRequest::Swap(HookRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HookRequest::InternalSwap(HookRequest* other) {
  std::swap(action_, other->action_);
  std::swap(hook_type_, other->hook_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HookRequest::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HookRequest

// required .GstDebugger.Action action = 1;
bool HookRequest::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HookRequest::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void HookRequest::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void HookRequest::clear_action() {
  action_ = 0;
  clear_has_action();
}
::GstDebugger::Action HookRequest::action() const {
  // @@protoc_insertion_point(field_get:GstDebugger.HookRequest.action)
  return static_cast< ::GstDebugger::Action >(action_);
}
void HookRequest::set_action(::GstDebugger::Action value) {
  assert(::GstDebugger::Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.HookRequest.action)
}

// optional .GstDebugger.MessageRequest message = 2;
bool HookRequest::has_message() const {
  return hook_type_case() == kMessage;
}
void HookRequest::set_has_message() {
  _oneof_case_[0] = kMessage;
}
void HookRequest::clear_message() {
  if (has_message()) {
    delete hook_type_.message_;
    clear_has_hook_type();
  }
}
 const ::GstDebugger::MessageRequest& HookRequest::message() const {
  // @@protoc_insertion_point(field_get:GstDebugger.HookRequest.message)
  return has_message()
      ? *hook_type_.message_
      : ::GstDebugger::MessageRequest::default_instance();
}
::GstDebugger::MessageRequest* HookRequest::mutable_message() {
  if (!has_message()) {
    clear_hook_type();
    set_has_message();
    hook_type_.message_ = new ::GstDebugger::MessageRequest;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.HookRequest.message)
  return hook_type_.message_;
}
::GstDebugger::MessageRequest* HookRequest::release_message() {
  // @@protoc_insertion_point(field_release:GstDebugger.HookRequest.message)
  if (has_message()) {
    clear_has_hook_type();
    ::GstDebugger::MessageRequest* temp = hook_type_.message_;
    hook_type_.message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HookRequest::set_allocated_message(::GstDebugger::MessageRequest* message) {
  clear_hook_type();
  if (message) {
    set_has_message();
    hook_type_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.HookRequest.message)
}

// optional .GstDebugger.LogRequest log = 3;
bool HookRequest::has_log() const {
  return hook_type_case() == kLog;
}
void HookRequest::set_has_log() {
  _oneof_case_[0] = kLog;
}
void HookRequest::clear_log() {
  if (has_log()) {
    delete hook_type_.log_;
    clear_has_hook_type();
  }
}
 const ::GstDebugger::LogRequest& HookRequest::log() const {
  // @@protoc_insertion_point(field_get:GstDebugger.HookRequest.log)
  return has_log()
      ? *hook_type_.log_
      : ::GstDebugger::LogRequest::default_instance();
}
::GstDebugger::LogRequest* HookRequest::mutable_log() {
  if (!has_log()) {
    clear_hook_type();
    set_has_log();
    hook_type_.log_ = new ::GstDebugger::LogRequest;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.HookRequest.log)
  return hook_type_.log_;
}
::GstDebugger::LogRequest* HookRequest::release_log() {
  // @@protoc_insertion_point(field_release:GstDebugger.HookRequest.log)
  if (has_log()) {
    clear_has_hook_type();
    ::GstDebugger::LogRequest* temp = hook_type_.log_;
    hook_type_.log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HookRequest::set_allocated_log(::GstDebugger::LogRequest* log) {
  clear_hook_type();
  if (log) {
    set_has_log();
    hook_type_.log_ = log;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.HookRequest.log)
}

// optional .GstDebugger.PadHookRequest pad_hook = 4;
bool HookRequest::has_pad_hook() const {
  return hook_type_case() == kPadHook;
}
void HookRequest::set_has_pad_hook() {
  _oneof_case_[0] = kPadHook;
}
void HookRequest::clear_pad_hook() {
  if (has_pad_hook()) {
    delete hook_type_.pad_hook_;
    clear_has_hook_type();
  }
}
 const ::GstDebugger::PadHookRequest& HookRequest::pad_hook() const {
  // @@protoc_insertion_point(field_get:GstDebugger.HookRequest.pad_hook)
  return has_pad_hook()
      ? *hook_type_.pad_hook_
      : ::GstDebugger::PadHookRequest::default_instance();
}
::GstDebugger::PadHookRequest* HookRequest::mutable_pad_hook() {
  if (!has_pad_hook()) {
    clear_hook_type();
    set_has_pad_hook();
    hook_type_.pad_hook_ = new ::GstDebugger::PadHookRequest;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.HookRequest.pad_hook)
  return hook_type_.pad_hook_;
}
::GstDebugger::PadHookRequest* HookRequest::release_pad_hook() {
  // @@protoc_insertion_point(field_release:GstDebugger.HookRequest.pad_hook)
  if (has_pad_hook()) {
    clear_has_hook_type();
    ::GstDebugger::PadHookRequest* temp = hook_type_.pad_hook_;
    hook_type_.pad_hook_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HookRequest::set_allocated_pad_hook(::GstDebugger::PadHookRequest* pad_hook) {
  clear_hook_type();
  if (pad_hook) {
    set_has_pad_hook();
    hook_type_.pad_hook_ = pad_hook;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.HookRequest.pad_hook)
}

bool HookRequest::has_hook_type() const {
  return hook_type_case() != HOOK_TYPE_NOT_SET;
}
void HookRequest::clear_has_hook_type() {
  _oneof_case_[0] = HOOK_TYPE_NOT_SET;
}
HookRequest::HookTypeCase HookRequest::hook_type_case() const {
  return HookRequest::HookTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kTypeDescriptionFieldNumber;
const int Command::kDebugCategoriesListFieldNumber;
const int Command::kHookRequestFieldNumber;
const int Command::kLogThresholdFieldNumber;
const int Command::kEntireTopologyFieldNumber;
const int Command::kPropertyFieldNumber;
const int Command::kPropertySetFieldNumber;
const int Command::kPadDynamicInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_command_type();
  switch (from.command_type_case()) {
    case kTypeDescription: {
      mutable_type_description()->::GstDebugger::TypeDescriptionRequest::MergeFrom(from.type_description());
      break;
    }
    case kDebugCategoriesList: {
      set_debug_categories_list(from.debug_categories_list());
      break;
    }
    case kHookRequest: {
      mutable_hook_request()->::GstDebugger::HookRequest::MergeFrom(from.hook_request());
      break;
    }
    case kLogThreshold: {
      set_log_threshold(from.log_threshold());
      break;
    }
    case kEntireTopology: {
      set_entire_topology(from.entire_topology());
      break;
    }
    case kProperty: {
      mutable_property()->::GstDebugger::PropertyRequest::MergeFrom(from.property());
      break;
    }
    case kPropertySet: {
      mutable_property_set()->::GstDebugger::PropertyValue::MergeFrom(from.property_set());
      break;
    }
    case kPadDynamicInfo: {
      set_pad_dynamic_info(from.pad_dynamic_info());
      break;
    }
    case COMMAND_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  clear_has_command_type();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:GstDebugger.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (has_command_type()) {
    clear_command_type();
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[16].descriptor;
}

const Command& Command::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::clear_command_type() {
// @@protoc_insertion_point(one_of_clear_start:GstDebugger.Command)
  switch (command_type_case()) {
    case kTypeDescription: {
      delete command_type_.type_description_;
      break;
    }
    case kDebugCategoriesList: {
      // No need to clear
      break;
    }
    case kHookRequest: {
      delete command_type_.hook_request_;
      break;
    }
    case kLogThreshold: {
      command_type_.log_threshold_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kEntireTopology: {
      // No need to clear
      break;
    }
    case kProperty: {
      delete command_type_.property_;
      break;
    }
    case kPropertySet: {
      delete command_type_.property_set_;
      break;
    }
    case kPadDynamicInfo: {
      command_type_.pad_dynamic_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case COMMAND_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_TYPE_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.Command)
  clear_command_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GstDebugger.TypeDescriptionRequest type_description = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_categories_list = 2;
      case 2: {
        if (tag == 16u) {
          clear_command_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &command_type_.debug_categories_list_)));
          set_has_debug_categories_list();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.HookRequest hook_request = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hook_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string log_threshold = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_threshold()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_threshold().data(), this->log_threshold().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.Command.log_threshold");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool entire_topology = 5;
      case 5: {
        if (tag == 40u) {
          clear_command_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &command_type_.entire_topology_)));
          set_has_entire_topology();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.PropertyRequest property = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.PropertyValue property_set = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pad_dynamic_info = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pad_dynamic_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pad_dynamic_info().data(), this->pad_dynamic_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.Command.pad_dynamic_info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.Command)
  switch (command_type_case()) {
    case kTypeDescription:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *command_type_.type_description_, output);
      break;
    case kDebugCategoriesList:
      ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->debug_categories_list(), output);
      break;
    case kHookRequest:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *command_type_.hook_request_, output);
      break;
    case kLogThreshold:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->log_threshold().data(), this->log_threshold().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "GstDebugger.Command.log_threshold");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->log_threshold(), output);
      break;
    case kEntireTopology:
      ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->entire_topology(), output);
      break;
    case kProperty:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *command_type_.property_, output);
      break;
    case kPropertySet:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *command_type_.property_set_, output);
      break;
    case kPadDynamicInfo:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->pad_dynamic_info().data(), this->pad_dynamic_info().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "GstDebugger.Command.pad_dynamic_info");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        8, this->pad_dynamic_info(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.Command)
  switch (command_type_case()) {
    case kTypeDescription:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *command_type_.type_description_, false, target);
      break;
    case kDebugCategoriesList:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->debug_categories_list(), target);
      break;
    case kHookRequest:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *command_type_.hook_request_, false, target);
      break;
    case kLogThreshold:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->log_threshold().data(), this->log_threshold().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "GstDebugger.Command.log_threshold");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          4, this->log_threshold(), target);
      break;
    case kEntireTopology:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->entire_topology(), target);
      break;
    case kProperty:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *command_type_.property_, false, target);
      break;
    case kPropertySet:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *command_type_.property_set_, false, target);
      break;
    case kPadDynamicInfo:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->pad_dynamic_info().data(), this->pad_dynamic_info().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "GstDebugger.Command.pad_dynamic_info");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          8, this->pad_dynamic_info(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  switch (command_type_case()) {
    // optional .GstDebugger.TypeDescriptionRequest type_description = 1;
    case kTypeDescription: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_type_.type_description_);
      break;
    }
    // optional bool debug_categories_list = 2;
    case kDebugCategoriesList: {
      total_size += 1 + 1;
      break;
    }
    // optional .GstDebugger.HookRequest hook_request = 3;
    case kHookRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_type_.hook_request_);
      break;
    }
    // optional string log_threshold = 4;
    case kLogThreshold: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_threshold());
      break;
    }
    // optional bool entire_topology = 5;
    case kEntireTopology: {
      total_size += 1 + 1;
      break;
    }
    // optional .GstDebugger.PropertyRequest property = 6;
    case kProperty: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_type_.property_);
      break;
    }
    // optional .GstDebugger.PropertyValue property_set = 7;
    case kPropertySet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_type_.property_set_);
      break;
    }
    // optional string pad_dynamic_info = 8;
    case kPadDynamicInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pad_dynamic_info());
      break;
    }
    case COMMAND_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.command_type_case()) {
    case kTypeDescription: {
      mutable_type_description()->::GstDebugger::TypeDescriptionRequest::MergeFrom(from.type_description());
      break;
    }
    case kDebugCategoriesList: {
      set_debug_categories_list(from.debug_categories_list());
      break;
    }
    case kHookRequest: {
      mutable_hook_request()->::GstDebugger::HookRequest::MergeFrom(from.hook_request());
      break;
    }
    case kLogThreshold: {
      set_log_threshold(from.log_threshold());
      break;
    }
    case kEntireTopology: {
      set_entire_topology(from.entire_topology());
      break;
    }
    case kProperty: {
      mutable_property()->::GstDebugger::PropertyRequest::MergeFrom(from.property());
      break;
    }
    case kPropertySet: {
      mutable_property_set()->::GstDebugger::PropertyValue::MergeFrom(from.property_set());
      break;
    }
    case kPadDynamicInfo: {
      set_pad_dynamic_info(from.pad_dynamic_info());
      break;
    }
    case COMMAND_TYPE_NOT_SET: {
      break;
    }
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  switch (command_type_case()) {
    case kTypeDescription: {
      if (has_type_description()) {
        if (!this->type_description().IsInitialized()) return false;
      }
      break;
    }
    case kDebugCategoriesList: {
      break;
    }
    case kHookRequest: {
      if (has_hook_request()) {
        if (!this->hook_request().IsInitialized()) return false;
      }
      break;
    }
    case kLogThreshold: {
      break;
    }
    case kEntireTopology: {
      break;
    }
    case kProperty: {
      if (has_property()) {
        if (!this->property().IsInitialized()) return false;
      }
      break;
    }
    case kPropertySet: {
      if (has_property_set()) {
        if (!this->property_set().IsInitialized()) return false;
      }
      break;
    }
    case kPadDynamicInfo: {
      break;
    }
    case COMMAND_TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(command_type_, other->command_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// optional .GstDebugger.TypeDescriptionRequest type_description = 1;
bool Command::has_type_description() const {
  return command_type_case() == kTypeDescription;
}
void Command::set_has_type_description() {
  _oneof_case_[0] = kTypeDescription;
}
void Command::clear_type_description() {
  if (has_type_description()) {
    delete command_type_.type_description_;
    clear_has_command_type();
  }
}
 const ::GstDebugger::TypeDescriptionRequest& Command::type_description() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Command.type_description)
  return has_type_description()
      ? *command_type_.type_description_
      : ::GstDebugger::TypeDescriptionRequest::default_instance();
}
::GstDebugger::TypeDescriptionRequest* Command::mutable_type_description() {
  if (!has_type_description()) {
    clear_command_type();
    set_has_type_description();
    command_type_.type_description_ = new ::GstDebugger::TypeDescriptionRequest;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.Command.type_description)
  return command_type_.type_description_;
}
::GstDebugger::TypeDescriptionRequest* Command::release_type_description() {
  // @@protoc_insertion_point(field_release:GstDebugger.Command.type_description)
  if (has_type_description()) {
    clear_has_command_type();
    ::GstDebugger::TypeDescriptionRequest* temp = command_type_.type_description_;
    command_type_.type_description_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_type_description(::GstDebugger::TypeDescriptionRequest* type_description) {
  clear_command_type();
  if (type_description) {
    set_has_type_description();
    command_type_.type_description_ = type_description;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.Command.type_description)
}

// optional bool debug_categories_list = 2;
bool Command::has_debug_categories_list() const {
  return command_type_case() == kDebugCategoriesList;
}
void Command::set_has_debug_categories_list() {
  _oneof_case_[0] = kDebugCategoriesList;
}
void Command::clear_debug_categories_list() {
  if (has_debug_categories_list()) {
    command_type_.debug_categories_list_ = false;
    clear_has_command_type();
  }
}
bool Command::debug_categories_list() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Command.debug_categories_list)
  if (has_debug_categories_list()) {
    return command_type_.debug_categories_list_;
  }
  return false;
}
void Command::set_debug_categories_list(bool value) {
  if (!has_debug_categories_list()) {
    clear_command_type();
    set_has_debug_categories_list();
  }
  command_type_.debug_categories_list_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.Command.debug_categories_list)
}

// optional .GstDebugger.HookRequest hook_request = 3;
bool Command::has_hook_request() const {
  return command_type_case() == kHookRequest;
}
void Command::set_has_hook_request() {
  _oneof_case_[0] = kHookRequest;
}
void Command::clear_hook_request() {
  if (has_hook_request()) {
    delete command_type_.hook_request_;
    clear_has_command_type();
  }
}
 const ::GstDebugger::HookRequest& Command::hook_request() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Command.hook_request)
  return has_hook_request()
      ? *command_type_.hook_request_
      : ::GstDebugger::HookRequest::default_instance();
}
::GstDebugger::HookRequest* Command::mutable_hook_request() {
  if (!has_hook_request()) {
    clear_command_type();
    set_has_hook_request();
    command_type_.hook_request_ = new ::GstDebugger::HookRequest;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.Command.hook_request)
  return command_type_.hook_request_;
}
::GstDebugger::HookRequest* Command::release_hook_request() {
  // @@protoc_insertion_point(field_release:GstDebugger.Command.hook_request)
  if (has_hook_request()) {
    clear_has_command_type();
    ::GstDebugger::HookRequest* temp = command_type_.hook_request_;
    command_type_.hook_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_hook_request(::GstDebugger::HookRequest* hook_request) {
  clear_command_type();
  if (hook_request) {
    set_has_hook_request();
    command_type_.hook_request_ = hook_request;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.Command.hook_request)
}

// optional string log_threshold = 4;
bool Command::has_log_threshold() const {
  return command_type_case() == kLogThreshold;
}
void Command::set_has_log_threshold() {
  _oneof_case_[0] = kLogThreshold;
}
void Command::clear_log_threshold() {
  if (has_log_threshold()) {
    command_type_.log_threshold_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_command_type();
  }
}
const ::std::string& Command::log_threshold() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Command.log_threshold)
  if (has_log_threshold()) {
    return command_type_.log_threshold_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Command::set_log_threshold(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GstDebugger.Command.log_threshold)
  if (!has_log_threshold()) {
    clear_command_type();
    set_has_log_threshold();
    command_type_.log_threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  command_type_.log_threshold_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.Command.log_threshold)
}
#if LANG_CXX11
void Command::set_log_threshold(::std::string&& value) {
  // @@protoc_insertion_point(field_set:GstDebugger.Command.log_threshold)
  if (!has_log_threshold()) {
    clear_command_type();
    set_has_log_threshold();
    command_type_.log_threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  command_type_.log_threshold_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.Command.log_threshold)
}
#endif
void Command::set_log_threshold(const char* value) {
  if (!has_log_threshold()) {
    clear_command_type();
    set_has_log_threshold();
    command_type_.log_threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  command_type_.log_threshold_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.Command.log_threshold)
}
void Command::set_log_threshold(const char* value, size_t size) {
  if (!has_log_threshold()) {
    clear_command_type();
    set_has_log_threshold();
    command_type_.log_threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  command_type_.log_threshold_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.Command.log_threshold)
}
::std::string* Command::mutable_log_threshold() {
  if (!has_log_threshold()) {
    clear_command_type();
    set_has_log_threshold();
    command_type_.log_threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.Command.log_threshold)
  return command_type_.log_threshold_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Command::release_log_threshold() {
  // @@protoc_insertion_point(field_release:GstDebugger.Command.log_threshold)
  if (has_log_threshold()) {
    clear_has_command_type();
    return command_type_.log_threshold_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Command::set_allocated_log_threshold(::std::string* log_threshold) {
  if (!has_log_threshold()) {
    command_type_.log_threshold_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_command_type();
  if (log_threshold != NULL) {
    set_has_log_threshold();
    command_type_.log_threshold_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        log_threshold);
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.Command.log_threshold)
}

// optional bool entire_topology = 5;
bool Command::has_entire_topology() const {
  return command_type_case() == kEntireTopology;
}
void Command::set_has_entire_topology() {
  _oneof_case_[0] = kEntireTopology;
}
void Command::clear_entire_topology() {
  if (has_entire_topology()) {
    command_type_.entire_topology_ = false;
    clear_has_command_type();
  }
}
bool Command::entire_topology() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Command.entire_topology)
  if (has_entire_topology()) {
    return command_type_.entire_topology_;
  }
  return false;
}
void Command::set_entire_topology(bool value) {
  if (!has_entire_topology()) {
    clear_command_type();
    set_has_entire_topology();
  }
  command_type_.entire_topology_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.Command.entire_topology)
}

// optional .GstDebugger.PropertyRequest property = 6;
bool Command::has_property() const {
  return command_type_case() == kProperty;
}
void Command::set_has_property() {
  _oneof_case_[0] = kProperty;
}
void Command::clear_property() {
  if (has_property()) {
    delete command_type_.property_;
    clear_has_command_type();
  }
}
 const ::GstDebugger::PropertyRequest& Command::property() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Command.property)
  return has_property()
      ? *command_type_.property_
      : ::GstDebugger::PropertyRequest::default_instance();
}
::GstDebugger::PropertyRequest* Command::mutable_property() {
  if (!has_property()) {
    clear_command_type();
    set_has_property();
    command_type_.property_ = new ::GstDebugger::PropertyRequest;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.Command.property)
  return command_type_.property_;
}
::GstDebugger::PropertyRequest* Command::release_property() {
  // @@protoc_insertion_point(field_release:GstDebugger.Command.property)
  if (has_property()) {
    clear_has_command_type();
    ::GstDebugger::PropertyRequest* temp = command_type_.property_;
    command_type_.property_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_property(::GstDebugger::PropertyRequest* property) {
  clear_command_type();
  if (property) {
    set_has_property();
    command_type_.property_ = property;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.Command.property)
}

// optional .GstDebugger.PropertyValue property_set = 7;
bool Command::has_property_set() const {
  return command_type_case() == kPropertySet;
}
void Command::set_has_property_set() {
  _oneof_case_[0] = kPropertySet;
}
void Command::clear_property_set() {
  if (has_property_set()) {
    delete command_type_.property_set_;
    clear_has_command_type();
  }
}
 const ::GstDebugger::PropertyValue& Command::property_set() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Command.property_set)
  return has_property_set()
      ? *command_type_.property_set_
      : ::GstDebugger::PropertyValue::default_instance();
}
::GstDebugger::PropertyValue* Command::mutable_property_set() {
  if (!has_property_set()) {
    clear_command_type();
    set_has_property_set();
    command_type_.property_set_ = new ::GstDebugger::PropertyValue;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.Command.property_set)
  return command_type_.property_set_;
}
::GstDebugger::PropertyValue* Command::release_property_set() {
  // @@protoc_insertion_point(field_release:GstDebugger.Command.property_set)
  if (has_property_set()) {
    clear_has_command_type();
    ::GstDebugger::PropertyValue* temp = command_type_.property_set_;
    command_type_.property_set_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_property_set(::GstDebugger::PropertyValue* property_set) {
  clear_command_type();
  if (property_set) {
    set_has_property_set();
    command_type_.property_set_ = property_set;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.Command.property_set)
}

// optional string pad_dynamic_info = 8;
bool Command::has_pad_dynamic_info() const {
  return command_type_case() == kPadDynamicInfo;
}
void Command::set_has_pad_dynamic_info() {
  _oneof_case_[0] = kPadDynamicInfo;
}
void Command::clear_pad_dynamic_info() {
  if (has_pad_dynamic_info()) {
    command_type_.pad_dynamic_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_command_type();
  }
}
const ::std::string& Command::pad_dynamic_info() const {
  // @@protoc_insertion_point(field_get:GstDebugger.Command.pad_dynamic_info)
  if (has_pad_dynamic_info()) {
    return command_type_.pad_dynamic_info_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Command::set_pad_dynamic_info(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GstDebugger.Command.pad_dynamic_info)
  if (!has_pad_dynamic_info()) {
    clear_command_type();
    set_has_pad_dynamic_info();
    command_type_.pad_dynamic_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  command_type_.pad_dynamic_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.Command.pad_dynamic_info)
}
#if LANG_CXX11
void Command::set_pad_dynamic_info(::std::string&& value) {
  // @@protoc_insertion_point(field_set:GstDebugger.Command.pad_dynamic_info)
  if (!has_pad_dynamic_info()) {
    clear_command_type();
    set_has_pad_dynamic_info();
    command_type_.pad_dynamic_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  command_type_.pad_dynamic_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.Command.pad_dynamic_info)
}
#endif
void Command::set_pad_dynamic_info(const char* value) {
  if (!has_pad_dynamic_info()) {
    clear_command_type();
    set_has_pad_dynamic_info();
    command_type_.pad_dynamic_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  command_type_.pad_dynamic_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.Command.pad_dynamic_info)
}
void Command::set_pad_dynamic_info(const char* value, size_t size) {
  if (!has_pad_dynamic_info()) {
    clear_command_type();
    set_has_pad_dynamic_info();
    command_type_.pad_dynamic_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  command_type_.pad_dynamic_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.Command.pad_dynamic_info)
}
::std::string* Command::mutable_pad_dynamic_info() {
  if (!has_pad_dynamic_info()) {
    clear_command_type();
    set_has_pad_dynamic_info();
    command_type_.pad_dynamic_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.Command.pad_dynamic_info)
  return command_type_.pad_dynamic_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Command::release_pad_dynamic_info() {
  // @@protoc_insertion_point(field_release:GstDebugger.Command.pad_dynamic_info)
  if (has_pad_dynamic_info()) {
    clear_has_command_type();
    return command_type_.pad_dynamic_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Command::set_allocated_pad_dynamic_info(::std::string* pad_dynamic_info) {
  if (!has_pad_dynamic_info()) {
    command_type_.pad_dynamic_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_command_type();
  if (pad_dynamic_info != NULL) {
    set_has_pad_dynamic_info();
    command_type_.pad_dynamic_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        pad_dynamic_info);
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.Command.pad_dynamic_info)
}

bool Command::has_command_type() const {
  return command_type_case() != COMMAND_TYPE_NOT_SET;
}
void Command::clear_has_command_type() {
  _oneof_case_[0] = COMMAND_TYPE_NOT_SET;
}
Command::CommandTypeCase Command::command_type_case() const {
  return Command::CommandTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugCategories::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugCategories::DebugCategories()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.DebugCategories)
}
DebugCategories::DebugCategories(const DebugCategories& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      category_(from.category_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GstDebugger.DebugCategories)
}

void DebugCategories::SharedCtor() {
  _cached_size_ = 0;
}

DebugCategories::~DebugCategories() {
  // @@protoc_insertion_point(destructor:GstDebugger.DebugCategories)
  SharedDtor();
}

void DebugCategories::SharedDtor() {
}

void DebugCategories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugCategories::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[17].descriptor;
}

const DebugCategories& DebugCategories::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

DebugCategories* DebugCategories::New(::google::protobuf::Arena* arena) const {
  DebugCategories* n = new DebugCategories;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugCategories::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.DebugCategories)
  category_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugCategories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.DebugCategories)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string category = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category(this->category_size() - 1).data(),
            this->category(this->category_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.DebugCategories.category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.DebugCategories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.DebugCategories)
  return false;
#undef DO_
}

void DebugCategories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.DebugCategories)
  // repeated string category = 1;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category(i).data(), this->category(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.DebugCategories.category");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->category(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.DebugCategories)
}

::google::protobuf::uint8* DebugCategories::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.DebugCategories)
  // repeated string category = 1;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category(i).data(), this->category(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.DebugCategories.category");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->category(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.DebugCategories)
  return target;
}

size_t DebugCategories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.DebugCategories)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string category = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->category_size());
  for (int i = 0; i < this->category_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->category(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugCategories::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.DebugCategories)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugCategories* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugCategories>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.DebugCategories)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.DebugCategories)
    MergeFrom(*source);
  }
}

void DebugCategories::MergeFrom(const DebugCategories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.DebugCategories)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.MergeFrom(from.category_);
}

void DebugCategories::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.DebugCategories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugCategories::CopyFrom(const DebugCategories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.DebugCategories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugCategories::IsInitialized() const {
  return true;
}

void DebugCategories::Swap(DebugCategories* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugCategories::InternalSwap(DebugCategories* other) {
  category_.UnsafeArenaSwap(&other->category_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugCategories::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugCategories

// repeated string category = 1;
int DebugCategories::category_size() const {
  return category_.size();
}
void DebugCategories::clear_category() {
  category_.Clear();
}
const ::std::string& DebugCategories::category(int index) const {
  // @@protoc_insertion_point(field_get:GstDebugger.DebugCategories.category)
  return category_.Get(index);
}
::std::string* DebugCategories::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:GstDebugger.DebugCategories.category)
  return category_.Mutable(index);
}
void DebugCategories::set_category(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GstDebugger.DebugCategories.category)
  category_.Mutable(index)->assign(value);
}
void DebugCategories::set_category(int index, const char* value) {
  category_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GstDebugger.DebugCategories.category)
}
void DebugCategories::set_category(int index, const char* value, size_t size) {
  category_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.DebugCategories.category)
}
::std::string* DebugCategories::add_category() {
  // @@protoc_insertion_point(field_add_mutable:GstDebugger.DebugCategories.category)
  return category_.Add();
}
void DebugCategories::add_category(const ::std::string& value) {
  category_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GstDebugger.DebugCategories.category)
}
void DebugCategories::add_category(const char* value) {
  category_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GstDebugger.DebugCategories.category)
}
void DebugCategories::add_category(const char* value, size_t size) {
  category_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GstDebugger.DebugCategories.category)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebugCategories::category() const {
  // @@protoc_insertion_point(field_list:GstDebugger.DebugCategories.category)
  return category_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DebugCategories::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:GstDebugger.DebugCategories.category)
  return &category_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogInfo::kLevelFieldNumber;
const int LogInfo::kCategoryFieldNumber;
const int LogInfo::kFileFieldNumber;
const int LogInfo::kFunctionFieldNumber;
const int LogInfo::kLineFieldNumber;
const int LogInfo::kObjectFieldNumber;
const int LogInfo::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogInfo::LogInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.LogInfo)
}
LogInfo::LogInfo(const LogInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_category()) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file()) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_function()) {
    function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_);
  }
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object()) {
    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&level_, &from.level_,
    reinterpret_cast<char*>(&line_) -
    reinterpret_cast<char*>(&level_) + sizeof(line_));
  // @@protoc_insertion_point(copy_constructor:GstDebugger.LogInfo)
}

void LogInfo::SharedCtor() {
  _cached_size_ = 0;
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, reinterpret_cast<char*>(&line_) -
    reinterpret_cast<char*>(&level_) + sizeof(line_));
}

LogInfo::~LogInfo() {
  // @@protoc_insertion_point(destructor:GstDebugger.LogInfo)
  SharedDtor();
}

void LogInfo::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogInfo::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[18].descriptor;
}

const LogInfo& LogInfo::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogInfo* LogInfo::New(::google::protobuf::Arena* arena) const {
  LogInfo* n = new LogInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.LogInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_category()) {
      GOOGLE_DCHECK(!category_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*category_.UnsafeRawStringPointer())->clear();
    }
    if (has_file()) {
      GOOGLE_DCHECK(!file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_.UnsafeRawStringPointer())->clear();
    }
    if (has_function()) {
      GOOGLE_DCHECK(!function_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*function_.UnsafeRawStringPointer())->clear();
    }
    if (has_object()) {
      GOOGLE_DCHECK(!object_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*object_.UnsafeRawStringPointer())->clear();
    }
    if (has_message()) {
      GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 96u) {
    ::memset(&level_, 0, reinterpret_cast<char*>(&line_) -
      reinterpret_cast<char*>(&level_) + sizeof(line_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.LogInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (tag == 8u) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string category = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.LogInfo.category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string file = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.LogInfo.file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string function = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.LogInfo.function");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 line = 5;
      case 5: {
        if (tag == 40u) {
          set_has_line();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string object = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->object().data(), this->object().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.LogInfo.object");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.LogInfo.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.LogInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.LogInfo)
  return false;
#undef DO_
}

void LogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.LogInfo)
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required string category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogInfo.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category(), output);
  }

  // required string file = 3;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogInfo.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file(), output);
  }

  // required string function = 4;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogInfo.function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->function(), output);
  }

  // required int32 line = 5;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->line(), output);
  }

  // required string object = 6;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogInfo.object");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->object(), output);
  }

  // required string message = 7;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogInfo.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.LogInfo)
}

::google::protobuf::uint8* LogInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.LogInfo)
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required string category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogInfo.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->category(), target);
  }

  // required string file = 3;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogInfo.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file(), target);
  }

  // required string function = 4;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogInfo.function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->function(), target);
  }

  // required int32 line = 5;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->line(), target);
  }

  // required string object = 6;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogInfo.object");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->object(), target);
  }

  // required string message = 7;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.LogInfo.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.LogInfo)
  return target;
}

size_t LogInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.LogInfo)
  size_t total_size = 0;

  if (has_category()) {
    // required string category = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  if (has_file()) {
    // required string file = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  if (has_function()) {
    // required string function = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->function());
  }

  if (has_object()) {
    // required string object = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object());
  }

  if (has_message()) {
    // required string message = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_line()) {
    // required int32 line = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line());
  }

  return total_size;
}
size_t LogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.LogInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string category = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());

    // required string file = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());

    // required string function = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->function());

    // required string object = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object());

    // required string message = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 line = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.LogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LogInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.LogInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.LogInfo)
    MergeFrom(*source);
  }
}

void LogInfo::MergeFrom(const LogInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.LogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_category()) {
      set_has_category();
      category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
    if (from.has_file()) {
      set_has_file();
      file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
    }
    if (from.has_function()) {
      set_has_function();
      function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_);
    }
    if (from.has_object()) {
      set_has_object();
      object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
  }
}

void LogInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.LogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogInfo::CopyFrom(const LogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.LogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void LogInfo::Swap(LogInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogInfo::InternalSwap(LogInfo* other) {
  category_.Swap(&other->category_);
  file_.Swap(&other->file_);
  function_.Swap(&other->function_);
  object_.Swap(&other->object_);
  message_.Swap(&other->message_);
  std::swap(level_, other->level_);
  std::swap(line_, other->line_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogInfo::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogInfo

// required int32 level = 1;
bool LogInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LogInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
void LogInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
void LogInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 LogInfo::level() const {
  // @@protoc_insertion_point(field_get:GstDebugger.LogInfo.level)
  return level_;
}
void LogInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.LogInfo.level)
}

// required string category = 2;
bool LogInfo::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogInfo::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
void LogInfo::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogInfo::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
const ::std::string& LogInfo::category() const {
  // @@protoc_insertion_point(field_get:GstDebugger.LogInfo.category)
  return category_.GetNoArena();
}
void LogInfo::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.LogInfo.category)
}
#if LANG_CXX11
void LogInfo::set_category(::std::string&& value) {
  set_has_category();
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.LogInfo.category)
}
#endif
void LogInfo::set_category(const char* value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.LogInfo.category)
}
void LogInfo::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.LogInfo.category)
}
::std::string* LogInfo::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:GstDebugger.LogInfo.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogInfo::release_category() {
  // @@protoc_insertion_point(field_release:GstDebugger.LogInfo.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogInfo::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.LogInfo.category)
}

// required string file = 3;
bool LogInfo::has_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogInfo::set_has_file() {
  _has_bits_[0] |= 0x00000002u;
}
void LogInfo::clear_has_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogInfo::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file();
}
const ::std::string& LogInfo::file() const {
  // @@protoc_insertion_point(field_get:GstDebugger.LogInfo.file)
  return file_.GetNoArena();
}
void LogInfo::set_file(const ::std::string& value) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.LogInfo.file)
}
#if LANG_CXX11
void LogInfo::set_file(::std::string&& value) {
  set_has_file();
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.LogInfo.file)
}
#endif
void LogInfo::set_file(const char* value) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.LogInfo.file)
}
void LogInfo::set_file(const char* value, size_t size) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.LogInfo.file)
}
::std::string* LogInfo::mutable_file() {
  set_has_file();
  // @@protoc_insertion_point(field_mutable:GstDebugger.LogInfo.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogInfo::release_file() {
  // @@protoc_insertion_point(field_release:GstDebugger.LogInfo.file)
  clear_has_file();
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogInfo::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    set_has_file();
  } else {
    clear_has_file();
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.LogInfo.file)
}

// required string function = 4;
bool LogInfo::has_function() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogInfo::set_has_function() {
  _has_bits_[0] |= 0x00000004u;
}
void LogInfo::clear_has_function() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogInfo::clear_function() {
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_function();
}
const ::std::string& LogInfo::function() const {
  // @@protoc_insertion_point(field_get:GstDebugger.LogInfo.function)
  return function_.GetNoArena();
}
void LogInfo::set_function(const ::std::string& value) {
  set_has_function();
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.LogInfo.function)
}
#if LANG_CXX11
void LogInfo::set_function(::std::string&& value) {
  set_has_function();
  function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.LogInfo.function)
}
#endif
void LogInfo::set_function(const char* value) {
  set_has_function();
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.LogInfo.function)
}
void LogInfo::set_function(const char* value, size_t size) {
  set_has_function();
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.LogInfo.function)
}
::std::string* LogInfo::mutable_function() {
  set_has_function();
  // @@protoc_insertion_point(field_mutable:GstDebugger.LogInfo.function)
  return function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogInfo::release_function() {
  // @@protoc_insertion_point(field_release:GstDebugger.LogInfo.function)
  clear_has_function();
  return function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogInfo::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    set_has_function();
  } else {
    clear_has_function();
  }
  function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.LogInfo.function)
}

// required int32 line = 5;
bool LogInfo::has_line() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LogInfo::set_has_line() {
  _has_bits_[0] |= 0x00000040u;
}
void LogInfo::clear_has_line() {
  _has_bits_[0] &= ~0x00000040u;
}
void LogInfo::clear_line() {
  line_ = 0;
  clear_has_line();
}
::google::protobuf::int32 LogInfo::line() const {
  // @@protoc_insertion_point(field_get:GstDebugger.LogInfo.line)
  return line_;
}
void LogInfo::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.LogInfo.line)
}

// required string object = 6;
bool LogInfo::has_object() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogInfo::set_has_object() {
  _has_bits_[0] |= 0x00000008u;
}
void LogInfo::clear_has_object() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogInfo::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object();
}
const ::std::string& LogInfo::object() const {
  // @@protoc_insertion_point(field_get:GstDebugger.LogInfo.object)
  return object_.GetNoArena();
}
void LogInfo::set_object(const ::std::string& value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.LogInfo.object)
}
#if LANG_CXX11
void LogInfo::set_object(::std::string&& value) {
  set_has_object();
  object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.LogInfo.object)
}
#endif
void LogInfo::set_object(const char* value) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.LogInfo.object)
}
void LogInfo::set_object(const char* value, size_t size) {
  set_has_object();
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.LogInfo.object)
}
::std::string* LogInfo::mutable_object() {
  set_has_object();
  // @@protoc_insertion_point(field_mutable:GstDebugger.LogInfo.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogInfo::release_object() {
  // @@protoc_insertion_point(field_release:GstDebugger.LogInfo.object)
  clear_has_object();
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogInfo::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    set_has_object();
  } else {
    clear_has_object();
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.LogInfo.object)
}

// required string message = 7;
bool LogInfo::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogInfo::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
void LogInfo::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogInfo::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& LogInfo::message() const {
  // @@protoc_insertion_point(field_get:GstDebugger.LogInfo.message)
  return message_.GetNoArena();
}
void LogInfo::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.LogInfo.message)
}
#if LANG_CXX11
void LogInfo::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.LogInfo.message)
}
#endif
void LogInfo::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.LogInfo.message)
}
void LogInfo::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.LogInfo.message)
}
::std::string* LogInfo::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:GstDebugger.LogInfo.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogInfo::release_message() {
  // @@protoc_insertion_point(field_release:GstDebugger.LogInfo.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogInfo::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.LogInfo.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnumFlagsValue::kNameFieldNumber;
const int EnumFlagsValue::kValueFieldNumber;
const int EnumFlagsValue::kNickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnumFlagsValue::EnumFlagsValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.EnumFlagsValue)
}
EnumFlagsValue::EnumFlagsValue(const EnumFlagsValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:GstDebugger.EnumFlagsValue)
}

void EnumFlagsValue::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

EnumFlagsValue::~EnumFlagsValue() {
  // @@protoc_insertion_point(destructor:GstDebugger.EnumFlagsValue)
  SharedDtor();
}

void EnumFlagsValue::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnumFlagsValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnumFlagsValue::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[19].descriptor;
}

const EnumFlagsValue& EnumFlagsValue::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnumFlagsValue* EnumFlagsValue::New(::google::protobuf::Arena* arena) const {
  EnumFlagsValue* n = new EnumFlagsValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnumFlagsValue::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.EnumFlagsValue)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_nick()) {
      GOOGLE_DCHECK(!nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nick_.UnsafeRawStringPointer())->clear();
    }
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnumFlagsValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.EnumFlagsValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.EnumFlagsValue.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (tag == 16u) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string nick = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.EnumFlagsValue.nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.EnumFlagsValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.EnumFlagsValue)
  return false;
#undef DO_
}

void EnumFlagsValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.EnumFlagsValue)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.EnumFlagsValue.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // required string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.EnumFlagsValue.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.EnumFlagsValue)
}

::google::protobuf::uint8* EnumFlagsValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.EnumFlagsValue)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.EnumFlagsValue.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // required string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.EnumFlagsValue.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.EnumFlagsValue)
  return target;
}

size_t EnumFlagsValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.EnumFlagsValue)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_nick()) {
    // required string nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  if (has_value()) {
    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  return total_size;
}
size_t EnumFlagsValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.EnumFlagsValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());

    // required int32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnumFlagsValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.EnumFlagsValue)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumFlagsValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnumFlagsValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.EnumFlagsValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.EnumFlagsValue)
    MergeFrom(*source);
  }
}

void EnumFlagsValue::MergeFrom(const EnumFlagsValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.EnumFlagsValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_nick()) {
      set_has_nick();
      nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void EnumFlagsValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.EnumFlagsValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumFlagsValue::CopyFrom(const EnumFlagsValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.EnumFlagsValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumFlagsValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void EnumFlagsValue::Swap(EnumFlagsValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnumFlagsValue::InternalSwap(EnumFlagsValue* other) {
  name_.Swap(&other->name_);
  nick_.Swap(&other->nick_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnumFlagsValue::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnumFlagsValue

// required string name = 1;
bool EnumFlagsValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnumFlagsValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void EnumFlagsValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnumFlagsValue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& EnumFlagsValue::name() const {
  // @@protoc_insertion_point(field_get:GstDebugger.EnumFlagsValue.name)
  return name_.GetNoArena();
}
void EnumFlagsValue::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.EnumFlagsValue.name)
}
#if LANG_CXX11
void EnumFlagsValue::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.EnumFlagsValue.name)
}
#endif
void EnumFlagsValue::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.EnumFlagsValue.name)
}
void EnumFlagsValue::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.EnumFlagsValue.name)
}
::std::string* EnumFlagsValue::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:GstDebugger.EnumFlagsValue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnumFlagsValue::release_name() {
  // @@protoc_insertion_point(field_release:GstDebugger.EnumFlagsValue.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnumFlagsValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.EnumFlagsValue.name)
}

// required int32 value = 2;
bool EnumFlagsValue::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EnumFlagsValue::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void EnumFlagsValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void EnumFlagsValue::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 EnumFlagsValue::value() const {
  // @@protoc_insertion_point(field_get:GstDebugger.EnumFlagsValue.value)
  return value_;
}
void EnumFlagsValue::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.EnumFlagsValue.value)
}

// required string nick = 3;
bool EnumFlagsValue::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnumFlagsValue::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
void EnumFlagsValue::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnumFlagsValue::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick();
}
const ::std::string& EnumFlagsValue::nick() const {
  // @@protoc_insertion_point(field_get:GstDebugger.EnumFlagsValue.nick)
  return nick_.GetNoArena();
}
void EnumFlagsValue::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.EnumFlagsValue.nick)
}
#if LANG_CXX11
void EnumFlagsValue::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.EnumFlagsValue.nick)
}
#endif
void EnumFlagsValue::set_nick(const char* value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.EnumFlagsValue.nick)
}
void EnumFlagsValue::set_nick(const char* value, size_t size) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.EnumFlagsValue.nick)
}
::std::string* EnumFlagsValue::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:GstDebugger.EnumFlagsValue.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnumFlagsValue::release_nick() {
  // @@protoc_insertion_point(field_release:GstDebugger.EnumFlagsValue.nick)
  clear_has_nick();
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnumFlagsValue::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.EnumFlagsValue.nick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnumFlagsType::kTypeNameFieldNumber;
const int EnumFlagsType::kKindFieldNumber;
const int EnumFlagsType::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnumFlagsType::EnumFlagsType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.EnumFlagsType)
}
EnumFlagsType::EnumFlagsType(const EnumFlagsType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type_name()) {
    type_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_name_);
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:GstDebugger.EnumFlagsType)
}

void EnumFlagsType::SharedCtor() {
  _cached_size_ = 0;
  type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
}

EnumFlagsType::~EnumFlagsType() {
  // @@protoc_insertion_point(destructor:GstDebugger.EnumFlagsType)
  SharedDtor();
}

void EnumFlagsType::SharedDtor() {
  type_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EnumFlagsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnumFlagsType::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[20].descriptor;
}

const EnumFlagsType& EnumFlagsType::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnumFlagsType* EnumFlagsType::New(::google::protobuf::Arena* arena) const {
  EnumFlagsType* n = new EnumFlagsType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnumFlagsType::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.EnumFlagsType)
  values_.Clear();
  if (has_type_name()) {
    GOOGLE_DCHECK(!type_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*type_name_.UnsafeRawStringPointer())->clear();
  }
  kind_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnumFlagsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.EnumFlagsType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.EnumFlagsType.type_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GstDebugger.EnumFlagsType.EnumFlagsKind kind = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GstDebugger::EnumFlagsType_EnumFlagsKind_IsValid(value)) {
            set_kind(static_cast< ::GstDebugger::EnumFlagsType_EnumFlagsKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GstDebugger.EnumFlagsValue values = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.EnumFlagsType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.EnumFlagsType)
  return false;
#undef DO_
}

void EnumFlagsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.EnumFlagsType)
  // required string type_name = 1;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.EnumFlagsType.type_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type_name(), output);
  }

  // required .GstDebugger.EnumFlagsType.EnumFlagsKind kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  // repeated .GstDebugger.EnumFlagsValue values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.EnumFlagsType)
}

::google::protobuf::uint8* EnumFlagsType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.EnumFlagsType)
  // required string type_name = 1;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.EnumFlagsType.type_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type_name(), target);
  }

  // required .GstDebugger.EnumFlagsType.EnumFlagsKind kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  // repeated .GstDebugger.EnumFlagsValue values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->values(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.EnumFlagsType)
  return target;
}

size_t EnumFlagsType::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.EnumFlagsType)
  size_t total_size = 0;

  if (has_type_name()) {
    // required string type_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_name());
  }

  if (has_kind()) {
    // required .GstDebugger.EnumFlagsType.EnumFlagsKind kind = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  return total_size;
}
size_t EnumFlagsType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.EnumFlagsType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string type_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_name());

    // required .GstDebugger.EnumFlagsType.EnumFlagsKind kind = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .GstDebugger.EnumFlagsValue values = 3;
  {
    unsigned int count = this->values_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnumFlagsType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.EnumFlagsType)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumFlagsType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnumFlagsType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.EnumFlagsType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.EnumFlagsType)
    MergeFrom(*source);
  }
}

void EnumFlagsType::MergeFrom(const EnumFlagsType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.EnumFlagsType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_type_name()) {
      set_has_type_name();
      type_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_name_);
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
}

void EnumFlagsType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.EnumFlagsType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumFlagsType::CopyFrom(const EnumFlagsType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.EnumFlagsType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumFlagsType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->values())) return false;
  return true;
}

void EnumFlagsType::Swap(EnumFlagsType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnumFlagsType::InternalSwap(EnumFlagsType* other) {
  values_.UnsafeArenaSwap(&other->values_);
  type_name_.Swap(&other->type_name_);
  std::swap(kind_, other->kind_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnumFlagsType::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnumFlagsType

// required string type_name = 1;
bool EnumFlagsType::has_type_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnumFlagsType::set_has_type_name() {
  _has_bits_[0] |= 0x00000001u;
}
void EnumFlagsType::clear_has_type_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnumFlagsType::clear_type_name() {
  type_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type_name();
}
const ::std::string& EnumFlagsType::type_name() const {
  // @@protoc_insertion_point(field_get:GstDebugger.EnumFlagsType.type_name)
  return type_name_.GetNoArena();
}
void EnumFlagsType::set_type_name(const ::std::string& value) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.EnumFlagsType.type_name)
}
#if LANG_CXX11
void EnumFlagsType::set_type_name(::std::string&& value) {
  set_has_type_name();
  type_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.EnumFlagsType.type_name)
}
#endif
void EnumFlagsType::set_type_name(const char* value) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.EnumFlagsType.type_name)
}
void EnumFlagsType::set_type_name(const char* value, size_t size) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.EnumFlagsType.type_name)
}
::std::string* EnumFlagsType::mutable_type_name() {
  set_has_type_name();
  // @@protoc_insertion_point(field_mutable:GstDebugger.EnumFlagsType.type_name)
  return type_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EnumFlagsType::release_type_name() {
  // @@protoc_insertion_point(field_release:GstDebugger.EnumFlagsType.type_name)
  clear_has_type_name();
  return type_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EnumFlagsType::set_allocated_type_name(::std::string* type_name) {
  if (type_name != NULL) {
    set_has_type_name();
  } else {
    clear_has_type_name();
  }
  type_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_name);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.EnumFlagsType.type_name)
}

// required .GstDebugger.EnumFlagsType.EnumFlagsKind kind = 2;
bool EnumFlagsType::has_kind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnumFlagsType::set_has_kind() {
  _has_bits_[0] |= 0x00000002u;
}
void EnumFlagsType::clear_has_kind() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnumFlagsType::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
::GstDebugger::EnumFlagsType_EnumFlagsKind EnumFlagsType::kind() const {
  // @@protoc_insertion_point(field_get:GstDebugger.EnumFlagsType.kind)
  return static_cast< ::GstDebugger::EnumFlagsType_EnumFlagsKind >(kind_);
}
void EnumFlagsType::set_kind(::GstDebugger::EnumFlagsType_EnumFlagsKind value) {
  assert(::GstDebugger::EnumFlagsType_EnumFlagsKind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.EnumFlagsType.kind)
}

// repeated .GstDebugger.EnumFlagsValue values = 3;
int EnumFlagsType::values_size() const {
  return values_.size();
}
void EnumFlagsType::clear_values() {
  values_.Clear();
}
const ::GstDebugger::EnumFlagsValue& EnumFlagsType::values(int index) const {
  // @@protoc_insertion_point(field_get:GstDebugger.EnumFlagsType.values)
  return values_.Get(index);
}
::GstDebugger::EnumFlagsValue* EnumFlagsType::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:GstDebugger.EnumFlagsType.values)
  return values_.Mutable(index);
}
::GstDebugger::EnumFlagsValue* EnumFlagsType::add_values() {
  // @@protoc_insertion_point(field_add:GstDebugger.EnumFlagsType.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::GstDebugger::EnumFlagsValue >*
EnumFlagsType::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:GstDebugger.EnumFlagsType.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::GstDebugger::EnumFlagsValue >&
EnumFlagsType::values() const {
  // @@protoc_insertion_point(field_list:GstDebugger.EnumFlagsType.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FactoryMeta::kKeyFieldNumber;
const int FactoryMeta::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FactoryMeta::FactoryMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.FactoryMeta)
}
FactoryMeta::FactoryMeta(const FactoryMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.FactoryMeta)
}

void FactoryMeta::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FactoryMeta::~FactoryMeta() {
  // @@protoc_insertion_point(destructor:GstDebugger.FactoryMeta)
  SharedDtor();
}

void FactoryMeta::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FactoryMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactoryMeta::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[21].descriptor;
}

const FactoryMeta& FactoryMeta::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

FactoryMeta* FactoryMeta::New(::google::protobuf::Arena* arena) const {
  FactoryMeta* n = new FactoryMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FactoryMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.FactoryMeta)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FactoryMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.FactoryMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.FactoryMeta.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.FactoryMeta.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.FactoryMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.FactoryMeta)
  return false;
#undef DO_
}

void FactoryMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.FactoryMeta)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.FactoryMeta.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.FactoryMeta.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.FactoryMeta)
}

::google::protobuf::uint8* FactoryMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.FactoryMeta)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.FactoryMeta.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.FactoryMeta.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.FactoryMeta)
  return target;
}

size_t FactoryMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.FactoryMeta)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t FactoryMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.FactoryMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactoryMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.FactoryMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const FactoryMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FactoryMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.FactoryMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.FactoryMeta)
    MergeFrom(*source);
  }
}

void FactoryMeta::MergeFrom(const FactoryMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.FactoryMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void FactoryMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.FactoryMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactoryMeta::CopyFrom(const FactoryMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.FactoryMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactoryMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FactoryMeta::Swap(FactoryMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FactoryMeta::InternalSwap(FactoryMeta* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FactoryMeta::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FactoryMeta

// required string key = 1;
bool FactoryMeta::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FactoryMeta::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void FactoryMeta::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void FactoryMeta::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& FactoryMeta::key() const {
  // @@protoc_insertion_point(field_get:GstDebugger.FactoryMeta.key)
  return key_.GetNoArena();
}
void FactoryMeta::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.FactoryMeta.key)
}
#if LANG_CXX11
void FactoryMeta::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.FactoryMeta.key)
}
#endif
void FactoryMeta::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.FactoryMeta.key)
}
void FactoryMeta::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.FactoryMeta.key)
}
::std::string* FactoryMeta::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:GstDebugger.FactoryMeta.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FactoryMeta::release_key() {
  // @@protoc_insertion_point(field_release:GstDebugger.FactoryMeta.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FactoryMeta::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.FactoryMeta.key)
}

// required string value = 2;
bool FactoryMeta::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FactoryMeta::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void FactoryMeta::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void FactoryMeta::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& FactoryMeta::value() const {
  // @@protoc_insertion_point(field_get:GstDebugger.FactoryMeta.value)
  return value_.GetNoArena();
}
void FactoryMeta::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.FactoryMeta.value)
}
#if LANG_CXX11
void FactoryMeta::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.FactoryMeta.value)
}
#endif
void FactoryMeta::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.FactoryMeta.value)
}
void FactoryMeta::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.FactoryMeta.value)
}
::std::string* FactoryMeta::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:GstDebugger.FactoryMeta.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FactoryMeta::release_value() {
  // @@protoc_insertion_point(field_release:GstDebugger.FactoryMeta.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FactoryMeta::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.FactoryMeta.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PadTemplate::kNameTemplateFieldNumber;
const int PadTemplate::kDirectionFieldNumber;
const int PadTemplate::kPresenceFieldNumber;
const int PadTemplate::kCapsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PadTemplate::PadTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.PadTemplate)
}
PadTemplate::PadTemplate(const PadTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name_template()) {
    name_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_template_);
  }
  caps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_caps()) {
    caps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caps_);
  }
  ::memcpy(&direction_, &from.direction_,
    reinterpret_cast<char*>(&presence_) -
    reinterpret_cast<char*>(&direction_) + sizeof(presence_));
  // @@protoc_insertion_point(copy_constructor:GstDebugger.PadTemplate)
}

void PadTemplate::SharedCtor() {
  _cached_size_ = 0;
  name_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, reinterpret_cast<char*>(&presence_) -
    reinterpret_cast<char*>(&direction_) + sizeof(presence_));
}

PadTemplate::~PadTemplate() {
  // @@protoc_insertion_point(destructor:GstDebugger.PadTemplate)
  SharedDtor();
}

void PadTemplate::SharedDtor() {
  name_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caps_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PadTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PadTemplate::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[22].descriptor;
}

const PadTemplate& PadTemplate::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

PadTemplate* PadTemplate::New(::google::protobuf::Arena* arena) const {
  PadTemplate* n = new PadTemplate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PadTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.PadTemplate)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name_template()) {
      GOOGLE_DCHECK(!name_template_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_template_.UnsafeRawStringPointer())->clear();
    }
    if (has_caps()) {
      GOOGLE_DCHECK(!caps_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*caps_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&direction_, 0, reinterpret_cast<char*>(&presence_) -
      reinterpret_cast<char*>(&direction_) + sizeof(presence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PadTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.PadTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name_template = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_template()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_template().data(), this->name_template().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PadTemplate.name_template");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 direction = 2;
      case 2: {
        if (tag == 16u) {
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 presence = 3;
      case 3: {
        if (tag == 24u) {
          set_has_presence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string caps = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caps().data(), this->caps().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PadTemplate.caps");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.PadTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.PadTemplate)
  return false;
#undef DO_
}

void PadTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.PadTemplate)
  // required string name_template = 1;
  if (has_name_template()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_template().data(), this->name_template().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadTemplate.name_template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name_template(), output);
  }

  // required int32 direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->direction(), output);
  }

  // required int32 presence = 3;
  if (has_presence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->presence(), output);
  }

  // required string caps = 4;
  if (has_caps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caps().data(), this->caps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadTemplate.caps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->caps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.PadTemplate)
}

::google::protobuf::uint8* PadTemplate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.PadTemplate)
  // required string name_template = 1;
  if (has_name_template()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_template().data(), this->name_template().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadTemplate.name_template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name_template(), target);
  }

  // required int32 direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->direction(), target);
  }

  // required int32 presence = 3;
  if (has_presence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->presence(), target);
  }

  // required string caps = 4;
  if (has_caps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caps().data(), this->caps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadTemplate.caps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->caps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.PadTemplate)
  return target;
}

size_t PadTemplate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.PadTemplate)
  size_t total_size = 0;

  if (has_name_template()) {
    // required string name_template = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name_template());
  }

  if (has_caps()) {
    // required string caps = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->caps());
  }

  if (has_direction()) {
    // required int32 direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  if (has_presence()) {
    // required int32 presence = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->presence());
  }

  return total_size;
}
size_t PadTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.PadTemplate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name_template = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name_template());

    // required string caps = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->caps());

    // required int32 direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());

    // required int32 presence = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->presence());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PadTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.PadTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const PadTemplate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PadTemplate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.PadTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.PadTemplate)
    MergeFrom(*source);
  }
}

void PadTemplate::MergeFrom(const PadTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.PadTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_name_template()) {
      set_has_name_template();
      name_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_template_);
    }
    if (from.has_caps()) {
      set_has_caps();
      caps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caps_);
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_presence()) {
      set_presence(from.presence());
    }
  }
}

void PadTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.PadTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PadTemplate::CopyFrom(const PadTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.PadTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PadTemplate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void PadTemplate::Swap(PadTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PadTemplate::InternalSwap(PadTemplate* other) {
  name_template_.Swap(&other->name_template_);
  caps_.Swap(&other->caps_);
  std::swap(direction_, other->direction_);
  std::swap(presence_, other->presence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PadTemplate::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PadTemplate

// required string name_template = 1;
bool PadTemplate::has_name_template() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PadTemplate::set_has_name_template() {
  _has_bits_[0] |= 0x00000001u;
}
void PadTemplate::clear_has_name_template() {
  _has_bits_[0] &= ~0x00000001u;
}
void PadTemplate::clear_name_template() {
  name_template_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_template();
}
const ::std::string& PadTemplate::name_template() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PadTemplate.name_template)
  return name_template_.GetNoArena();
}
void PadTemplate::set_name_template(const ::std::string& value) {
  set_has_name_template();
  name_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PadTemplate.name_template)
}
#if LANG_CXX11
void PadTemplate::set_name_template(::std::string&& value) {
  set_has_name_template();
  name_template_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PadTemplate.name_template)
}
#endif
void PadTemplate::set_name_template(const char* value) {
  set_has_name_template();
  name_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PadTemplate.name_template)
}
void PadTemplate::set_name_template(const char* value, size_t size) {
  set_has_name_template();
  name_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PadTemplate.name_template)
}
::std::string* PadTemplate::mutable_name_template() {
  set_has_name_template();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PadTemplate.name_template)
  return name_template_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PadTemplate::release_name_template() {
  // @@protoc_insertion_point(field_release:GstDebugger.PadTemplate.name_template)
  clear_has_name_template();
  return name_template_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PadTemplate::set_allocated_name_template(::std::string* name_template) {
  if (name_template != NULL) {
    set_has_name_template();
  } else {
    clear_has_name_template();
  }
  name_template_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_template);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PadTemplate.name_template)
}

// required int32 direction = 2;
bool PadTemplate::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PadTemplate::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void PadTemplate::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void PadTemplate::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
::google::protobuf::int32 PadTemplate::direction() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PadTemplate.direction)
  return direction_;
}
void PadTemplate::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.PadTemplate.direction)
}

// required int32 presence = 3;
bool PadTemplate::has_presence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PadTemplate::set_has_presence() {
  _has_bits_[0] |= 0x00000008u;
}
void PadTemplate::clear_has_presence() {
  _has_bits_[0] &= ~0x00000008u;
}
void PadTemplate::clear_presence() {
  presence_ = 0;
  clear_has_presence();
}
::google::protobuf::int32 PadTemplate::presence() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PadTemplate.presence)
  return presence_;
}
void PadTemplate::set_presence(::google::protobuf::int32 value) {
  set_has_presence();
  presence_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.PadTemplate.presence)
}

// required string caps = 4;
bool PadTemplate::has_caps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PadTemplate::set_has_caps() {
  _has_bits_[0] |= 0x00000002u;
}
void PadTemplate::clear_has_caps() {
  _has_bits_[0] &= ~0x00000002u;
}
void PadTemplate::clear_caps() {
  caps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caps();
}
const ::std::string& PadTemplate::caps() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PadTemplate.caps)
  return caps_.GetNoArena();
}
void PadTemplate::set_caps(const ::std::string& value) {
  set_has_caps();
  caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PadTemplate.caps)
}
#if LANG_CXX11
void PadTemplate::set_caps(::std::string&& value) {
  set_has_caps();
  caps_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PadTemplate.caps)
}
#endif
void PadTemplate::set_caps(const char* value) {
  set_has_caps();
  caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PadTemplate.caps)
}
void PadTemplate::set_caps(const char* value, size_t size) {
  set_has_caps();
  caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PadTemplate.caps)
}
::std::string* PadTemplate::mutable_caps() {
  set_has_caps();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PadTemplate.caps)
  return caps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PadTemplate::release_caps() {
  // @@protoc_insertion_point(field_release:GstDebugger.PadTemplate.caps)
  clear_has_caps();
  return caps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PadTemplate::set_allocated_caps(::std::string* caps) {
  if (caps != NULL) {
    set_has_caps();
  } else {
    clear_has_caps();
  }
  caps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caps);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PadTemplate.caps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FactoryType::kNameFieldNumber;
const int FactoryType::kMetadataFieldNumber;
const int FactoryType::kTemplatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FactoryType::FactoryType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.FactoryType)
}
FactoryType::FactoryType(const FactoryType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      metadata_(from.metadata_),
      templates_(from.templates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.FactoryType)
}

void FactoryType::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FactoryType::~FactoryType() {
  // @@protoc_insertion_point(destructor:GstDebugger.FactoryType)
  SharedDtor();
}

void FactoryType::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FactoryType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactoryType::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[23].descriptor;
}

const FactoryType& FactoryType::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

FactoryType* FactoryType::New(::google::protobuf::Arena* arena) const {
  FactoryType* n = new FactoryType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FactoryType::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.FactoryType)
  metadata_.Clear();
  templates_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FactoryType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.FactoryType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.FactoryType.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GstDebugger.FactoryMeta metadata = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .GstDebugger.PadTemplate templates = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_templates()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.FactoryType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.FactoryType)
  return false;
#undef DO_
}

void FactoryType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.FactoryType)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.FactoryType.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .GstDebugger.FactoryMeta metadata = 2;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->metadata(i), output);
  }

  // repeated .GstDebugger.PadTemplate templates = 3;
  for (unsigned int i = 0, n = this->templates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->templates(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.FactoryType)
}

::google::protobuf::uint8* FactoryType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.FactoryType)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.FactoryType.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .GstDebugger.FactoryMeta metadata = 2;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->metadata(i), false, target);
  }

  // repeated .GstDebugger.PadTemplate templates = 3;
  for (unsigned int i = 0, n = this->templates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->templates(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.FactoryType)
  return target;
}

size_t FactoryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.FactoryType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated .GstDebugger.FactoryMeta metadata = 2;
  {
    unsigned int count = this->metadata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata(i));
    }
  }

  // repeated .GstDebugger.PadTemplate templates = 3;
  {
    unsigned int count = this->templates_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->templates(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactoryType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.FactoryType)
  GOOGLE_DCHECK_NE(&from, this);
  const FactoryType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FactoryType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.FactoryType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.FactoryType)
    MergeFrom(*source);
  }
}

void FactoryType::MergeFrom(const FactoryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.FactoryType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  templates_.MergeFrom(from.templates_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FactoryType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.FactoryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactoryType::CopyFrom(const FactoryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.FactoryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactoryType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->metadata())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->templates())) return false;
  return true;
}

void FactoryType::Swap(FactoryType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FactoryType::InternalSwap(FactoryType* other) {
  metadata_.UnsafeArenaSwap(&other->metadata_);
  templates_.UnsafeArenaSwap(&other->templates_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FactoryType::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FactoryType

// required string name = 1;
bool FactoryType::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FactoryType::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FactoryType::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FactoryType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& FactoryType::name() const {
  // @@protoc_insertion_point(field_get:GstDebugger.FactoryType.name)
  return name_.GetNoArena();
}
void FactoryType::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.FactoryType.name)
}
#if LANG_CXX11
void FactoryType::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.FactoryType.name)
}
#endif
void FactoryType::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.FactoryType.name)
}
void FactoryType::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.FactoryType.name)
}
::std::string* FactoryType::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:GstDebugger.FactoryType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FactoryType::release_name() {
  // @@protoc_insertion_point(field_release:GstDebugger.FactoryType.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FactoryType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.FactoryType.name)
}

// repeated .GstDebugger.FactoryMeta metadata = 2;
int FactoryType::metadata_size() const {
  return metadata_.size();
}
void FactoryType::clear_metadata() {
  metadata_.Clear();
}
const ::GstDebugger::FactoryMeta& FactoryType::metadata(int index) const {
  // @@protoc_insertion_point(field_get:GstDebugger.FactoryType.metadata)
  return metadata_.Get(index);
}
::GstDebugger::FactoryMeta* FactoryType::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:GstDebugger.FactoryType.metadata)
  return metadata_.Mutable(index);
}
::GstDebugger::FactoryMeta* FactoryType::add_metadata() {
  // @@protoc_insertion_point(field_add:GstDebugger.FactoryType.metadata)
  return metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::GstDebugger::FactoryMeta >*
FactoryType::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:GstDebugger.FactoryType.metadata)
  return &metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::GstDebugger::FactoryMeta >&
FactoryType::metadata() const {
  // @@protoc_insertion_point(field_list:GstDebugger.FactoryType.metadata)
  return metadata_;
}

// repeated .GstDebugger.PadTemplate templates = 3;
int FactoryType::templates_size() const {
  return templates_.size();
}
void FactoryType::clear_templates() {
  templates_.Clear();
}
const ::GstDebugger::PadTemplate& FactoryType::templates(int index) const {
  // @@protoc_insertion_point(field_get:GstDebugger.FactoryType.templates)
  return templates_.Get(index);
}
::GstDebugger::PadTemplate* FactoryType::mutable_templates(int index) {
  // @@protoc_insertion_point(field_mutable:GstDebugger.FactoryType.templates)
  return templates_.Mutable(index);
}
::GstDebugger::PadTemplate* FactoryType::add_templates() {
  // @@protoc_insertion_point(field_add:GstDebugger.FactoryType.templates)
  return templates_.Add();
}
::google::protobuf::RepeatedPtrField< ::GstDebugger::PadTemplate >*
FactoryType::mutable_templates() {
  // @@protoc_insertion_point(field_mutable_list:GstDebugger.FactoryType.templates)
  return &templates_;
}
const ::google::protobuf::RepeatedPtrField< ::GstDebugger::PadTemplate >&
FactoryType::templates() const {
  // @@protoc_insertion_point(field_list:GstDebugger.FactoryType.templates)
  return templates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElementKlass::kNameFieldNumber;
const int ElementKlass::kPropertyInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElementKlass::ElementKlass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.ElementKlass)
}
ElementKlass::ElementKlass(const ElementKlass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_info_(from.property_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.ElementKlass)
}

void ElementKlass::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ElementKlass::~ElementKlass() {
  // @@protoc_insertion_point(destructor:GstDebugger.ElementKlass)
  SharedDtor();
}

void ElementKlass::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ElementKlass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElementKlass::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[24].descriptor;
}

const ElementKlass& ElementKlass::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

ElementKlass* ElementKlass::New(::google::protobuf::Arena* arena) const {
  ElementKlass* n = new ElementKlass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ElementKlass::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.ElementKlass)
  property_info_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ElementKlass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.ElementKlass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.ElementKlass.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GstDebugger.PropertyInfo property_info = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_property_info()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.ElementKlass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.ElementKlass)
  return false;
#undef DO_
}

void ElementKlass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.ElementKlass)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.ElementKlass.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .GstDebugger.PropertyInfo property_info = 2;
  for (unsigned int i = 0, n = this->property_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.ElementKlass)
}

::google::protobuf::uint8* ElementKlass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.ElementKlass)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.ElementKlass.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .GstDebugger.PropertyInfo property_info = 2;
  for (unsigned int i = 0, n = this->property_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->property_info(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.ElementKlass)
  return target;
}

size_t ElementKlass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.ElementKlass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated .GstDebugger.PropertyInfo property_info = 2;
  {
    unsigned int count = this->property_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElementKlass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.ElementKlass)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementKlass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ElementKlass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.ElementKlass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.ElementKlass)
    MergeFrom(*source);
  }
}

void ElementKlass::MergeFrom(const ElementKlass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.ElementKlass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_info_.MergeFrom(from.property_info_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ElementKlass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.ElementKlass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementKlass::CopyFrom(const ElementKlass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.ElementKlass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementKlass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_info())) return false;
  return true;
}

void ElementKlass::Swap(ElementKlass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElementKlass::InternalSwap(ElementKlass* other) {
  property_info_.UnsafeArenaSwap(&other->property_info_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ElementKlass::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ElementKlass

// required string name = 1;
bool ElementKlass::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ElementKlass::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ElementKlass::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ElementKlass::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ElementKlass::name() const {
  // @@protoc_insertion_point(field_get:GstDebugger.ElementKlass.name)
  return name_.GetNoArena();
}
void ElementKlass::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.ElementKlass.name)
}
#if LANG_CXX11
void ElementKlass::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.ElementKlass.name)
}
#endif
void ElementKlass::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.ElementKlass.name)
}
void ElementKlass::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.ElementKlass.name)
}
::std::string* ElementKlass::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:GstDebugger.ElementKlass.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ElementKlass::release_name() {
  // @@protoc_insertion_point(field_release:GstDebugger.ElementKlass.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ElementKlass::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.ElementKlass.name)
}

// repeated .GstDebugger.PropertyInfo property_info = 2;
int ElementKlass::property_info_size() const {
  return property_info_.size();
}
void ElementKlass::clear_property_info() {
  property_info_.Clear();
}
const ::GstDebugger::PropertyInfo& ElementKlass::property_info(int index) const {
  // @@protoc_insertion_point(field_get:GstDebugger.ElementKlass.property_info)
  return property_info_.Get(index);
}
::GstDebugger::PropertyInfo* ElementKlass::mutable_property_info(int index) {
  // @@protoc_insertion_point(field_mutable:GstDebugger.ElementKlass.property_info)
  return property_info_.Mutable(index);
}
::GstDebugger::PropertyInfo* ElementKlass::add_property_info() {
  // @@protoc_insertion_point(field_add:GstDebugger.ElementKlass.property_info)
  return property_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::GstDebugger::PropertyInfo >*
ElementKlass::mutable_property_info() {
  // @@protoc_insertion_point(field_mutable_list:GstDebugger.ElementKlass.property_info)
  return &property_info_;
}
const ::google::protobuf::RepeatedPtrField< ::GstDebugger::PropertyInfo >&
ElementKlass::property_info() const {
  // @@protoc_insertion_point(field_list:GstDebugger.ElementKlass.property_info)
  return property_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopologyLink::kSrcPadFieldNumber;
const int TopologyLink::kSinkPadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopologyLink::TopologyLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.TopologyLink)
}
TopologyLink::TopologyLink(const TopologyLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_pad()) {
    src_pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_pad_);
  }
  sink_pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sink_pad()) {
    sink_pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sink_pad_);
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.TopologyLink)
}

void TopologyLink::SharedCtor() {
  _cached_size_ = 0;
  src_pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sink_pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TopologyLink::~TopologyLink() {
  // @@protoc_insertion_point(destructor:GstDebugger.TopologyLink)
  SharedDtor();
}

void TopologyLink::SharedDtor() {
  src_pad_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sink_pad_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TopologyLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopologyLink::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[25].descriptor;
}

const TopologyLink& TopologyLink::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

TopologyLink* TopologyLink::New(::google::protobuf::Arena* arena) const {
  TopologyLink* n = new TopologyLink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopologyLink::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.TopologyLink)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_src_pad()) {
      GOOGLE_DCHECK(!src_pad_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*src_pad_.UnsafeRawStringPointer())->clear();
    }
    if (has_sink_pad()) {
      GOOGLE_DCHECK(!sink_pad_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sink_pad_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopologyLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.TopologyLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src_pad = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_pad()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_pad().data(), this->src_pad().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.TopologyLink.src_pad");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sink_pad = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sink_pad()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sink_pad().data(), this->sink_pad().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.TopologyLink.sink_pad");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.TopologyLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.TopologyLink)
  return false;
#undef DO_
}

void TopologyLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.TopologyLink)
  // required string src_pad = 1;
  if (has_src_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_pad().data(), this->src_pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyLink.src_pad");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src_pad(), output);
  }

  // required string sink_pad = 2;
  if (has_sink_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sink_pad().data(), this->sink_pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyLink.sink_pad");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sink_pad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.TopologyLink)
}

::google::protobuf::uint8* TopologyLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.TopologyLink)
  // required string src_pad = 1;
  if (has_src_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_pad().data(), this->src_pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyLink.src_pad");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src_pad(), target);
  }

  // required string sink_pad = 2;
  if (has_sink_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sink_pad().data(), this->sink_pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyLink.sink_pad");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sink_pad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.TopologyLink)
  return target;
}

size_t TopologyLink::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.TopologyLink)
  size_t total_size = 0;

  if (has_src_pad()) {
    // required string src_pad = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_pad());
  }

  if (has_sink_pad()) {
    // required string sink_pad = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sink_pad());
  }

  return total_size;
}
size_t TopologyLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.TopologyLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string src_pad = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_pad());

    // required string sink_pad = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sink_pad());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopologyLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.TopologyLink)
  GOOGLE_DCHECK_NE(&from, this);
  const TopologyLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopologyLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.TopologyLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.TopologyLink)
    MergeFrom(*source);
  }
}

void TopologyLink::MergeFrom(const TopologyLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.TopologyLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_src_pad()) {
      set_has_src_pad();
      src_pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_pad_);
    }
    if (from.has_sink_pad()) {
      set_has_sink_pad();
      sink_pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sink_pad_);
    }
  }
}

void TopologyLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.TopologyLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopologyLink::CopyFrom(const TopologyLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.TopologyLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyLink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TopologyLink::Swap(TopologyLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopologyLink::InternalSwap(TopologyLink* other) {
  src_pad_.Swap(&other->src_pad_);
  sink_pad_.Swap(&other->sink_pad_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopologyLink::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopologyLink

// required string src_pad = 1;
bool TopologyLink::has_src_pad() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopologyLink::set_has_src_pad() {
  _has_bits_[0] |= 0x00000001u;
}
void TopologyLink::clear_has_src_pad() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopologyLink::clear_src_pad() {
  src_pad_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_pad();
}
const ::std::string& TopologyLink::src_pad() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyLink.src_pad)
  return src_pad_.GetNoArena();
}
void TopologyLink::set_src_pad(const ::std::string& value) {
  set_has_src_pad();
  src_pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.TopologyLink.src_pad)
}
#if LANG_CXX11
void TopologyLink::set_src_pad(::std::string&& value) {
  set_has_src_pad();
  src_pad_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.TopologyLink.src_pad)
}
#endif
void TopologyLink::set_src_pad(const char* value) {
  set_has_src_pad();
  src_pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.TopologyLink.src_pad)
}
void TopologyLink::set_src_pad(const char* value, size_t size) {
  set_has_src_pad();
  src_pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.TopologyLink.src_pad)
}
::std::string* TopologyLink::mutable_src_pad() {
  set_has_src_pad();
  // @@protoc_insertion_point(field_mutable:GstDebugger.TopologyLink.src_pad)
  return src_pad_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopologyLink::release_src_pad() {
  // @@protoc_insertion_point(field_release:GstDebugger.TopologyLink.src_pad)
  clear_has_src_pad();
  return src_pad_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopologyLink::set_allocated_src_pad(::std::string* src_pad) {
  if (src_pad != NULL) {
    set_has_src_pad();
  } else {
    clear_has_src_pad();
  }
  src_pad_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_pad);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.TopologyLink.src_pad)
}

// required string sink_pad = 2;
bool TopologyLink::has_sink_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopologyLink::set_has_sink_pad() {
  _has_bits_[0] |= 0x00000002u;
}
void TopologyLink::clear_has_sink_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopologyLink::clear_sink_pad() {
  sink_pad_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sink_pad();
}
const ::std::string& TopologyLink::sink_pad() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyLink.sink_pad)
  return sink_pad_.GetNoArena();
}
void TopologyLink::set_sink_pad(const ::std::string& value) {
  set_has_sink_pad();
  sink_pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.TopologyLink.sink_pad)
}
#if LANG_CXX11
void TopologyLink::set_sink_pad(::std::string&& value) {
  set_has_sink_pad();
  sink_pad_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.TopologyLink.sink_pad)
}
#endif
void TopologyLink::set_sink_pad(const char* value) {
  set_has_sink_pad();
  sink_pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.TopologyLink.sink_pad)
}
void TopologyLink::set_sink_pad(const char* value, size_t size) {
  set_has_sink_pad();
  sink_pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.TopologyLink.sink_pad)
}
::std::string* TopologyLink::mutable_sink_pad() {
  set_has_sink_pad();
  // @@protoc_insertion_point(field_mutable:GstDebugger.TopologyLink.sink_pad)
  return sink_pad_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopologyLink::release_sink_pad() {
  // @@protoc_insertion_point(field_release:GstDebugger.TopologyLink.sink_pad)
  clear_has_sink_pad();
  return sink_pad_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopologyLink::set_allocated_sink_pad(::std::string* sink_pad) {
  if (sink_pad != NULL) {
    set_has_sink_pad();
  } else {
    clear_has_sink_pad();
  }
  sink_pad_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sink_pad);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.TopologyLink.sink_pad)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopologyElement::kPathFieldNumber;
const int TopologyElement::kTypeNameFieldNumber;
const int TopologyElement::kIsBinFieldNumber;
const int TopologyElement::kFactoryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopologyElement::TopologyElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.TopologyElement)
}
TopologyElement::TopologyElement(const TopologyElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type_name()) {
    type_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_name_);
  }
  factory_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_factory_name()) {
    factory_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.factory_name_);
  }
  is_bin_ = from.is_bin_;
  // @@protoc_insertion_point(copy_constructor:GstDebugger.TopologyElement)
}

void TopologyElement::SharedCtor() {
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  factory_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_bin_ = false;
}

TopologyElement::~TopologyElement() {
  // @@protoc_insertion_point(destructor:GstDebugger.TopologyElement)
  SharedDtor();
}

void TopologyElement::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  factory_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TopologyElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopologyElement::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[26].descriptor;
}

const TopologyElement& TopologyElement::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

TopologyElement* TopologyElement::New(::google::protobuf::Arena* arena) const {
  TopologyElement* n = new TopologyElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopologyElement::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.TopologyElement)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_path()) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (has_type_name()) {
      GOOGLE_DCHECK(!type_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_factory_name()) {
      GOOGLE_DCHECK(!factory_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*factory_name_.UnsafeRawStringPointer())->clear();
    }
  }
  is_bin_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopologyElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.TopologyElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.TopologyElement.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string type_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.TopologyElement.type_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_bin = 3;
      case 3: {
        if (tag == 24u) {
          set_has_is_bin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string factory_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_factory_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->factory_name().data(), this->factory_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.TopologyElement.factory_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.TopologyElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.TopologyElement)
  return false;
#undef DO_
}

void TopologyElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.TopologyElement)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyElement.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // required string type_name = 2;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyElement.type_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type_name(), output);
  }

  // required bool is_bin = 3;
  if (has_is_bin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_bin(), output);
  }

  // required string factory_name = 4;
  if (has_factory_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->factory_name().data(), this->factory_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyElement.factory_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->factory_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.TopologyElement)
}

::google::protobuf::uint8* TopologyElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.TopologyElement)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyElement.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required string type_name = 2;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyElement.type_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type_name(), target);
  }

  // required bool is_bin = 3;
  if (has_is_bin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_bin(), target);
  }

  // required string factory_name = 4;
  if (has_factory_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->factory_name().data(), this->factory_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyElement.factory_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->factory_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.TopologyElement)
  return target;
}

size_t TopologyElement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.TopologyElement)
  size_t total_size = 0;

  if (has_path()) {
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  if (has_type_name()) {
    // required string type_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_name());
  }

  if (has_factory_name()) {
    // required string factory_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->factory_name());
  }

  if (has_is_bin()) {
    // required bool is_bin = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TopologyElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.TopologyElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());

    // required string type_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_name());

    // required string factory_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->factory_name());

    // required bool is_bin = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopologyElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.TopologyElement)
  GOOGLE_DCHECK_NE(&from, this);
  const TopologyElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopologyElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.TopologyElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.TopologyElement)
    MergeFrom(*source);
  }
}

void TopologyElement::MergeFrom(const TopologyElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.TopologyElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_type_name()) {
      set_has_type_name();
      type_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_name_);
    }
    if (from.has_factory_name()) {
      set_has_factory_name();
      factory_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.factory_name_);
    }
    if (from.has_is_bin()) {
      set_is_bin(from.is_bin());
    }
  }
}

void TopologyElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.TopologyElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopologyElement::CopyFrom(const TopologyElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.TopologyElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void TopologyElement::Swap(TopologyElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopologyElement::InternalSwap(TopologyElement* other) {
  path_.Swap(&other->path_);
  type_name_.Swap(&other->type_name_);
  factory_name_.Swap(&other->factory_name_);
  std::swap(is_bin_, other->is_bin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopologyElement::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopologyElement

// required string path = 1;
bool TopologyElement::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopologyElement::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
void TopologyElement::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopologyElement::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& TopologyElement::path() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyElement.path)
  return path_.GetNoArena();
}
void TopologyElement::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.TopologyElement.path)
}
#if LANG_CXX11
void TopologyElement::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.TopologyElement.path)
}
#endif
void TopologyElement::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.TopologyElement.path)
}
void TopologyElement::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.TopologyElement.path)
}
::std::string* TopologyElement::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:GstDebugger.TopologyElement.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopologyElement::release_path() {
  // @@protoc_insertion_point(field_release:GstDebugger.TopologyElement.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopologyElement::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.TopologyElement.path)
}

// required string type_name = 2;
bool TopologyElement::has_type_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopologyElement::set_has_type_name() {
  _has_bits_[0] |= 0x00000002u;
}
void TopologyElement::clear_has_type_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopologyElement::clear_type_name() {
  type_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type_name();
}
const ::std::string& TopologyElement::type_name() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyElement.type_name)
  return type_name_.GetNoArena();
}
void TopologyElement::set_type_name(const ::std::string& value) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.TopologyElement.type_name)
}
#if LANG_CXX11
void TopologyElement::set_type_name(::std::string&& value) {
  set_has_type_name();
  type_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.TopologyElement.type_name)
}
#endif
void TopologyElement::set_type_name(const char* value) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.TopologyElement.type_name)
}
void TopologyElement::set_type_name(const char* value, size_t size) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.TopologyElement.type_name)
}
::std::string* TopologyElement::mutable_type_name() {
  set_has_type_name();
  // @@protoc_insertion_point(field_mutable:GstDebugger.TopologyElement.type_name)
  return type_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopologyElement::release_type_name() {
  // @@protoc_insertion_point(field_release:GstDebugger.TopologyElement.type_name)
  clear_has_type_name();
  return type_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopologyElement::set_allocated_type_name(::std::string* type_name) {
  if (type_name != NULL) {
    set_has_type_name();
  } else {
    clear_has_type_name();
  }
  type_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_name);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.TopologyElement.type_name)
}

// required bool is_bin = 3;
bool TopologyElement::has_is_bin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TopologyElement::set_has_is_bin() {
  _has_bits_[0] |= 0x00000008u;
}
void TopologyElement::clear_has_is_bin() {
  _has_bits_[0] &= ~0x00000008u;
}
void TopologyElement::clear_is_bin() {
  is_bin_ = false;
  clear_has_is_bin();
}
bool TopologyElement::is_bin() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyElement.is_bin)
  return is_bin_;
}
void TopologyElement::set_is_bin(bool value) {
  set_has_is_bin();
  is_bin_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.TopologyElement.is_bin)
}

// required string factory_name = 4;
bool TopologyElement::has_factory_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TopologyElement::set_has_factory_name() {
  _has_bits_[0] |= 0x00000004u;
}
void TopologyElement::clear_has_factory_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void TopologyElement::clear_factory_name() {
  factory_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_factory_name();
}
const ::std::string& TopologyElement::factory_name() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyElement.factory_name)
  return factory_name_.GetNoArena();
}
void TopologyElement::set_factory_name(const ::std::string& value) {
  set_has_factory_name();
  factory_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.TopologyElement.factory_name)
}
#if LANG_CXX11
void TopologyElement::set_factory_name(::std::string&& value) {
  set_has_factory_name();
  factory_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.TopologyElement.factory_name)
}
#endif
void TopologyElement::set_factory_name(const char* value) {
  set_has_factory_name();
  factory_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.TopologyElement.factory_name)
}
void TopologyElement::set_factory_name(const char* value, size_t size) {
  set_has_factory_name();
  factory_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.TopologyElement.factory_name)
}
::std::string* TopologyElement::mutable_factory_name() {
  set_has_factory_name();
  // @@protoc_insertion_point(field_mutable:GstDebugger.TopologyElement.factory_name)
  return factory_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopologyElement::release_factory_name() {
  // @@protoc_insertion_point(field_release:GstDebugger.TopologyElement.factory_name)
  clear_has_factory_name();
  return factory_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopologyElement::set_allocated_factory_name(::std::string* factory_name) {
  if (factory_name != NULL) {
    set_has_factory_name();
  } else {
    clear_has_factory_name();
  }
  factory_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), factory_name);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.TopologyElement.factory_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopologyPad::kPathFieldNumber;
const int TopologyPad::kIsGhostpadFieldNumber;
const int TopologyPad::kDirectionFieldNumber;
const int TopologyPad::kPresenceFieldNumber;
const int TopologyPad::kTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopologyPad::TopologyPad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.TopologyPad)
}
TopologyPad::TopologyPad(const TopologyPad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_template_()) {
    template__ = new ::GstDebugger::PadTemplate(*from.template__);
  } else {
    template__ = NULL;
  }
  ::memcpy(&is_ghostpad_, &from.is_ghostpad_,
    reinterpret_cast<char*>(&presence_) -
    reinterpret_cast<char*>(&is_ghostpad_) + sizeof(presence_));
  // @@protoc_insertion_point(copy_constructor:GstDebugger.TopologyPad)
}

void TopologyPad::SharedCtor() {
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&template__, 0, reinterpret_cast<char*>(&presence_) -
    reinterpret_cast<char*>(&template__) + sizeof(presence_));
}

TopologyPad::~TopologyPad() {
  // @@protoc_insertion_point(destructor:GstDebugger.TopologyPad)
  SharedDtor();
}

void TopologyPad::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete template__;
  }
}

void TopologyPad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopologyPad::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[27].descriptor;
}

const TopologyPad& TopologyPad::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

TopologyPad* TopologyPad::New(::google::protobuf::Arena* arena) const {
  TopologyPad* n = new TopologyPad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopologyPad::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.TopologyPad)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_path()) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (has_template_()) {
      GOOGLE_DCHECK(template__ != NULL);
      template__->::GstDebugger::PadTemplate::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&is_ghostpad_, 0, reinterpret_cast<char*>(&presence_) -
      reinterpret_cast<char*>(&is_ghostpad_) + sizeof(presence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopologyPad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.TopologyPad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.TopologyPad.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_ghostpad = 2;
      case 2: {
        if (tag == 16u) {
          set_has_is_ghostpad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ghostpad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 direction = 3;
      case 3: {
        if (tag == 24u) {
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 presence = 4;
      case 4: {
        if (tag == 32u) {
          set_has_presence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.PadTemplate template = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_template_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.TopologyPad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.TopologyPad)
  return false;
#undef DO_
}

void TopologyPad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.TopologyPad)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyPad.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // required bool is_ghostpad = 2;
  if (has_is_ghostpad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_ghostpad(), output);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  // required int32 presence = 4;
  if (has_presence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->presence(), output);
  }

  // optional .GstDebugger.PadTemplate template = 5;
  if (has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->template__, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.TopologyPad)
}

::google::protobuf::uint8* TopologyPad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.TopologyPad)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.TopologyPad.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required bool is_ghostpad = 2;
  if (has_is_ghostpad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_ghostpad(), target);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  // required int32 presence = 4;
  if (has_presence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->presence(), target);
  }

  // optional .GstDebugger.PadTemplate template = 5;
  if (has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->template__, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.TopologyPad)
  return target;
}

size_t TopologyPad::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.TopologyPad)
  size_t total_size = 0;

  if (has_path()) {
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  if (has_is_ghostpad()) {
    // required bool is_ghostpad = 2;
    total_size += 1 + 1;
  }

  if (has_direction()) {
    // required int32 direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  if (has_presence()) {
    // required int32 presence = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->presence());
  }

  return total_size;
}
size_t TopologyPad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.TopologyPad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required string path = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());

    // required bool is_ghostpad = 2;
    total_size += 1 + 1;

    // required int32 direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());

    // required int32 presence = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->presence());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .GstDebugger.PadTemplate template = 5;
  if (has_template_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->template__);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopologyPad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.TopologyPad)
  GOOGLE_DCHECK_NE(&from, this);
  const TopologyPad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopologyPad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.TopologyPad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.TopologyPad)
    MergeFrom(*source);
  }
}

void TopologyPad::MergeFrom(const TopologyPad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.TopologyPad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_template_()) {
      mutable_template_()->::GstDebugger::PadTemplate::MergeFrom(from.template_());
    }
    if (from.has_is_ghostpad()) {
      set_is_ghostpad(from.is_ghostpad());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_presence()) {
      set_presence(from.presence());
    }
  }
}

void TopologyPad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.TopologyPad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopologyPad::CopyFrom(const TopologyPad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.TopologyPad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyPad::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  if (has_template_()) {
    if (!this->template__->IsInitialized()) return false;
  }
  return true;
}

void TopologyPad::Swap(TopologyPad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopologyPad::InternalSwap(TopologyPad* other) {
  path_.Swap(&other->path_);
  std::swap(template__, other->template__);
  std::swap(is_ghostpad_, other->is_ghostpad_);
  std::swap(direction_, other->direction_);
  std::swap(presence_, other->presence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopologyPad::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopologyPad

// required string path = 1;
bool TopologyPad::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopologyPad::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
void TopologyPad::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopologyPad::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& TopologyPad::path() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyPad.path)
  return path_.GetNoArena();
}
void TopologyPad::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.TopologyPad.path)
}
#if LANG_CXX11
void TopologyPad::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.TopologyPad.path)
}
#endif
void TopologyPad::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.TopologyPad.path)
}
void TopologyPad::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.TopologyPad.path)
}
::std::string* TopologyPad::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:GstDebugger.TopologyPad.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TopologyPad::release_path() {
  // @@protoc_insertion_point(field_release:GstDebugger.TopologyPad.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TopologyPad::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.TopologyPad.path)
}

// required bool is_ghostpad = 2;
bool TopologyPad::has_is_ghostpad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TopologyPad::set_has_is_ghostpad() {
  _has_bits_[0] |= 0x00000004u;
}
void TopologyPad::clear_has_is_ghostpad() {
  _has_bits_[0] &= ~0x00000004u;
}
void TopologyPad::clear_is_ghostpad() {
  is_ghostpad_ = false;
  clear_has_is_ghostpad();
}
bool TopologyPad::is_ghostpad() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyPad.is_ghostpad)
  return is_ghostpad_;
}
void TopologyPad::set_is_ghostpad(bool value) {
  set_has_is_ghostpad();
  is_ghostpad_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.TopologyPad.is_ghostpad)
}

// required int32 direction = 3;
bool TopologyPad::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TopologyPad::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
void TopologyPad::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
void TopologyPad::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
::google::protobuf::int32 TopologyPad::direction() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyPad.direction)
  return direction_;
}
void TopologyPad::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.TopologyPad.direction)
}

// required int32 presence = 4;
bool TopologyPad::has_presence() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TopologyPad::set_has_presence() {
  _has_bits_[0] |= 0x00000010u;
}
void TopologyPad::clear_has_presence() {
  _has_bits_[0] &= ~0x00000010u;
}
void TopologyPad::clear_presence() {
  presence_ = 0;
  clear_has_presence();
}
::google::protobuf::int32 TopologyPad::presence() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyPad.presence)
  return presence_;
}
void TopologyPad::set_presence(::google::protobuf::int32 value) {
  set_has_presence();
  presence_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.TopologyPad.presence)
}

// optional .GstDebugger.PadTemplate template = 5;
bool TopologyPad::has_template_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopologyPad::set_has_template_() {
  _has_bits_[0] |= 0x00000002u;
}
void TopologyPad::clear_has_template_() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopologyPad::clear_template_() {
  if (template__ != NULL) template__->::GstDebugger::PadTemplate::Clear();
  clear_has_template_();
}
const ::GstDebugger::PadTemplate& TopologyPad::template_() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyPad.template)
  return template__ != NULL ? *template__
                         : *::GstDebugger::PadTemplate::internal_default_instance();
}
::GstDebugger::PadTemplate* TopologyPad::mutable_template_() {
  set_has_template_();
  if (template__ == NULL) {
    template__ = new ::GstDebugger::PadTemplate;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.TopologyPad.template)
  return template__;
}
::GstDebugger::PadTemplate* TopologyPad::release_template_() {
  // @@protoc_insertion_point(field_release:GstDebugger.TopologyPad.template)
  clear_has_template_();
  ::GstDebugger::PadTemplate* temp = template__;
  template__ = NULL;
  return temp;
}
void TopologyPad::set_allocated_template_(::GstDebugger::PadTemplate* template_) {
  delete template__;
  template__ = template_;
  if (template_) {
    set_has_template_();
  } else {
    clear_has_template_();
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.TopologyPad.template)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopologyInfo::kActionFieldNumber;
const int TopologyInfo::kLinkFieldNumber;
const int TopologyInfo::kElementFieldNumber;
const int TopologyInfo::kPadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopologyInfo::TopologyInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.TopologyInfo)
}
TopologyInfo::TopologyInfo(const TopologyInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_ = from.action_;
  clear_has_topology_type();
  switch (from.topology_type_case()) {
    case kLink: {
      mutable_link()->::GstDebugger::TopologyLink::MergeFrom(from.link());
      break;
    }
    case kElement: {
      mutable_element()->::GstDebugger::TopologyElement::MergeFrom(from.element());
      break;
    }
    case kPad: {
      mutable_pad()->::GstDebugger::TopologyPad::MergeFrom(from.pad());
      break;
    }
    case TOPOLOGY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.TopologyInfo)
}

void TopologyInfo::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  clear_has_topology_type();
}

TopologyInfo::~TopologyInfo() {
  // @@protoc_insertion_point(destructor:GstDebugger.TopologyInfo)
  SharedDtor();
}

void TopologyInfo::SharedDtor() {
  if (has_topology_type()) {
    clear_topology_type();
  }
}

void TopologyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopologyInfo::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[28].descriptor;
}

const TopologyInfo& TopologyInfo::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

TopologyInfo* TopologyInfo::New(::google::protobuf::Arena* arena) const {
  TopologyInfo* n = new TopologyInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopologyInfo::clear_topology_type() {
// @@protoc_insertion_point(one_of_clear_start:GstDebugger.TopologyInfo)
  switch (topology_type_case()) {
    case kLink: {
      delete topology_type_.link_;
      break;
    }
    case kElement: {
      delete topology_type_.element_;
      break;
    }
    case kPad: {
      delete topology_type_.pad_;
      break;
    }
    case TOPOLOGY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TOPOLOGY_TYPE_NOT_SET;
}


void TopologyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.TopologyInfo)
  action_ = 0;
  clear_topology_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopologyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.TopologyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GstDebugger.Action action = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GstDebugger::Action_IsValid(value)) {
            set_action(static_cast< ::GstDebugger::Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.TopologyLink link = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.TopologyElement element = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.TopologyPad pad = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pad()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.TopologyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.TopologyInfo)
  return false;
#undef DO_
}

void TopologyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.TopologyInfo)
  // required .GstDebugger.Action action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  switch (topology_type_case()) {
    case kLink:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *topology_type_.link_, output);
      break;
    case kElement:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *topology_type_.element_, output);
      break;
    case kPad:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *topology_type_.pad_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.TopologyInfo)
}

::google::protobuf::uint8* TopologyInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.TopologyInfo)
  // required .GstDebugger.Action action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  switch (topology_type_case()) {
    case kLink:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *topology_type_.link_, false, target);
      break;
    case kElement:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *topology_type_.element_, false, target);
      break;
    case kPad:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *topology_type_.pad_, false, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.TopologyInfo)
  return target;
}

size_t TopologyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.TopologyInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .GstDebugger.Action action = 1;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }
  switch (topology_type_case()) {
    // optional .GstDebugger.TopologyLink link = 2;
    case kLink: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *topology_type_.link_);
      break;
    }
    // optional .GstDebugger.TopologyElement element = 3;
    case kElement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *topology_type_.element_);
      break;
    }
    // optional .GstDebugger.TopologyPad pad = 4;
    case kPad: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *topology_type_.pad_);
      break;
    }
    case TOPOLOGY_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopologyInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.TopologyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TopologyInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopologyInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.TopologyInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.TopologyInfo)
    MergeFrom(*source);
  }
}

void TopologyInfo::MergeFrom(const TopologyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.TopologyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_action()) {
    set_action(from.action());
  }
  switch (from.topology_type_case()) {
    case kLink: {
      mutable_link()->::GstDebugger::TopologyLink::MergeFrom(from.link());
      break;
    }
    case kElement: {
      mutable_element()->::GstDebugger::TopologyElement::MergeFrom(from.element());
      break;
    }
    case kPad: {
      mutable_pad()->::GstDebugger::TopologyPad::MergeFrom(from.pad());
      break;
    }
    case TOPOLOGY_TYPE_NOT_SET: {
      break;
    }
  }
}

void TopologyInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.TopologyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopologyInfo::CopyFrom(const TopologyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.TopologyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (topology_type_case()) {
    case kLink: {
      if (has_link()) {
        if (!this->link().IsInitialized()) return false;
      }
      break;
    }
    case kElement: {
      if (has_element()) {
        if (!this->element().IsInitialized()) return false;
      }
      break;
    }
    case kPad: {
      if (has_pad()) {
        if (!this->pad().IsInitialized()) return false;
      }
      break;
    }
    case TOPOLOGY_TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void TopologyInfo::Swap(TopologyInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopologyInfo::InternalSwap(TopologyInfo* other) {
  std::swap(action_, other->action_);
  std::swap(topology_type_, other->topology_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopologyInfo::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopologyInfo

// required .GstDebugger.Action action = 1;
bool TopologyInfo::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopologyInfo::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void TopologyInfo::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopologyInfo::clear_action() {
  action_ = 0;
  clear_has_action();
}
::GstDebugger::Action TopologyInfo::action() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyInfo.action)
  return static_cast< ::GstDebugger::Action >(action_);
}
void TopologyInfo::set_action(::GstDebugger::Action value) {
  assert(::GstDebugger::Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:GstDebugger.TopologyInfo.action)
}

// optional .GstDebugger.TopologyLink link = 2;
bool TopologyInfo::has_link() const {
  return topology_type_case() == kLink;
}
void TopologyInfo::set_has_link() {
  _oneof_case_[0] = kLink;
}
void TopologyInfo::clear_link() {
  if (has_link()) {
    delete topology_type_.link_;
    clear_has_topology_type();
  }
}
 const ::GstDebugger::TopologyLink& TopologyInfo::link() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyInfo.link)
  return has_link()
      ? *topology_type_.link_
      : ::GstDebugger::TopologyLink::default_instance();
}
::GstDebugger::TopologyLink* TopologyInfo::mutable_link() {
  if (!has_link()) {
    clear_topology_type();
    set_has_link();
    topology_type_.link_ = new ::GstDebugger::TopologyLink;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.TopologyInfo.link)
  return topology_type_.link_;
}
::GstDebugger::TopologyLink* TopologyInfo::release_link() {
  // @@protoc_insertion_point(field_release:GstDebugger.TopologyInfo.link)
  if (has_link()) {
    clear_has_topology_type();
    ::GstDebugger::TopologyLink* temp = topology_type_.link_;
    topology_type_.link_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopologyInfo::set_allocated_link(::GstDebugger::TopologyLink* link) {
  clear_topology_type();
  if (link) {
    set_has_link();
    topology_type_.link_ = link;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.TopologyInfo.link)
}

// optional .GstDebugger.TopologyElement element = 3;
bool TopologyInfo::has_element() const {
  return topology_type_case() == kElement;
}
void TopologyInfo::set_has_element() {
  _oneof_case_[0] = kElement;
}
void TopologyInfo::clear_element() {
  if (has_element()) {
    delete topology_type_.element_;
    clear_has_topology_type();
  }
}
 const ::GstDebugger::TopologyElement& TopologyInfo::element() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyInfo.element)
  return has_element()
      ? *topology_type_.element_
      : ::GstDebugger::TopologyElement::default_instance();
}
::GstDebugger::TopologyElement* TopologyInfo::mutable_element() {
  if (!has_element()) {
    clear_topology_type();
    set_has_element();
    topology_type_.element_ = new ::GstDebugger::TopologyElement;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.TopologyInfo.element)
  return topology_type_.element_;
}
::GstDebugger::TopologyElement* TopologyInfo::release_element() {
  // @@protoc_insertion_point(field_release:GstDebugger.TopologyInfo.element)
  if (has_element()) {
    clear_has_topology_type();
    ::GstDebugger::TopologyElement* temp = topology_type_.element_;
    topology_type_.element_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopologyInfo::set_allocated_element(::GstDebugger::TopologyElement* element) {
  clear_topology_type();
  if (element) {
    set_has_element();
    topology_type_.element_ = element;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.TopologyInfo.element)
}

// optional .GstDebugger.TopologyPad pad = 4;
bool TopologyInfo::has_pad() const {
  return topology_type_case() == kPad;
}
void TopologyInfo::set_has_pad() {
  _oneof_case_[0] = kPad;
}
void TopologyInfo::clear_pad() {
  if (has_pad()) {
    delete topology_type_.pad_;
    clear_has_topology_type();
  }
}
 const ::GstDebugger::TopologyPad& TopologyInfo::pad() const {
  // @@protoc_insertion_point(field_get:GstDebugger.TopologyInfo.pad)
  return has_pad()
      ? *topology_type_.pad_
      : ::GstDebugger::TopologyPad::default_instance();
}
::GstDebugger::TopologyPad* TopologyInfo::mutable_pad() {
  if (!has_pad()) {
    clear_topology_type();
    set_has_pad();
    topology_type_.pad_ = new ::GstDebugger::TopologyPad;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.TopologyInfo.pad)
  return topology_type_.pad_;
}
::GstDebugger::TopologyPad* TopologyInfo::release_pad() {
  // @@protoc_insertion_point(field_release:GstDebugger.TopologyInfo.pad)
  if (has_pad()) {
    clear_has_topology_type();
    ::GstDebugger::TopologyPad* temp = topology_type_.pad_;
    topology_type_.pad_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopologyInfo::set_allocated_pad(::GstDebugger::TopologyPad* pad) {
  clear_topology_type();
  if (pad) {
    set_has_pad();
    topology_type_.pad_ = pad;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.TopologyInfo.pad)
}

bool TopologyInfo::has_topology_type() const {
  return topology_type_case() != TOPOLOGY_TYPE_NOT_SET;
}
void TopologyInfo::clear_has_topology_type() {
  _oneof_case_[0] = TOPOLOGY_TYPE_NOT_SET;
}
TopologyInfo::TopologyTypeCase TopologyInfo::topology_type_case() const {
  return TopologyInfo::TopologyTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PadDynamicInfo::kAllowedCapsFieldNumber;
const int PadDynamicInfo::kCurrentCapsFieldNumber;
const int PadDynamicInfo::kPadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PadDynamicInfo::PadDynamicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.PadDynamicInfo)
}
PadDynamicInfo::PadDynamicInfo(const PadDynamicInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allowed_caps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_allowed_caps()) {
    allowed_caps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allowed_caps_);
  }
  current_caps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_current_caps()) {
    current_caps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_caps_);
  }
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pad()) {
    pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.PadDynamicInfo)
}

void PadDynamicInfo::SharedCtor() {
  _cached_size_ = 0;
  allowed_caps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_caps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pad_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PadDynamicInfo::~PadDynamicInfo() {
  // @@protoc_insertion_point(destructor:GstDebugger.PadDynamicInfo)
  SharedDtor();
}

void PadDynamicInfo::SharedDtor() {
  allowed_caps_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_caps_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pad_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PadDynamicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PadDynamicInfo::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[29].descriptor;
}

const PadDynamicInfo& PadDynamicInfo::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

PadDynamicInfo* PadDynamicInfo::New(::google::protobuf::Arena* arena) const {
  PadDynamicInfo* n = new PadDynamicInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PadDynamicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.PadDynamicInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_allowed_caps()) {
      GOOGLE_DCHECK(!allowed_caps_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*allowed_caps_.UnsafeRawStringPointer())->clear();
    }
    if (has_current_caps()) {
      GOOGLE_DCHECK(!current_caps_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*current_caps_.UnsafeRawStringPointer())->clear();
    }
    if (has_pad()) {
      GOOGLE_DCHECK(!pad_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pad_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PadDynamicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.PadDynamicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string allowed_caps = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allowed_caps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->allowed_caps().data(), this->allowed_caps().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PadDynamicInfo.allowed_caps");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string current_caps = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_caps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->current_caps().data(), this->current_caps().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PadDynamicInfo.current_caps");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string pad = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pad()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pad().data(), this->pad().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GstDebugger.PadDynamicInfo.pad");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.PadDynamicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.PadDynamicInfo)
  return false;
#undef DO_
}

void PadDynamicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.PadDynamicInfo)
  // required string allowed_caps = 1;
  if (has_allowed_caps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allowed_caps().data(), this->allowed_caps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadDynamicInfo.allowed_caps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->allowed_caps(), output);
  }

  // required string current_caps = 2;
  if (has_current_caps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_caps().data(), this->current_caps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadDynamicInfo.current_caps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->current_caps(), output);
  }

  // required string pad = 3;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pad().data(), this->pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadDynamicInfo.pad");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.PadDynamicInfo)
}

::google::protobuf::uint8* PadDynamicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.PadDynamicInfo)
  // required string allowed_caps = 1;
  if (has_allowed_caps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allowed_caps().data(), this->allowed_caps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadDynamicInfo.allowed_caps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->allowed_caps(), target);
  }

  // required string current_caps = 2;
  if (has_current_caps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_caps().data(), this->current_caps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadDynamicInfo.current_caps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->current_caps(), target);
  }

  // required string pad = 3;
  if (has_pad()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pad().data(), this->pad().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GstDebugger.PadDynamicInfo.pad");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.PadDynamicInfo)
  return target;
}

size_t PadDynamicInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GstDebugger.PadDynamicInfo)
  size_t total_size = 0;

  if (has_allowed_caps()) {
    // required string allowed_caps = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allowed_caps());
  }

  if (has_current_caps()) {
    // required string current_caps = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->current_caps());
  }

  if (has_pad()) {
    // required string pad = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pad());
  }

  return total_size;
}
size_t PadDynamicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.PadDynamicInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string allowed_caps = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allowed_caps());

    // required string current_caps = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->current_caps());

    // required string pad = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pad());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PadDynamicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.PadDynamicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PadDynamicInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PadDynamicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.PadDynamicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.PadDynamicInfo)
    MergeFrom(*source);
  }
}

void PadDynamicInfo::MergeFrom(const PadDynamicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.PadDynamicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_allowed_caps()) {
      set_has_allowed_caps();
      allowed_caps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allowed_caps_);
    }
    if (from.has_current_caps()) {
      set_has_current_caps();
      current_caps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_caps_);
    }
    if (from.has_pad()) {
      set_has_pad();
      pad_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pad_);
    }
  }
}

void PadDynamicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.PadDynamicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PadDynamicInfo::CopyFrom(const PadDynamicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.PadDynamicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PadDynamicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PadDynamicInfo::Swap(PadDynamicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PadDynamicInfo::InternalSwap(PadDynamicInfo* other) {
  allowed_caps_.Swap(&other->allowed_caps_);
  current_caps_.Swap(&other->current_caps_);
  pad_.Swap(&other->pad_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PadDynamicInfo::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PadDynamicInfo

// required string allowed_caps = 1;
bool PadDynamicInfo::has_allowed_caps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PadDynamicInfo::set_has_allowed_caps() {
  _has_bits_[0] |= 0x00000001u;
}
void PadDynamicInfo::clear_has_allowed_caps() {
  _has_bits_[0] &= ~0x00000001u;
}
void PadDynamicInfo::clear_allowed_caps() {
  allowed_caps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_allowed_caps();
}
const ::std::string& PadDynamicInfo::allowed_caps() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PadDynamicInfo.allowed_caps)
  return allowed_caps_.GetNoArena();
}
void PadDynamicInfo::set_allowed_caps(const ::std::string& value) {
  set_has_allowed_caps();
  allowed_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PadDynamicInfo.allowed_caps)
}
#if LANG_CXX11
void PadDynamicInfo::set_allowed_caps(::std::string&& value) {
  set_has_allowed_caps();
  allowed_caps_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PadDynamicInfo.allowed_caps)
}
#endif
void PadDynamicInfo::set_allowed_caps(const char* value) {
  set_has_allowed_caps();
  allowed_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PadDynamicInfo.allowed_caps)
}
void PadDynamicInfo::set_allowed_caps(const char* value, size_t size) {
  set_has_allowed_caps();
  allowed_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PadDynamicInfo.allowed_caps)
}
::std::string* PadDynamicInfo::mutable_allowed_caps() {
  set_has_allowed_caps();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PadDynamicInfo.allowed_caps)
  return allowed_caps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PadDynamicInfo::release_allowed_caps() {
  // @@protoc_insertion_point(field_release:GstDebugger.PadDynamicInfo.allowed_caps)
  clear_has_allowed_caps();
  return allowed_caps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PadDynamicInfo::set_allocated_allowed_caps(::std::string* allowed_caps) {
  if (allowed_caps != NULL) {
    set_has_allowed_caps();
  } else {
    clear_has_allowed_caps();
  }
  allowed_caps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allowed_caps);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PadDynamicInfo.allowed_caps)
}

// required string current_caps = 2;
bool PadDynamicInfo::has_current_caps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PadDynamicInfo::set_has_current_caps() {
  _has_bits_[0] |= 0x00000002u;
}
void PadDynamicInfo::clear_has_current_caps() {
  _has_bits_[0] &= ~0x00000002u;
}
void PadDynamicInfo::clear_current_caps() {
  current_caps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_caps();
}
const ::std::string& PadDynamicInfo::current_caps() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PadDynamicInfo.current_caps)
  return current_caps_.GetNoArena();
}
void PadDynamicInfo::set_current_caps(const ::std::string& value) {
  set_has_current_caps();
  current_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PadDynamicInfo.current_caps)
}
#if LANG_CXX11
void PadDynamicInfo::set_current_caps(::std::string&& value) {
  set_has_current_caps();
  current_caps_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PadDynamicInfo.current_caps)
}
#endif
void PadDynamicInfo::set_current_caps(const char* value) {
  set_has_current_caps();
  current_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PadDynamicInfo.current_caps)
}
void PadDynamicInfo::set_current_caps(const char* value, size_t size) {
  set_has_current_caps();
  current_caps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PadDynamicInfo.current_caps)
}
::std::string* PadDynamicInfo::mutable_current_caps() {
  set_has_current_caps();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PadDynamicInfo.current_caps)
  return current_caps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PadDynamicInfo::release_current_caps() {
  // @@protoc_insertion_point(field_release:GstDebugger.PadDynamicInfo.current_caps)
  clear_has_current_caps();
  return current_caps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PadDynamicInfo::set_allocated_current_caps(::std::string* current_caps) {
  if (current_caps != NULL) {
    set_has_current_caps();
  } else {
    clear_has_current_caps();
  }
  current_caps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_caps);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PadDynamicInfo.current_caps)
}

// required string pad = 3;
bool PadDynamicInfo::has_pad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PadDynamicInfo::set_has_pad() {
  _has_bits_[0] |= 0x00000004u;
}
void PadDynamicInfo::clear_has_pad() {
  _has_bits_[0] &= ~0x00000004u;
}
void PadDynamicInfo::clear_pad() {
  pad_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pad();
}
const ::std::string& PadDynamicInfo::pad() const {
  // @@protoc_insertion_point(field_get:GstDebugger.PadDynamicInfo.pad)
  return pad_.GetNoArena();
}
void PadDynamicInfo::set_pad(const ::std::string& value) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GstDebugger.PadDynamicInfo.pad)
}
#if LANG_CXX11
void PadDynamicInfo::set_pad(::std::string&& value) {
  set_has_pad();
  pad_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GstDebugger.PadDynamicInfo.pad)
}
#endif
void PadDynamicInfo::set_pad(const char* value) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GstDebugger.PadDynamicInfo.pad)
}
void PadDynamicInfo::set_pad(const char* value, size_t size) {
  set_has_pad();
  pad_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GstDebugger.PadDynamicInfo.pad)
}
::std::string* PadDynamicInfo::mutable_pad() {
  set_has_pad();
  // @@protoc_insertion_point(field_mutable:GstDebugger.PadDynamicInfo.pad)
  return pad_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PadDynamicInfo::release_pad() {
  // @@protoc_insertion_point(field_release:GstDebugger.PadDynamicInfo.pad)
  clear_has_pad();
  return pad_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PadDynamicInfo::set_allocated_pad(::std::string* pad) {
  if (pad != NULL) {
    set_has_pad();
  } else {
    clear_has_pad();
  }
  pad_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pad);
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.PadDynamicInfo.pad)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GStreamerData::kDebugCategoriesFieldNumber;
const int GStreamerData::kLogInfoFieldNumber;
const int GStreamerData::kEnumFlagsTypeFieldNumber;
const int GStreamerData::kFactoryFieldNumber;
const int GStreamerData::kMessageInfoFieldNumber;
const int GStreamerData::kConfirmationFieldNumber;
const int GStreamerData::kEventInfoFieldNumber;
const int GStreamerData::kTopologyInfoFieldNumber;
const int GStreamerData::kQueryInfoFieldNumber;
const int GStreamerData::kPropertyValueFieldNumber;
const int GStreamerData::kElementKlassFieldNumber;
const int GStreamerData::kBufferInfoFieldNumber;
const int GStreamerData::kPadDynamicInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GStreamerData::GStreamerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstdebugger_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GstDebugger.GStreamerData)
}
GStreamerData::GStreamerData(const GStreamerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_info_type();
  switch (from.info_type_case()) {
    case kDebugCategories: {
      mutable_debug_categories()->::GstDebugger::DebugCategories::MergeFrom(from.debug_categories());
      break;
    }
    case kLogInfo: {
      mutable_log_info()->::GstDebugger::LogInfo::MergeFrom(from.log_info());
      break;
    }
    case kEnumFlagsType: {
      mutable_enum_flags_type()->::GstDebugger::EnumFlagsType::MergeFrom(from.enum_flags_type());
      break;
    }
    case kFactory: {
      mutable_factory()->::GstDebugger::FactoryType::MergeFrom(from.factory());
      break;
    }
    case kMessageInfo: {
      mutable_message_info()->::GstDebugger::MessageInfo::MergeFrom(from.message_info());
      break;
    }
    case kConfirmation: {
      mutable_confirmation()->::GstDebugger::Command::MergeFrom(from.confirmation());
      break;
    }
    case kEventInfo: {
      mutable_event_info()->::GstDebugger::EventInfo::MergeFrom(from.event_info());
      break;
    }
    case kTopologyInfo: {
      mutable_topology_info()->::GstDebugger::TopologyInfo::MergeFrom(from.topology_info());
      break;
    }
    case kQueryInfo: {
      mutable_query_info()->::GstDebugger::QueryInfo::MergeFrom(from.query_info());
      break;
    }
    case kPropertyValue: {
      mutable_property_value()->::GstDebugger::PropertyValue::MergeFrom(from.property_value());
      break;
    }
    case kElementKlass: {
      mutable_element_klass()->::GstDebugger::ElementKlass::MergeFrom(from.element_klass());
      break;
    }
    case kBufferInfo: {
      mutable_buffer_info()->::GstDebugger::BufferInfo::MergeFrom(from.buffer_info());
      break;
    }
    case kPadDynamicInfo: {
      mutable_pad_dynamic_info()->::GstDebugger::PadDynamicInfo::MergeFrom(from.pad_dynamic_info());
      break;
    }
    case INFO_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GstDebugger.GStreamerData)
}

void GStreamerData::SharedCtor() {
  _cached_size_ = 0;
  clear_has_info_type();
}

GStreamerData::~GStreamerData() {
  // @@protoc_insertion_point(destructor:GstDebugger.GStreamerData)
  SharedDtor();
}

void GStreamerData::SharedDtor() {
  if (has_info_type()) {
    clear_info_type();
  }
}

void GStreamerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GStreamerData::descriptor() {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[30].descriptor;
}

const GStreamerData& GStreamerData::default_instance() {
  protobuf_gstdebugger_2eproto::InitDefaults();
  return *internal_default_instance();
}

GStreamerData* GStreamerData::New(::google::protobuf::Arena* arena) const {
  GStreamerData* n = new GStreamerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GStreamerData::clear_info_type() {
// @@protoc_insertion_point(one_of_clear_start:GstDebugger.GStreamerData)
  switch (info_type_case()) {
    case kDebugCategories: {
      delete info_type_.debug_categories_;
      break;
    }
    case kLogInfo: {
      delete info_type_.log_info_;
      break;
    }
    case kEnumFlagsType: {
      delete info_type_.enum_flags_type_;
      break;
    }
    case kFactory: {
      delete info_type_.factory_;
      break;
    }
    case kMessageInfo: {
      delete info_type_.message_info_;
      break;
    }
    case kConfirmation: {
      delete info_type_.confirmation_;
      break;
    }
    case kEventInfo: {
      delete info_type_.event_info_;
      break;
    }
    case kTopologyInfo: {
      delete info_type_.topology_info_;
      break;
    }
    case kQueryInfo: {
      delete info_type_.query_info_;
      break;
    }
    case kPropertyValue: {
      delete info_type_.property_value_;
      break;
    }
    case kElementKlass: {
      delete info_type_.element_klass_;
      break;
    }
    case kBufferInfo: {
      delete info_type_.buffer_info_;
      break;
    }
    case kPadDynamicInfo: {
      delete info_type_.pad_dynamic_info_;
      break;
    }
    case INFO_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INFO_TYPE_NOT_SET;
}


void GStreamerData::Clear() {
// @@protoc_insertion_point(message_clear_start:GstDebugger.GStreamerData)
  clear_info_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GStreamerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GstDebugger.GStreamerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GstDebugger.DebugCategories debug_categories = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.LogInfo log_info = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.EnumFlagsType enum_flags_type = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enum_flags_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.FactoryType factory = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_factory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.MessageInfo message_info = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.Command confirmation = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_confirmation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.EventInfo event_info = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.TopologyInfo topology_info = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topology_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.QueryInfo query_info = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.PropertyValue property_value = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.ElementKlass element_klass = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element_klass()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.BufferInfo buffer_info = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GstDebugger.PadDynamicInfo pad_dynamic_info = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pad_dynamic_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GstDebugger.GStreamerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GstDebugger.GStreamerData)
  return false;
#undef DO_
}

void GStreamerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GstDebugger.GStreamerData)
  switch (info_type_case()) {
    case kDebugCategories:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *info_type_.debug_categories_, output);
      break;
    case kLogInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *info_type_.log_info_, output);
      break;
    case kEnumFlagsType:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *info_type_.enum_flags_type_, output);
      break;
    case kFactory:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *info_type_.factory_, output);
      break;
    case kMessageInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *info_type_.message_info_, output);
      break;
    case kConfirmation:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *info_type_.confirmation_, output);
      break;
    case kEventInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *info_type_.event_info_, output);
      break;
    case kTopologyInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *info_type_.topology_info_, output);
      break;
    case kQueryInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *info_type_.query_info_, output);
      break;
    case kPropertyValue:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *info_type_.property_value_, output);
      break;
    case kElementKlass:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *info_type_.element_klass_, output);
      break;
    case kBufferInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *info_type_.buffer_info_, output);
      break;
    case kPadDynamicInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, *info_type_.pad_dynamic_info_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GstDebugger.GStreamerData)
}

::google::protobuf::uint8* GStreamerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GstDebugger.GStreamerData)
  switch (info_type_case()) {
    case kDebugCategories:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *info_type_.debug_categories_, false, target);
      break;
    case kLogInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *info_type_.log_info_, false, target);
      break;
    case kEnumFlagsType:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *info_type_.enum_flags_type_, false, target);
      break;
    case kFactory:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *info_type_.factory_, false, target);
      break;
    case kMessageInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *info_type_.message_info_, false, target);
      break;
    case kConfirmation:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *info_type_.confirmation_, false, target);
      break;
    case kEventInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *info_type_.event_info_, false, target);
      break;
    case kTopologyInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *info_type_.topology_info_, false, target);
      break;
    case kQueryInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *info_type_.query_info_, false, target);
      break;
    case kPropertyValue:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *info_type_.property_value_, false, target);
      break;
    case kElementKlass:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *info_type_.element_klass_, false, target);
      break;
    case kBufferInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          12, *info_type_.buffer_info_, false, target);
      break;
    case kPadDynamicInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          13, *info_type_.pad_dynamic_info_, false, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GstDebugger.GStreamerData)
  return target;
}

size_t GStreamerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GstDebugger.GStreamerData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  switch (info_type_case()) {
    // optional .GstDebugger.DebugCategories debug_categories = 1;
    case kDebugCategories: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.debug_categories_);
      break;
    }
    // optional .GstDebugger.LogInfo log_info = 2;
    case kLogInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.log_info_);
      break;
    }
    // optional .GstDebugger.EnumFlagsType enum_flags_type = 3;
    case kEnumFlagsType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.enum_flags_type_);
      break;
    }
    // optional .GstDebugger.FactoryType factory = 4;
    case kFactory: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.factory_);
      break;
    }
    // optional .GstDebugger.MessageInfo message_info = 5;
    case kMessageInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.message_info_);
      break;
    }
    // optional .GstDebugger.Command confirmation = 6;
    case kConfirmation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.confirmation_);
      break;
    }
    // optional .GstDebugger.EventInfo event_info = 7;
    case kEventInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.event_info_);
      break;
    }
    // optional .GstDebugger.TopologyInfo topology_info = 8;
    case kTopologyInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.topology_info_);
      break;
    }
    // optional .GstDebugger.QueryInfo query_info = 9;
    case kQueryInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.query_info_);
      break;
    }
    // optional .GstDebugger.PropertyValue property_value = 10;
    case kPropertyValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.property_value_);
      break;
    }
    // optional .GstDebugger.ElementKlass element_klass = 11;
    case kElementKlass: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.element_klass_);
      break;
    }
    // optional .GstDebugger.BufferInfo buffer_info = 12;
    case kBufferInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.buffer_info_);
      break;
    }
    // optional .GstDebugger.PadDynamicInfo pad_dynamic_info = 13;
    case kPadDynamicInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_type_.pad_dynamic_info_);
      break;
    }
    case INFO_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GStreamerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GstDebugger.GStreamerData)
  GOOGLE_DCHECK_NE(&from, this);
  const GStreamerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GStreamerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GstDebugger.GStreamerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GstDebugger.GStreamerData)
    MergeFrom(*source);
  }
}

void GStreamerData::MergeFrom(const GStreamerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GstDebugger.GStreamerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.info_type_case()) {
    case kDebugCategories: {
      mutable_debug_categories()->::GstDebugger::DebugCategories::MergeFrom(from.debug_categories());
      break;
    }
    case kLogInfo: {
      mutable_log_info()->::GstDebugger::LogInfo::MergeFrom(from.log_info());
      break;
    }
    case kEnumFlagsType: {
      mutable_enum_flags_type()->::GstDebugger::EnumFlagsType::MergeFrom(from.enum_flags_type());
      break;
    }
    case kFactory: {
      mutable_factory()->::GstDebugger::FactoryType::MergeFrom(from.factory());
      break;
    }
    case kMessageInfo: {
      mutable_message_info()->::GstDebugger::MessageInfo::MergeFrom(from.message_info());
      break;
    }
    case kConfirmation: {
      mutable_confirmation()->::GstDebugger::Command::MergeFrom(from.confirmation());
      break;
    }
    case kEventInfo: {
      mutable_event_info()->::GstDebugger::EventInfo::MergeFrom(from.event_info());
      break;
    }
    case kTopologyInfo: {
      mutable_topology_info()->::GstDebugger::TopologyInfo::MergeFrom(from.topology_info());
      break;
    }
    case kQueryInfo: {
      mutable_query_info()->::GstDebugger::QueryInfo::MergeFrom(from.query_info());
      break;
    }
    case kPropertyValue: {
      mutable_property_value()->::GstDebugger::PropertyValue::MergeFrom(from.property_value());
      break;
    }
    case kElementKlass: {
      mutable_element_klass()->::GstDebugger::ElementKlass::MergeFrom(from.element_klass());
      break;
    }
    case kBufferInfo: {
      mutable_buffer_info()->::GstDebugger::BufferInfo::MergeFrom(from.buffer_info());
      break;
    }
    case kPadDynamicInfo: {
      mutable_pad_dynamic_info()->::GstDebugger::PadDynamicInfo::MergeFrom(from.pad_dynamic_info());
      break;
    }
    case INFO_TYPE_NOT_SET: {
      break;
    }
  }
}

void GStreamerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GstDebugger.GStreamerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GStreamerData::CopyFrom(const GStreamerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GstDebugger.GStreamerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GStreamerData::IsInitialized() const {
  switch (info_type_case()) {
    case kDebugCategories: {
      break;
    }
    case kLogInfo: {
      if (has_log_info()) {
        if (!this->log_info().IsInitialized()) return false;
      }
      break;
    }
    case kEnumFlagsType: {
      if (has_enum_flags_type()) {
        if (!this->enum_flags_type().IsInitialized()) return false;
      }
      break;
    }
    case kFactory: {
      if (has_factory()) {
        if (!this->factory().IsInitialized()) return false;
      }
      break;
    }
    case kMessageInfo: {
      if (has_message_info()) {
        if (!this->message_info().IsInitialized()) return false;
      }
      break;
    }
    case kConfirmation: {
      if (has_confirmation()) {
        if (!this->confirmation().IsInitialized()) return false;
      }
      break;
    }
    case kEventInfo: {
      if (has_event_info()) {
        if (!this->event_info().IsInitialized()) return false;
      }
      break;
    }
    case kTopologyInfo: {
      if (has_topology_info()) {
        if (!this->topology_info().IsInitialized()) return false;
      }
      break;
    }
    case kQueryInfo: {
      if (has_query_info()) {
        if (!this->query_info().IsInitialized()) return false;
      }
      break;
    }
    case kPropertyValue: {
      if (has_property_value()) {
        if (!this->property_value().IsInitialized()) return false;
      }
      break;
    }
    case kElementKlass: {
      if (has_element_klass()) {
        if (!this->element_klass().IsInitialized()) return false;
      }
      break;
    }
    case kBufferInfo: {
      if (has_buffer_info()) {
        if (!this->buffer_info().IsInitialized()) return false;
      }
      break;
    }
    case kPadDynamicInfo: {
      if (has_pad_dynamic_info()) {
        if (!this->pad_dynamic_info().IsInitialized()) return false;
      }
      break;
    }
    case INFO_TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void GStreamerData::Swap(GStreamerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GStreamerData::InternalSwap(GStreamerData* other) {
  std::swap(info_type_, other->info_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GStreamerData::GetMetadata() const {
  protobuf_gstdebugger_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstdebugger_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GStreamerData

// optional .GstDebugger.DebugCategories debug_categories = 1;
bool GStreamerData::has_debug_categories() const {
  return info_type_case() == kDebugCategories;
}
void GStreamerData::set_has_debug_categories() {
  _oneof_case_[0] = kDebugCategories;
}
void GStreamerData::clear_debug_categories() {
  if (has_debug_categories()) {
    delete info_type_.debug_categories_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::DebugCategories& GStreamerData::debug_categories() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.debug_categories)
  return has_debug_categories()
      ? *info_type_.debug_categories_
      : ::GstDebugger::DebugCategories::default_instance();
}
::GstDebugger::DebugCategories* GStreamerData::mutable_debug_categories() {
  if (!has_debug_categories()) {
    clear_info_type();
    set_has_debug_categories();
    info_type_.debug_categories_ = new ::GstDebugger::DebugCategories;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.debug_categories)
  return info_type_.debug_categories_;
}
::GstDebugger::DebugCategories* GStreamerData::release_debug_categories() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.debug_categories)
  if (has_debug_categories()) {
    clear_has_info_type();
    ::GstDebugger::DebugCategories* temp = info_type_.debug_categories_;
    info_type_.debug_categories_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_debug_categories(::GstDebugger::DebugCategories* debug_categories) {
  clear_info_type();
  if (debug_categories) {
    set_has_debug_categories();
    info_type_.debug_categories_ = debug_categories;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.debug_categories)
}

// optional .GstDebugger.LogInfo log_info = 2;
bool GStreamerData::has_log_info() const {
  return info_type_case() == kLogInfo;
}
void GStreamerData::set_has_log_info() {
  _oneof_case_[0] = kLogInfo;
}
void GStreamerData::clear_log_info() {
  if (has_log_info()) {
    delete info_type_.log_info_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::LogInfo& GStreamerData::log_info() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.log_info)
  return has_log_info()
      ? *info_type_.log_info_
      : ::GstDebugger::LogInfo::default_instance();
}
::GstDebugger::LogInfo* GStreamerData::mutable_log_info() {
  if (!has_log_info()) {
    clear_info_type();
    set_has_log_info();
    info_type_.log_info_ = new ::GstDebugger::LogInfo;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.log_info)
  return info_type_.log_info_;
}
::GstDebugger::LogInfo* GStreamerData::release_log_info() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.log_info)
  if (has_log_info()) {
    clear_has_info_type();
    ::GstDebugger::LogInfo* temp = info_type_.log_info_;
    info_type_.log_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_log_info(::GstDebugger::LogInfo* log_info) {
  clear_info_type();
  if (log_info) {
    set_has_log_info();
    info_type_.log_info_ = log_info;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.log_info)
}

// optional .GstDebugger.EnumFlagsType enum_flags_type = 3;
bool GStreamerData::has_enum_flags_type() const {
  return info_type_case() == kEnumFlagsType;
}
void GStreamerData::set_has_enum_flags_type() {
  _oneof_case_[0] = kEnumFlagsType;
}
void GStreamerData::clear_enum_flags_type() {
  if (has_enum_flags_type()) {
    delete info_type_.enum_flags_type_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::EnumFlagsType& GStreamerData::enum_flags_type() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.enum_flags_type)
  return has_enum_flags_type()
      ? *info_type_.enum_flags_type_
      : ::GstDebugger::EnumFlagsType::default_instance();
}
::GstDebugger::EnumFlagsType* GStreamerData::mutable_enum_flags_type() {
  if (!has_enum_flags_type()) {
    clear_info_type();
    set_has_enum_flags_type();
    info_type_.enum_flags_type_ = new ::GstDebugger::EnumFlagsType;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.enum_flags_type)
  return info_type_.enum_flags_type_;
}
::GstDebugger::EnumFlagsType* GStreamerData::release_enum_flags_type() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.enum_flags_type)
  if (has_enum_flags_type()) {
    clear_has_info_type();
    ::GstDebugger::EnumFlagsType* temp = info_type_.enum_flags_type_;
    info_type_.enum_flags_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_enum_flags_type(::GstDebugger::EnumFlagsType* enum_flags_type) {
  clear_info_type();
  if (enum_flags_type) {
    set_has_enum_flags_type();
    info_type_.enum_flags_type_ = enum_flags_type;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.enum_flags_type)
}

// optional .GstDebugger.FactoryType factory = 4;
bool GStreamerData::has_factory() const {
  return info_type_case() == kFactory;
}
void GStreamerData::set_has_factory() {
  _oneof_case_[0] = kFactory;
}
void GStreamerData::clear_factory() {
  if (has_factory()) {
    delete info_type_.factory_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::FactoryType& GStreamerData::factory() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.factory)
  return has_factory()
      ? *info_type_.factory_
      : ::GstDebugger::FactoryType::default_instance();
}
::GstDebugger::FactoryType* GStreamerData::mutable_factory() {
  if (!has_factory()) {
    clear_info_type();
    set_has_factory();
    info_type_.factory_ = new ::GstDebugger::FactoryType;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.factory)
  return info_type_.factory_;
}
::GstDebugger::FactoryType* GStreamerData::release_factory() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.factory)
  if (has_factory()) {
    clear_has_info_type();
    ::GstDebugger::FactoryType* temp = info_type_.factory_;
    info_type_.factory_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_factory(::GstDebugger::FactoryType* factory) {
  clear_info_type();
  if (factory) {
    set_has_factory();
    info_type_.factory_ = factory;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.factory)
}

// optional .GstDebugger.MessageInfo message_info = 5;
bool GStreamerData::has_message_info() const {
  return info_type_case() == kMessageInfo;
}
void GStreamerData::set_has_message_info() {
  _oneof_case_[0] = kMessageInfo;
}
void GStreamerData::clear_message_info() {
  if (has_message_info()) {
    delete info_type_.message_info_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::MessageInfo& GStreamerData::message_info() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.message_info)
  return has_message_info()
      ? *info_type_.message_info_
      : ::GstDebugger::MessageInfo::default_instance();
}
::GstDebugger::MessageInfo* GStreamerData::mutable_message_info() {
  if (!has_message_info()) {
    clear_info_type();
    set_has_message_info();
    info_type_.message_info_ = new ::GstDebugger::MessageInfo;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.message_info)
  return info_type_.message_info_;
}
::GstDebugger::MessageInfo* GStreamerData::release_message_info() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.message_info)
  if (has_message_info()) {
    clear_has_info_type();
    ::GstDebugger::MessageInfo* temp = info_type_.message_info_;
    info_type_.message_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_message_info(::GstDebugger::MessageInfo* message_info) {
  clear_info_type();
  if (message_info) {
    set_has_message_info();
    info_type_.message_info_ = message_info;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.message_info)
}

// optional .GstDebugger.Command confirmation = 6;
bool GStreamerData::has_confirmation() const {
  return info_type_case() == kConfirmation;
}
void GStreamerData::set_has_confirmation() {
  _oneof_case_[0] = kConfirmation;
}
void GStreamerData::clear_confirmation() {
  if (has_confirmation()) {
    delete info_type_.confirmation_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::Command& GStreamerData::confirmation() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.confirmation)
  return has_confirmation()
      ? *info_type_.confirmation_
      : ::GstDebugger::Command::default_instance();
}
::GstDebugger::Command* GStreamerData::mutable_confirmation() {
  if (!has_confirmation()) {
    clear_info_type();
    set_has_confirmation();
    info_type_.confirmation_ = new ::GstDebugger::Command;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.confirmation)
  return info_type_.confirmation_;
}
::GstDebugger::Command* GStreamerData::release_confirmation() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.confirmation)
  if (has_confirmation()) {
    clear_has_info_type();
    ::GstDebugger::Command* temp = info_type_.confirmation_;
    info_type_.confirmation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_confirmation(::GstDebugger::Command* confirmation) {
  clear_info_type();
  if (confirmation) {
    set_has_confirmation();
    info_type_.confirmation_ = confirmation;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.confirmation)
}

// optional .GstDebugger.EventInfo event_info = 7;
bool GStreamerData::has_event_info() const {
  return info_type_case() == kEventInfo;
}
void GStreamerData::set_has_event_info() {
  _oneof_case_[0] = kEventInfo;
}
void GStreamerData::clear_event_info() {
  if (has_event_info()) {
    delete info_type_.event_info_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::EventInfo& GStreamerData::event_info() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.event_info)
  return has_event_info()
      ? *info_type_.event_info_
      : ::GstDebugger::EventInfo::default_instance();
}
::GstDebugger::EventInfo* GStreamerData::mutable_event_info() {
  if (!has_event_info()) {
    clear_info_type();
    set_has_event_info();
    info_type_.event_info_ = new ::GstDebugger::EventInfo;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.event_info)
  return info_type_.event_info_;
}
::GstDebugger::EventInfo* GStreamerData::release_event_info() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.event_info)
  if (has_event_info()) {
    clear_has_info_type();
    ::GstDebugger::EventInfo* temp = info_type_.event_info_;
    info_type_.event_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_event_info(::GstDebugger::EventInfo* event_info) {
  clear_info_type();
  if (event_info) {
    set_has_event_info();
    info_type_.event_info_ = event_info;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.event_info)
}

// optional .GstDebugger.TopologyInfo topology_info = 8;
bool GStreamerData::has_topology_info() const {
  return info_type_case() == kTopologyInfo;
}
void GStreamerData::set_has_topology_info() {
  _oneof_case_[0] = kTopologyInfo;
}
void GStreamerData::clear_topology_info() {
  if (has_topology_info()) {
    delete info_type_.topology_info_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::TopologyInfo& GStreamerData::topology_info() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.topology_info)
  return has_topology_info()
      ? *info_type_.topology_info_
      : ::GstDebugger::TopologyInfo::default_instance();
}
::GstDebugger::TopologyInfo* GStreamerData::mutable_topology_info() {
  if (!has_topology_info()) {
    clear_info_type();
    set_has_topology_info();
    info_type_.topology_info_ = new ::GstDebugger::TopologyInfo;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.topology_info)
  return info_type_.topology_info_;
}
::GstDebugger::TopologyInfo* GStreamerData::release_topology_info() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.topology_info)
  if (has_topology_info()) {
    clear_has_info_type();
    ::GstDebugger::TopologyInfo* temp = info_type_.topology_info_;
    info_type_.topology_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_topology_info(::GstDebugger::TopologyInfo* topology_info) {
  clear_info_type();
  if (topology_info) {
    set_has_topology_info();
    info_type_.topology_info_ = topology_info;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.topology_info)
}

// optional .GstDebugger.QueryInfo query_info = 9;
bool GStreamerData::has_query_info() const {
  return info_type_case() == kQueryInfo;
}
void GStreamerData::set_has_query_info() {
  _oneof_case_[0] = kQueryInfo;
}
void GStreamerData::clear_query_info() {
  if (has_query_info()) {
    delete info_type_.query_info_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::QueryInfo& GStreamerData::query_info() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.query_info)
  return has_query_info()
      ? *info_type_.query_info_
      : ::GstDebugger::QueryInfo::default_instance();
}
::GstDebugger::QueryInfo* GStreamerData::mutable_query_info() {
  if (!has_query_info()) {
    clear_info_type();
    set_has_query_info();
    info_type_.query_info_ = new ::GstDebugger::QueryInfo;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.query_info)
  return info_type_.query_info_;
}
::GstDebugger::QueryInfo* GStreamerData::release_query_info() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.query_info)
  if (has_query_info()) {
    clear_has_info_type();
    ::GstDebugger::QueryInfo* temp = info_type_.query_info_;
    info_type_.query_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_query_info(::GstDebugger::QueryInfo* query_info) {
  clear_info_type();
  if (query_info) {
    set_has_query_info();
    info_type_.query_info_ = query_info;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.query_info)
}

// optional .GstDebugger.PropertyValue property_value = 10;
bool GStreamerData::has_property_value() const {
  return info_type_case() == kPropertyValue;
}
void GStreamerData::set_has_property_value() {
  _oneof_case_[0] = kPropertyValue;
}
void GStreamerData::clear_property_value() {
  if (has_property_value()) {
    delete info_type_.property_value_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::PropertyValue& GStreamerData::property_value() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.property_value)
  return has_property_value()
      ? *info_type_.property_value_
      : ::GstDebugger::PropertyValue::default_instance();
}
::GstDebugger::PropertyValue* GStreamerData::mutable_property_value() {
  if (!has_property_value()) {
    clear_info_type();
    set_has_property_value();
    info_type_.property_value_ = new ::GstDebugger::PropertyValue;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.property_value)
  return info_type_.property_value_;
}
::GstDebugger::PropertyValue* GStreamerData::release_property_value() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.property_value)
  if (has_property_value()) {
    clear_has_info_type();
    ::GstDebugger::PropertyValue* temp = info_type_.property_value_;
    info_type_.property_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_property_value(::GstDebugger::PropertyValue* property_value) {
  clear_info_type();
  if (property_value) {
    set_has_property_value();
    info_type_.property_value_ = property_value;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.property_value)
}

// optional .GstDebugger.ElementKlass element_klass = 11;
bool GStreamerData::has_element_klass() const {
  return info_type_case() == kElementKlass;
}
void GStreamerData::set_has_element_klass() {
  _oneof_case_[0] = kElementKlass;
}
void GStreamerData::clear_element_klass() {
  if (has_element_klass()) {
    delete info_type_.element_klass_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::ElementKlass& GStreamerData::element_klass() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.element_klass)
  return has_element_klass()
      ? *info_type_.element_klass_
      : ::GstDebugger::ElementKlass::default_instance();
}
::GstDebugger::ElementKlass* GStreamerData::mutable_element_klass() {
  if (!has_element_klass()) {
    clear_info_type();
    set_has_element_klass();
    info_type_.element_klass_ = new ::GstDebugger::ElementKlass;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.element_klass)
  return info_type_.element_klass_;
}
::GstDebugger::ElementKlass* GStreamerData::release_element_klass() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.element_klass)
  if (has_element_klass()) {
    clear_has_info_type();
    ::GstDebugger::ElementKlass* temp = info_type_.element_klass_;
    info_type_.element_klass_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_element_klass(::GstDebugger::ElementKlass* element_klass) {
  clear_info_type();
  if (element_klass) {
    set_has_element_klass();
    info_type_.element_klass_ = element_klass;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.element_klass)
}

// optional .GstDebugger.BufferInfo buffer_info = 12;
bool GStreamerData::has_buffer_info() const {
  return info_type_case() == kBufferInfo;
}
void GStreamerData::set_has_buffer_info() {
  _oneof_case_[0] = kBufferInfo;
}
void GStreamerData::clear_buffer_info() {
  if (has_buffer_info()) {
    delete info_type_.buffer_info_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::BufferInfo& GStreamerData::buffer_info() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.buffer_info)
  return has_buffer_info()
      ? *info_type_.buffer_info_
      : ::GstDebugger::BufferInfo::default_instance();
}
::GstDebugger::BufferInfo* GStreamerData::mutable_buffer_info() {
  if (!has_buffer_info()) {
    clear_info_type();
    set_has_buffer_info();
    info_type_.buffer_info_ = new ::GstDebugger::BufferInfo;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.buffer_info)
  return info_type_.buffer_info_;
}
::GstDebugger::BufferInfo* GStreamerData::release_buffer_info() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.buffer_info)
  if (has_buffer_info()) {
    clear_has_info_type();
    ::GstDebugger::BufferInfo* temp = info_type_.buffer_info_;
    info_type_.buffer_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_buffer_info(::GstDebugger::BufferInfo* buffer_info) {
  clear_info_type();
  if (buffer_info) {
    set_has_buffer_info();
    info_type_.buffer_info_ = buffer_info;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.buffer_info)
}

// optional .GstDebugger.PadDynamicInfo pad_dynamic_info = 13;
bool GStreamerData::has_pad_dynamic_info() const {
  return info_type_case() == kPadDynamicInfo;
}
void GStreamerData::set_has_pad_dynamic_info() {
  _oneof_case_[0] = kPadDynamicInfo;
}
void GStreamerData::clear_pad_dynamic_info() {
  if (has_pad_dynamic_info()) {
    delete info_type_.pad_dynamic_info_;
    clear_has_info_type();
  }
}
 const ::GstDebugger::PadDynamicInfo& GStreamerData::pad_dynamic_info() const {
  // @@protoc_insertion_point(field_get:GstDebugger.GStreamerData.pad_dynamic_info)
  return has_pad_dynamic_info()
      ? *info_type_.pad_dynamic_info_
      : ::GstDebugger::PadDynamicInfo::default_instance();
}
::GstDebugger::PadDynamicInfo* GStreamerData::mutable_pad_dynamic_info() {
  if (!has_pad_dynamic_info()) {
    clear_info_type();
    set_has_pad_dynamic_info();
    info_type_.pad_dynamic_info_ = new ::GstDebugger::PadDynamicInfo;
  }
  // @@protoc_insertion_point(field_mutable:GstDebugger.GStreamerData.pad_dynamic_info)
  return info_type_.pad_dynamic_info_;
}
::GstDebugger::PadDynamicInfo* GStreamerData::release_pad_dynamic_info() {
  // @@protoc_insertion_point(field_release:GstDebugger.GStreamerData.pad_dynamic_info)
  if (has_pad_dynamic_info()) {
    clear_has_info_type();
    ::GstDebugger::PadDynamicInfo* temp = info_type_.pad_dynamic_info_;
    info_type_.pad_dynamic_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GStreamerData::set_allocated_pad_dynamic_info(::GstDebugger::PadDynamicInfo* pad_dynamic_info) {
  clear_info_type();
  if (pad_dynamic_info) {
    set_has_pad_dynamic_info();
    info_type_.pad_dynamic_info_ = pad_dynamic_info;
  }
  // @@protoc_insertion_point(field_set_allocated:GstDebugger.GStreamerData.pad_dynamic_info)
}

bool GStreamerData::has_info_type() const {
  return info_type_case() != INFO_TYPE_NOT_SET;
}
void GStreamerData::clear_has_info_type() {
  _oneof_case_[0] = INFO_TYPE_NOT_SET;
}
GStreamerData::InfoTypeCase GStreamerData::info_type_case() const {
  return GStreamerData::InfoTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace GstDebugger

// @@protoc_insertion_point(global_scope)
